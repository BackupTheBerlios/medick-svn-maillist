From aurelian at mail.berlios.de  Wed Aug  1 16:57:21 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Wed, 1 Aug 2007 16:57:21 +0200
Subject: [Medick-svn] r451 - in trunk: . libs/action/controller
	libs/action/controller/http
Message-ID: <200708011457.l71EvLuO024905@sheep.berlios.de>

Author: aurelian
Date: 2007-08-01 16:57:17 +0200 (Wed, 01 Aug 2007)
New Revision: 451

Modified:
   trunk/CHANGELOG
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/http/HTTPRequest.php
   trunk/libs/action/controller/http/HTTPResponse.php
Log:
 * Added ETag support
 * Consistency in the web server request headers



Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2007-07-23 18:19:53 UTC (rev 450)
+++ trunk/CHANGELOG	2007-08-01 14:57:17 UTC (rev 451)
@@ -4,8 +4,9 @@
     - (bug) fixed URL::create when rewrite is off (still needs more testing)
     - (bug) fixed a syntax error in JSON
     - moved configurator to context
-    - start to work on ETag
-    - start to unify logger messages
+    - added support for ETag
+    - unifyed logger messages
+    - unifyed HTTPReqest Headers (If-None-Match for Apache was If_None_March on non Apache Web servers)
     - added methods to allow more control of HTTPResponse headers
     - some docs on HTTPResponse
     - using ORIG_PATH_INFO in HTTPRequest so it can work with lighttpd

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2007-07-23 18:19:53 UTC (rev 450)
+++ trunk/libs/action/controller/Base.php	2007-08-01 14:57:17 UTC (rev 451)
@@ -268,6 +268,10 @@
         the layout to use */
     protected $use_layout= TRUE;
 
+    /** @var bool  
+        etag flag, set to true to use the Etag caching, false to disable-it */
+    protected $use_etag= TRUE;
+
     /** @var ActiveViewBase
         Template Engine */
     protected $template;
@@ -449,32 +453,48 @@
      */
     protected function render_text($text = '', $status = NULL) {
         if ($this->action_performed) {
-            $this->logger->info('Action already performed...');
+            $this->logger->warn('[Medick] >> Action already performed...');
             return;
         }
+        
         $status = $status === NULL ? HTTPResponse::SC_OK : $status;
+
         // add ETag header
-        // if( $status == HTTPResponse::SC_OK && strlen($text) > 0 ) { 
-        //   $this->response->setHeader('ETag', md5($text));
-        //   if( $this->request->getHeader('HTTP_IF_NONE_MATCH') == md5($text) ) {
-        //     $this->response->setStatus(HTTPResponse::SC_NOT_MODIFIED);
-        //     $this->response->setContent('');
-        //   } else {
-            $this->response->setStatus($status);
-            $this->response->setContent($text);
-        //   }
-        // } else {
-        //   $this->response->setStatus($status);
-        //   $this->response->setContent($text);
-        // }
-        $this->action_performed = TRUE;
-        $this->logger->debug('Action performed.');
+        if( $this->use_etag && $status == HTTPResponse::SC_OK && strlen($text) > 0 ) {
+            $this->set_etag_headers( $text );
+            if( $this->request->getHeader('If-None-Match') == md5($text) ) {
+                $this->logger->debug( '[Medick] >> Got response from browser cache (code=304, body="").' );
+                $this->_perform( HTTPResponse::SC_NOT_MODIFIED, '' );
+            } else {
+                $this->_perform($status, $text);
+            }
+        }  else {
+            $this->_perform($status, $text);
+        }
 
+        $this->action_performed= TRUE;
+        $this->logger->debug( '[Medick] >> Action performed.' );
+
         if ($this->session->hasValue('flash')) {
             $this->session->removeValue('flash');
         }
     }
+  
+    // move to response
+    private function _perform($status, $text) {
+      $this->response->setStatus($status);
+      $this->response->setContent($text);
+    }
 
+    private function set_etag_headers( $text ) {
+      $this->response->setHeader('ETag', md5($text));
+      $this->logger->debug( sprintf('[Medick] >> ETag set to %s.', md5($text)) );
+      // get around PHP session
+      $this->response->setHeader('Cache-Control', null, false);
+      $this->response->setHeader('Expires', null, false);
+      $this->response->setHeader('Pragma', null, false);
+    }
+
     // }}}
 
     private function register_flash() {

Modified: trunk/libs/action/controller/http/HTTPRequest.php
===================================================================
--- trunk/libs/action/controller/http/HTTPRequest.php	2007-07-23 18:19:53 UTC (rev 450)
+++ trunk/libs/action/controller/http/HTTPRequest.php	2007-08-01 14:57:17 UTC (rev 451)
@@ -256,8 +256,14 @@
             $headers= getallheaders();
         } else {
             foreach($_SERVER as $header=>$value) {
-                if(ereg('HTTP_(.+)',$header,$hp)) {
-                    $headers[ucfirst(strtolower($hp[1]))] = $value;
+              if(preg_match('/HTTP_(.+)/',$header,$hp)) {
+                  $h= preg_replace_callback(
+                    '/(^|_)(.)/', 
+                    create_function(  
+                        '$matches', 
+                        'return $matches[1] ? "-".ucfirst( $matches[2] ) : ucfirst( $matches[2] );'), 
+                    strtolower($hp[1]));
+                  $headers[$h] = $value;
                 }
             }
         }

Modified: trunk/libs/action/controller/http/HTTPResponse.php
===================================================================
--- trunk/libs/action/controller/http/HTTPResponse.php	2007-07-23 18:19:53 UTC (rev 450)
+++ trunk/libs/action/controller/http/HTTPResponse.php	2007-08-01 14:57:17 UTC (rev 451)
@@ -77,7 +77,7 @@
     const SC_SERVICE_UNAVAILABLE = 503;
 
     /** Constructor */
-    public function HTTPResponse() {    }
+    public function HTTPResponse() {  }
     
     /**
      * Sets the header $name with $value
@@ -189,7 +189,7 @@
      */
     public function redirect( $location ) {
         $this->setHeader('Location', $location);
-        $this->content = "<html><body>You are being <a href=\"$location\">redirected</a>.</body></html>";
+        $this->content = '<html><body>You are being <a href="'.$location.'">redirected</a>.</body></html>';
     }
 }
 



From aurelian at mail.berlios.de  Wed Aug 15 10:06:57 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Wed, 15 Aug 2007 10:06:57 +0200
Subject: [Medick-svn] r452 - in trunk: . libs/action/controller
	libs/action/view libs/active/record libs/context/configurator
	libs/creole/drivers/sqlite libs/medick
Message-ID: <200708150806.l7F86vqi012298@sheep.berlios.de>

Author: aurelian
Date: 2007-08-15 10:06:49 +0200 (Wed, 15 Aug 2007)
New Revision: 452

Modified:
   trunk/CHANGELOG
   trunk/VERSION
   trunk/boot.php
   trunk/libs/action/controller/Base.php
   trunk/libs/action/view/HTML.php
   trunk/libs/active/record/Association.php
   trunk/libs/active/record/Base.php
   trunk/libs/active/record/QueryBuilder.php
   trunk/libs/active/record/Validator.php
   trunk/libs/context/configurator/LoggerConfigurator.php
   trunk/libs/creole/drivers/sqlite/SQLiteConnection.php
   trunk/libs/medick/ErrorHandler.php
   trunk/libs/medick/Medick.php
   trunk/libs/medick/Object.php
   trunk/libs/medick/util.php
Log:
 * ETag is disabled by deafult
 * Added MTimer class
 * More on logger message
 * SQLiteConnection forced to use Medick Error Handler
 * Small speed improvements and refactorings to ActiveRecord
 * Prepare for release 0.4.1



Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/CHANGELOG	2007-08-15 08:06:49 UTC (rev 452)
@@ -1,15 +1,17 @@
 $Id$
 
-0.4.1-svn
-    - (bug) fixed URL::create when rewrite is off (still needs more testing)
-    - (bug) fixed a syntax error in JSON
+0.4.1 (15.Aug.2007)
+    - (fixed) URL::create when rewrite is off (still needs more testing)
+    - (fixed) syntax error in HTML.JSON
+    - added MTimer for timing code execution
     - moved configurator to context
-    - added support for ETag
+    - added support for ETag (disabled by default)
     - unifyed logger messages
     - unifyed HTTPReqest Headers (If-None-Match for Apache was If_None_March on non Apache Web servers)
     - added methods to allow more control of HTTPResponse headers
     - some docs on HTTPResponse
     - using ORIG_PATH_INFO in HTTPRequest so it can work with lighttpd
+    - small refactorings to ActiveRecord and Creole SQLiteConnection
     
 0.4.0 (17.Jun.2007)
     - added HTTPRequest::is_xhr() method

Modified: trunk/VERSION
===================================================================
--- trunk/VERSION	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/VERSION	2007-08-15 08:06:49 UTC (rev 452)
@@ -1 +1 @@
-0.4.1-svn
+0.4.1

Modified: trunk/boot.php
===================================================================
--- trunk/boot.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/boot.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian[at]locknet[dot]ro>
+// Copyright (c) 2005 - 2007 Aurelian Oancea <aurelian[at]locknet[dot]ro>
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //
@@ -43,14 +43,14 @@
 set_include_path( MEDICK_PATH . 'libs'   . DIRECTORY_SEPARATOR );
 
 // this should depend on environment
-error_reporting( E_ALL | E_STRICT );
+error_reporting( E_ALL | E_STRICT | E_RECOVERABLE_ERROR );
 // php 5.1 strict sdandards.
 if (version_compare(PHP_VERSION, '5.1.0') > 0) {
     date_default_timezone_set('Europe/Bucharest');
 }
 
 // load core classes
-require('medick/Medick.php');
-set_error_handler(array(new ErrorHandler(), 'raiseError'));
+require( 'medick/Medick.php' );
+set_error_handler( array(new ErrorHandler(), 'raiseError') );
 require('action/controller/Dispatcher.php');
 

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/action/controller/Base.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -266,11 +266,11 @@
 
     /** @var string
         the layout to use */
-    protected $use_layout= TRUE;
+    protected $use_layout= true;
 
     /** @var bool  
         etag flag, set to true to use the Etag caching, false to disable-it */
-    protected $use_etag= TRUE;
+    protected $use_etag= false;
 
     /** @var ActiveViewBase
         Template Engine */

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/action/view/HTML.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -223,23 +223,19 @@
  */
 class URL extends Object {
 
-    public static function create($controller, $action='index', $params=array(), $ext='html') {
+    public static function create( $controller, $action='index', $params=array(), $ext='html' ) {
         $config = Registry::get('__configurator');
-        $base   = (string)$config->getWebContext()->document_root;
+        $base   = (string)$config->getWebContext()->server_name . (string)$config->getWebContext()->document_root;
         $rewrite= (string)strtolower($config->getWebContext()->rewrite);
         if ($rewrite == 'false' || $rewrite == 'off' || $rewrite == '0') {
-            $base .= 'index.php';
+            $base .= 'index.php/';
         }
-        $buff= $base . '/';
-        if ($controller) $buff .= $controller . '/';
-        $buff .= $action;
-        
+        if ($controller) $base .= $controller . '/';
+        $base .= $action;
         foreach ($params as $key=>$value) {
-            $buff .= '/' . $value;
+            $base .= '/' . $value;
         }
-        
-        if ($ext=='') return $buff;
-        else return $buff . '.' . $ext;
+        return $ext == '' ? $base : $base . '.' . $ext;
     }
 }
 

Modified: trunk/libs/active/record/Association.php
===================================================================
--- trunk/libs/active/record/Association.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/active/record/Association.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/active/record/Base.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -71,28 +71,32 @@
 
     /** @var string
         class name: Person */
-    protected $class_name = NULL;
+    protected $class_name  = null;
 
     /** @var string
-        table mane: persons */
-    protected $table_name = NULL;
+        table name: persons */
+    protected $table_name  = null;
 
     /** @var CreoleConnection
         database connection */
-    static protected $conn= NULL;
+    static protected $conn = null;
+    
+    /** @var array
+        this Object fields */
+    protected $fields   = array();
 
-    /** @var DatabaseRow
-        our database row. */
-    // protected $row;
+    /** @var array
+        an array of validators attached to this object */
+    private $validators = array();
 
-    protected $fields=array();
+    /** @var array
+        an array of errors associated with this object */
+    private $errors     = array();
     
-    private $validators= array();
+    /** @var bool
+        flag that indicates if the errors where collected or not */
+    private $collected  = false;
     
-    private $errors= array();
-
-    private $collected= FALSE;
-    
     /** @var string
         primary key name */
     private $pk;
@@ -108,9 +112,8 @@
      * Constructor
      *
      * @param array, params, parameters as pair of `field name` => `value`
-     * @final because there is no reason to overwrite in parent classes, PHP Engine will call this constructor by default.
      */
-    public function ActiveRecord($params= array()) {
+    public function ActiveRecord( Array $params= array() ) {
         $this->class_name = $this->getClassName();
         $this->table_name = Inflector::pluralize(strtolower(Inflector::underscore($this->class_name)));
         $table_info = ActiveRecordTableInfo::getInstance(ActiveRecord::connection(), $this->table_name);
@@ -134,11 +137,13 @@
             }
             $this->fields[$field->getName()]= $field;
         }
-        // confused?
+        // confused? this sets the field values
         if(!empty($params)) { foreach ($params as $field_name => $field_value) {
             $this->$field_name = $field_value;
         }}
     }
+    
+    // private $inc=null;
 
     /**
      * It sets the value of the field
@@ -149,8 +154,25 @@
      * @throws ActiveRecordException if the field is not found.
      */
     public function __set($name, $value) {
-        if ($this->hasField($name)) $this->getField($name)->setValue($value);
-        else throw new ActiveRecordException('No such Filed: ' . $name);
+
+        /*$tmp = explode(".", $name);
+
+        if( sizeof($tmp) > 1 ) {
+          if( $tmp[0] == $this->table_name ) {
+            $name= $tmp[1];
+          } else {
+            if( !$this->inc ) {
+              $this->inc= ActiveRecord::reflect_class( Inflector::singularize( $tmp[0] ) )->newInstance();
+            }
+            return $this->inc->getField($tmp[1])->setValue($value);
+          }
+        }*/
+
+        if ( $this->hasField( $name ) ) return $this->getField( $name )->setValue( $value );
+        if ( $value instanceof ActiveRecord && $this->belongs_to( $value->getClassName() ) ) {
+            return $this->getField( $name.'_id' )->setValue($value->id);
+        }
+        throw new ActiveRecordException('No such Field: ' . $name);
     }
 
     /**
@@ -162,13 +184,15 @@
      * @return field value
      */
     public function __get($name) {
-        if ($this->hasField($name)) return $this->getField($name)->getValue();
+        if ( $this->hasField($name) ) return $this->getField( $name )->getValue();
+        // if ( $this->inc && $this->inc->getClassName()==ucfirst($name) ) return $this->inc;//->getField( $name )->getValue();
         try {
-            return Association::resolve($this, $name)->execute();
+            return Association::resolve( $this, $name )->execute();
         } catch (AssociationNotFoundException $anfEx) {
             throw new ActiveRecordException(
                 'Cannot Get the value of field: `' . $name . '`. No such field!', $anfEx->getMessage() );
         }
+
     }
     
     /**
@@ -180,12 +204,6 @@
      *    <i>validates_</i>*, it loads a Validator, eg. validates_presence_of will load PresenceOfValidator<br />
      *  </li>
      *  <li>
-     *    <i>before_</i>* , if not defined, a call to a before filter will return true
-     *  </li>
-     *  <li>
-     *    <i>after_</i>* , if not defined this will return
-     *  </li>
-     *  <li>
      *    <i>get</i>* , if not defined will try to return a Field, eg.: assuming Person is an ActiveRecord class:<br />
      *    <code>$p= Person::find(1);
      * $p->getName(); // returns a Field object
@@ -214,8 +232,8 @@
             $this->validators[]= $validator;
             return $validator;
         }
-        if (substr($method,0,7) == 'before_') return true; 
-        if (substr($method,0,6) == 'after_')  return;
+        // if (substr($method,0,7) == 'before_')return true; 
+        // if (substr($method,0,6) == 'after_')  return;
         if (substr($method,0,3) == 'get' && $this->hasField(strtolower(substr($method, 3)))) {
             return $this->getField(strtolower(substr($method, 3)));
         }
@@ -265,7 +283,7 @@
     public function getTableName() {
         return $this->table_name;
     }
-    
+
     /**
      * Check if it has a Field with the given name
      *
@@ -279,7 +297,7 @@
     /**
      * It gets all the Fields of this Object
      *
-     * @return Array
+     * @return Array of Field
      */ 
     public function getFields() {
         return $this->fields;
@@ -301,6 +319,7 @@
      * @return Field
      */ 
     public function getPrimaryKey() {
+        if($this->hasField('id')) return $this->getField('id');
         foreach($this->fields as $field) {
             if ($field->isPk) return $field;
         }
@@ -320,25 +339,63 @@
     }
     
     /**
+     * Checks if this Object has declared a has_one association
+     *
+     * @return bool
+     */ 
+    public function has_one( $thing ) {
+        return in_array( strtolower($thing), $this->has_one );
+    }
+
+    /**
+     * Checks if this Object has declared a belongs_to association
+     *
+     * @return bool 
+     */  
+    public function belongs_to( $thing ) {
+        return ( in_array( strtolower($thing), $this->belongs_to ) && $this->hasField(strtolower($thing).'_id') );
+    }
+    
+    /**
      * Check if this object has errors
      *
-     * @return bool TRUE if it has
+     * @return bool true if it has
      */ 
     public function hasErrors() {
         return sizeof($this->errors) > 0;
     }
-
+    
+    /**
+     * Gets the Object Errors
+     *
+     * @return array
+     */ 
     public function getErrors() {
         return $this->errors;
     }
-    
-    public function isValid($force= FALSE) {
-        if ($this->collected) return !$this->hasErrors();
+
+    /**
+     * Check if this Object is Valid
+     * 
+     * Note: You have to perform an action on the object before checking it's 
+     * validity, otherwise it will return true
+     *
+     * @return @bool
+     */
+    public function isValid( $force= false ) {
+        if ( $this->collected ) return !$this->hasErrors();
         else return $this->collect_errors($force) === 0;
     }
-
-    private function collect_errors($force= FALSE) {
-        if ($this->collected && !$force) return sizeof($this->errors);
+    
+    /**
+     * Collects the errors associated with this object
+     * 
+     * It also builds the errors array
+     *
+     * @return int number of errors
+     */ 
+    private function collect_errors( $force= false ) {
+        if ($this->collected && !$force) return sizeof( $this->errors );
         $this->run_validators();
         foreach ($this->fields as $field) {
             if ($field->hasErrors()) {
@@ -349,16 +406,32 @@
                 // $this->errors= $field->getErrors();
             }
         }
-        $this->collected= TRUE;
+        $this->collected= true;
         return sizeof($this->errors);
     }
-    
+
+    /**
+     * Runs each validator
+     *
+     * @return void
+     */ 
     private function run_validators() {
         foreach ($this->validators as $v) {
             $v->validate_each();
         }
     }
-    
+
+    // {{{ filters
+    protected function before_insert() { return true; }
+    protected function after_insert() { }
+    protected function before_update() { return true; }
+    protected function after_update() { }
+    protected function before_save() {   return true; }
+    protected function after_save() { }
+    protected function before_delete() { return true; }
+    protected function after_delete() { }
+    // }}}
+
     // {{{ save
     /**
      * Save,
@@ -366,24 +439,21 @@
      *    or an Update returning the number of affected rows.
      * If the primary key is affected (changed) on this run we will do an update, otherwise an insert.
      * <code>
-     *      $author = new Author();
-     *      $author->name = 'Mihai';
-     *      $author->firstName = 'Eminescu';
-     *      $author->save(); // will do the insert, returning the ID of the last field inserted.
-     *      // a mistake, let`s update.
-     *      $author->firstName = 'Sadoveanu';
-     *      $author->save(); // performs the update and returns the number of affected rows (1).
+     *  $author = new Author();
+     *  $author->name = 'Mihai';
+     *  $author->firstName = 'Eminescu';
+     *  $author->save(); // will do the insert, returning the ID of the last field inserted.
+     *  // a mistake, let`s update.
+     *  $author->firstName = 'Sadoveanu';
+     *  $author->save(); // performs the update and returns the number of affected rows (1).
      * </code>
      */
     public function save() {
-        if ( !$this->before_save() || !$this->isValid()) {
-            return false;
-        }
-        if ($this->getPrimaryKey()->isAffected) {
-            return $this->update();
-        } else {
-            return $this->insert();
-        }
+        if ( !$this->before_save() || !$this->isValid()) return false;
+        if ( $this->getPrimaryKey()->isAffected ) $af= $this->update();
+        else $af= $this->insert();
+        $this->after_save();
+        return $af;
     }
     // }}}
 
@@ -392,11 +462,9 @@
      * Executes an SQL insert
      *
      * <code>
-     *     $author = new Author();
-     *     $author->name= 'Mihai';
-     *     $author->insert();
-     *     // is translated into:
-     *     // INSERT INTO authors (name) VALUES ('Mihai');
+     *  $author = new Author();
+     *  $author->name= 'Mihai';
+     *  $author->insert(); // INSERT INTO authors (name) VALUES ('Mihai');
      * </code>
      *
      * @return int next primary key id or, 1 (affected rows).
@@ -418,22 +486,24 @@
      * Executes a SQL update
      *
      * <code>
-     *     $author = new Author(array('id'=>5));
-     *     // or: $author= new Author(); $author->id = 5;
-     *     $author->name= 'Mihai';
-     *     $author->update();
-     *     // is translated into:
-     *     // UPDATE authors set name='Mihai' WHERE id=5;
+     *  $author = new Author( array('id'=>5) );
+     *  // or: $author= new Author(); $author->id = 5;
+     *  $author->name= 'Mihai';
+     *  $author->update(); // UPDATE authors set name='Mihai' WHERE id=5;
      * </code>
      *
      * @return int affected rows.
      * @throws SQLException
      */
     public function update() {
-        if ( !$this->before_update() || !$this->isValid()) {
-            return false;
-        }
-        $af= $this->performQuery($this->getUpdateSql());
+        $this->before_update();
+        if( !$this->isValid() ) return false;
+        
+        // if ( !$this->before_update() || !$this->isValid()) {
+        //     return false;
+        // }
+
+        $af= $this->performQuery( $this->getUpdateSql() );
         $this->after_update();
         return $af;
     }
@@ -445,15 +515,16 @@
      *   $author= Author::find(5); // select * from authors where id=5;
      *   $author->attributes(array('name'=>'Jon'))->save(); // update authors set name='Jon' where id=5;
      * </code>
-     * This method is also useful when receiving an array of parameters from HTTPRequest (form).
+     *
+     * This method is also useful when receiving an array of parameters from HTTPRequest (form):
      * <code>
      *   // controller
-     *   $user= User::find($request->getParameter('id'))->attributes($request->getParameter('user'))->save();
+     *   $user= User::find( $request->getParameter('id') )->attributes($request->getParameter('user'))->save();
      * </code>
      *
      * @return ActiveRecord
      */ 
-    public function attributes(/*Array*/ $params=array()) {
+    public function attributes( Array $params=array() ) {
         foreach($params as $name=>$value) {
             $this->$name=$value;
         }
@@ -467,12 +538,8 @@
      * Performs an SQL delete.
      *
      * <code>
-     *     $affected_rows= new Author(array('id'=>5, 'name'=>'Mihai'))->delete();
-     *     // translated into:
-     *     // DELETE FROM authors WHERE id=5 and name='Mihai';
-     *     $affected_rows = new Author(array('name'=>'Mihai'))->delete();
-     *     // is translated to:
-     *     // DELETE FROM authors WHERE name='Mihai'
+     *  $author= Author::find(5);
+     *  $author->delete(); // delete from authors where id=5
      * </code>
      *
      * @return int affected rows.
@@ -485,10 +552,13 @@
         if ($this->getPrimaryKey() !== NULL && $this->getPrimaryKey()->getValue()===NULL) {
             throw new ActiveRecordException('Refusing to delete everything from ' . $this->table_name . ', Primary Key was NULL');
         }
+        $timer= new MTimer();
         $sql= 'delete from ' . $this->table_name . ' where id=?';
-        $stmt= ActiveRecord::$conn->prepareStatement($sql);
+        $stmt= ActiveRecord::$conn->prepareStatement( $sql );
         $stmt->setInt(1, $this->getPrimaryKey()->getValue());
         $af_rows= $stmt->executeUpdate();
+        $stmt->close();
+        ActiveRecord::log( $timer, $af_rows );
         $this->after_delete();
         return $af_rows;
     }
@@ -519,18 +589,25 @@
      * @return int affected rows
      * @throws SQLException
      */
-    private function performQuery($sql) {
+    private function performQuery( $sql ) {
+        $timer= new MTimer();
         $stmt = ActiveRecord::$conn->prepareStatement($sql);
         ActiveRecord::populateStmtValues($stmt, $this->getAffectedFields());
         $af_rows = $stmt->executeUpdate();
         $stmt->close();
-        Registry::get('__logger')->debug(sprintf("[Medick] >> SQLQuery\n\t%s", ActiveRecord::$conn->lastQuery));
-        // $this->_reset();
+        ActiveRecord::log($timer, $af_rows);
         return $af_rows;
     }
 
+    protected static function log( $timer=null, $rows=null ) {
+      Registry::get('__logger')->debug(
+        sprintf("[Medick] >> SQLQuery ( %s %.3f sec. )\n\t%s", $rows!==null ? $rows==1 ? $rows.' row.':$rows.' rows.' :'', $timer->stop(), ActiveRecord::$conn->lastQuery)
+      );
+      unset($timer);
+    }
+
     /**
-     * It gets the sql snippet that will be  used to execute an update
+     * It gets the sql snippet that will be used to execute an update
      *
      * FIXME:
      * <tt>UPDATE __TABLE__ SET foo='12' WHERE bar='ee';</tt>
@@ -546,14 +623,16 @@
         $sql  = 'UPDATE ' . $this->table_name . ' SET ';
         // $sql .= implode(' = ?, ', $this->row->getAffectedFieldsNames());
 
-        foreach($this->getAffectedFields() as $field) {
-            $sql .= $field->getName() . ' = ?, ';
+        // foreach($this->getAffectedFields() as $field) {
+        foreach($this->fields as $field) {
+            if($field->isAffected()) $sql .= $field->getName() . ' = ?, ';
         }
         return substr($sql, 0, -2) . $sqlSnippet;
     }
 
     /**
      * It gets the sql snippet to use for an insert
+     *
      * @return string
      */
     private function getInsertSql() {
@@ -603,9 +682,10 @@
      * @param string sql query to execute
      * @return ResultSet
      */ 
-    protected static function execute($sql) {
-        $r= ActiveRecord::connection()->executeQuery($sql);
-        Registry::get('__logger')->debug( ActiveRecord::$conn->lastQuery );
+    protected static function execute( $sql ) {
+        $timer = new MTimer();
+        $r= ActiveRecord::connection()->executeQuery( $sql );
+        ActiveRecord::log( $timer );
         return $r;
     }
 
@@ -620,11 +700,13 @@
     }
        
     /**
+     *
      * @return ActiveRecord or a RowsAggregate (Collection of ActiveRecords)
      */
     public static function build(QueryBuilder $builder) {
-        $class= ActiveRecord::reflect_class($builder->getOwner());
-        $rs= ActiveRecord::create_result_set($builder);
+        // $class= ActiveRecord::reflect_class( $builder->getOwner() );
+        $class= $builder->getOwnerClass();
+        $rs= ActiveRecord::create_result_set( $builder );
         if ($builder->getType() == 'first') return ActiveRecord::fetch_one($rs, $class);
         return ActiveRecord::fetch_all($rs, $class);
     } 
@@ -634,7 +716,7 @@
      *
      * @return ReflectionClass
      */
-    protected static function reflect_class($class_name, $r=0) {
+    public static function reflect_class( $class_name, $r=0 ) {
         try {
             return new ReflectionClass($class_name);
         } catch (ReflectionException $rEx) {
@@ -649,12 +731,13 @@
      * @return ResultSet
      */
     protected static function create_result_set(QueryBuilder $builder) {
+        $timer = new MTimer();
         $stmt = ActiveRecord::connection()->prepareStatement($builder->compile()->getQueryString());
         $i=1; foreach($builder->getBindings() as $binding) $stmt->set($i++, $binding);
         if ($limit  = $builder->getLimit())  $stmt->setLimit($limit);
         if ($offset = $builder->getOffset()) $stmt->setOffset($offset);
         $rs= $stmt->executeQuery();
-        Registry::get('__logger')->debug(sprintf("[Medick] >> SQLQuery\n\t%s", ActiveRecord::$conn->lastQuery));
+        ActiveRecord::log( $timer );
         $stmt->close();
         return $rs;
     }
@@ -698,7 +781,7 @@
      */ 
     protected static function connection() {
         if (ActiveRecord::$conn === NULL) {
-            ActiveRecord::$conn = Creole::getConnection(ActiveRecord::parse_dsn());
+            ActiveRecord::$conn = Creole::getConnection( ActiveRecord::parse_dsn() );
         }
         return ActiveRecord::$conn;
     }
@@ -717,14 +800,6 @@
      */ 
     private static function parse_dsn() {
         return Registry::get('__configurator')->getDatabaseDsn();
-        /*
-        $ini_file= Registry::get('__configurator')->getApplicationPath() . DIRECTORY_SEPARATOR . 'conf' . DIRECTORY_SEPARATOR . 'database.ini';
-        if (!is_file($ini_file)) {
-            throw new ActiveRecordException('Cannot load database settings from: ' . $ini_file . ' No such file or directory!');
-        }
-        $settings= parse_ini_file($ini_file, true);
-        return $settings[Registry::get('__configurator')->getEnvName()];
-        */
     }
     // }}}
 }

Modified: trunk/libs/active/record/QueryBuilder.php
===================================================================
--- trunk/libs/active/record/QueryBuilder.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/active/record/QueryBuilder.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //
@@ -121,6 +121,15 @@
     }
     
     /**
+     * It creates an instance of the owner
+     *
+     * @return ReflectionClass
+     */ 
+    public function getOwnerClass() {
+        return ActiveRecord::reflect_class( $this->owner );
+    }
+
+    /**
      * It gets the current list of bindings
      *
      * @return array the list of bindings
@@ -155,6 +164,9 @@
      * @return SQLCommand
      */
     public function compile() {
+        if(isset($this->clauses['include'])) {
+          $this->clauses['left join'] = Inflector::pluralize($this->clauses['include']) . ' on ' . Inflector::pluralize($this->clauses['include']).'.id='.Inflector::tabelize($this->owner).'.'.$this->clauses['include'].'_id';
+        }
         $command= SQLCommand::select()->from(Inflector::tabelize($this->owner));
         if (isset($this->clauses['from']))       $command->from($this->clauses['from']);
         if (isset($this->clauses['condition']))  $command->where($this->clauses['condition']);

Modified: trunk/libs/active/record/Validator.php
===================================================================
--- trunk/libs/active/record/Validator.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/active/record/Validator.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2006 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //
@@ -236,7 +236,7 @@
      * @see Validator::validates
      */ 
     public function validate(Field $field) {
-        if ($field->getValue() == '') { 
+        if ( $field->getValue() == '' ) { 
             $field->addError(sprintf($this->message, $field->getFormattedName()));
         }
     }

Modified: trunk/libs/context/configurator/LoggerConfigurator.php
===================================================================
--- trunk/libs/context/configurator/LoggerConfigurator.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/context/configurator/LoggerConfigurator.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -32,7 +32,7 @@
 // ///////////////////////////////////////////////////////////////////////////////
 // }}}
 
-include_once('configurator/IConfigurator.php');
+include_once('context/configurator/IConfigurator.php');
 
 /**
  * A plain Application Configurator

Modified: trunk/libs/creole/drivers/sqlite/SQLiteConnection.php
===================================================================
--- trunk/libs/creole/drivers/sqlite/SQLiteConnection.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/creole/drivers/sqlite/SQLiteConnection.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -178,18 +178,20 @@
         require_once 'creole/drivers/sqlite/SQLiteResultSet.php';
         return new SQLiteResultSet($this, $result, $fetchmode);    
     }    
-    
+
+   
+
     /**
      * @see Connection::executeUpdate()
      */
-    function executeUpdate($sql)
-    {
-        $this->lastQuery = $sql;
-        $result = @sqlite_query($this->dblink, $this->lastQuery);
-        if (!$result) {            
-            throw new SQLException('Could not execute update', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
+    function executeUpdate($sql) {
+        $this->lastQuery= $sql;
+        try {
+          sqlite_query( $this->dblink, $this->lastQuery );
+        } catch(Error $err) {
+          throw new SQLException('Could not execute update', $this->formatErrorMessage(), $this->lastQuery);
         }
-        return (int) @sqlite_changes($this->dblink);
+        return $this->getUpdateCount();
     }
     
     /**
@@ -232,14 +234,16 @@
     }
 
     /**
-     * Gets the number of rows affected by the data manipulation
-     * query.
+     * Gets the number of rows affected by the data manipulation query.
      *
      * @return int Number of rows affected by the last query.
      */
-    function getUpdateCount()
-    {
+    function getUpdateCount() {
         return (int) @sqlite_changes($this->dblink);
     }
-    
+
+    protected function formatErrorMessage() {
+      return sqlite_error_string( sqlite_last_error($this->dblink) );
+    }
+
 }

Modified: trunk/libs/medick/ErrorHandler.php
===================================================================
--- trunk/libs/medick/ErrorHandler.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/medick/ErrorHandler.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //

Modified: trunk/libs/medick/Medick.php
===================================================================
--- trunk/libs/medick/Medick.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/medick/Medick.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //
@@ -52,7 +52,7 @@
      * @return string the medick version
      */
     public static function getVersion() {
-        return '0.4.1-svn';
+        return '0.4.1';
     }
 
 }

Modified: trunk/libs/medick/Object.php
===================================================================
--- trunk/libs/medick/Object.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/medick/Object.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //
@@ -102,3 +102,27 @@
 class MedickMethod extends ReflectionMethod {}
 
 class MedickProperty extends ReflectionProperty {}
+
+/**
+ * "Benchmark" tool
+ *
+ * <code>
+ *  $t= new MTimer();
+ *  $t->stop();
+ * </code>
+ *
+ * @since 0.4.1
+ * @package medick.core
+ *
+ */ 
+class MTimer extends Object {
+  private $start;
+  public function MTimer() {
+    $this->start= microtime(true);
+  }
+  public function stop() {
+    return microtime(true) - $this->start;
+  }
+}
+
+

Modified: trunk/libs/medick/util.php
===================================================================
--- trunk/libs/medick/util.php	2007-08-01 14:57:17 UTC (rev 451)
+++ trunk/libs/medick/util.php	2007-08-15 08:06:49 UTC (rev 452)
@@ -2,7 +2,7 @@
 // {{{ License
 // ///////////////////////////////////////////////////////////////////////////////
 //
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot] ro >
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot] ro >
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are met:
@@ -12,7 +12,7 @@
 //   * Redistributions in binary form must reproduce the above copyright notice,
 //   this list of conditions and the following disclaimer in the documentation
 //   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
 //   be used to endorse or promote products derived from this software without
 //   specific prior written permission.
 //



From aurelian at mail.berlios.de  Fri Aug 17 16:20:59 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Fri, 17 Aug 2007 16:20:59 +0200
Subject: [Medick-svn] r453 - in exp: . ar5
Message-ID: <200708171420.l7HEKxkC032670@sheep.berlios.de>

Author: aurelian
Date: 2007-08-17 16:20:56 +0200 (Fri, 17 Aug 2007)
New Revision: 453

Added:
   exp/ar5/
   exp/ar5/README
   exp/ar5/ar5.php
   exp/ar5/ar5_base.php
   exp/ar5/ar5_sql.php
Modified:
   exp/README
Log:
 -- initial experiment on future ActiveRecord

Modified: exp/README
===================================================================
--- exp/README	2007-08-15 08:06:49 UTC (rev 452)
+++ exp/README	2007-08-17 14:20:56 UTC (rev 453)
@@ -3,5 +3,6 @@
 medick/exp holds medick experiments
 
 Contents:
-    -> validator API (validator_api.php)
+    -> ActiveRecord5 (ar5/README) started 16.08.2007
+    -> validator API (validator_api.php) merged to trunk
 

Added: exp/ar5/README
===================================================================
--- exp/ar5/README	2007-08-15 08:06:49 UTC (rev 452)
+++ exp/ar5/README	2007-08-17 14:20:56 UTC (rev 453)
@@ -0,0 +1,5 @@
+// $Id$
+
+This is an experiment to create a faster&better ActiveRecord
+It will also replace creole from medick.
+


Property changes on: exp/ar5/README
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-15 08:06:49 UTC (rev 452)
+++ exp/ar5/ar5.php	2007-08-17 14:20:56 UTC (rev 453)
@@ -0,0 +1,47 @@
+<?php
+// $Id$
+
+include_once('ar5_base.php');
+include_once('ar5_sql.php');
+include_once('libs/active/support/Inflector.php');
+
+class ActiveRecord extends Object {
+
+  protected $__class_name;
+
+  protected $__table_name;
+
+  protected $__fields;
+
+  public function ActiveRecord(  ) {
+    $this->__class_name= $this->getClassName();
+    $this->__table_name= Inflector::tabelize( $this->__class_name );
+    $this->__fields    = ActiveRecord::connection()->getTableInfo( $this->__table_name )->getFields();
+  }
+
+
+  protected static $__table_info = null;
+
+  protected static $__connection = null;
+
+  public static function connection() {
+    if(self::$__connection===null) {
+      self::$__connection= new SQLiteConnection();
+      self::$__connection->connect();
+    }
+    return self::$__connection;
+  }
+
+}
+
+class User extends ActiveRecord { 
+
+}
+
+$u = new User();
+$u->firstname= 'aurelian';
+$u->insert();
+
+// $ar= ActiveRecord::connection()->execute('select * from users');
+
+?>


Property changes on: exp/ar5/ar5.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/ar5_base.php
===================================================================
--- exp/ar5/ar5_base.php	2007-08-15 08:06:49 UTC (rev 452)
+++ exp/ar5/ar5_base.php	2007-08-17 14:20:56 UTC (rev 453)
@@ -0,0 +1,49 @@
+<?php
+// $Id$
+
+error_reporting(E_ALL);
+
+class Object {
+  
+  public function __toString() {
+    return $this->toString();
+  }
+
+  public function toString() {
+    return $this->getClassName();
+  }
+
+  public function getClassName() {
+    return get_class($this);
+  }
+
+}
+
+class MedickException extends Exception { }
+
+class Error extends MedickException {
+
+  public function __construct($message, $code, $file, $line, $trace) {
+    parent::__construct($message);
+    $this->code  = $code;
+    $this->file  = $file;
+    $this->line  = $line;
+    $this->trace = $trace;
+  }
+}
+class ErrorHandler extends Object {
+  public function ErrorHandler() {  }
+  public function raise($errno, $errstr, $errfile, $errline) {
+    $errRep = error_reporting();
+    if( ($errno & $errRep) != $errno) {
+      return;
+    }
+    $trace = debug_backtrace();
+    array_shift($trace);
+    throw new Error( $errstr, $errno, $errfile, $errline, $trace );
+  }
+}
+set_error_handler( array(new ErrorHandler(), 'raise') );
+
+
+


Property changes on: exp/ar5/ar5_base.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/ar5_sql.php
===================================================================
--- exp/ar5/ar5_sql.php	2007-08-15 08:06:49 UTC (rev 452)
+++ exp/ar5/ar5_sql.php	2007-08-17 14:20:56 UTC (rev 453)
@@ -0,0 +1,146 @@
+<?php
+// $Id$
+
+class SQLException extends MedickException {  }
+
+class Field extends Object {
+
+  private $name, $value, $pk, $type;
+
+  public function Field($name, $pk=0, $type='int', $value=null) {
+    $this->name= $name;
+    $this->value=$value;
+    $this->pk= $pk;
+    $this->type=$type;
+  }
+
+  public function getName() { return $this->name; }
+  public function getValue() { return $this->value; }
+  public function isPk() { return (bool)$this->pk; }
+  public function getType() { return $this->type; }
+
+}
+
+abstract class SQLConnection extends Object {
+
+  protected $resource, $database, $lastQuery;
+
+  public function getDatabase() { return $this->database; }
+  public function setDatabase( $database ) { $this->database=$database;}
+  public function getResource() { return $this->resource; }
+  public function setResource( $resource ) { $this->resource= $resource; }
+  public function getLastQuery() { return $this->lastQuery; }
+
+  abstract public function connect();
+
+  abstract public function close(); 
+
+  abstract public function execute($sql);
+
+  abstract protected function getLastErrorMessage();
+
+  abstract public function getTableInfo($name);
+
+}
+
+abstract class SQLResultSet extends Object {
+
+  protected $result, $connection;
+  protected $row= array();
+
+  public function SQLResultSet($result, SQLConnection $connection) {
+    $this->result= $result;
+    $this->connection  = $connection;
+  }
+
+  public abstract function next();
+
+  public function getRow() { return $this->row; }
+
+  public function __get($name) {
+    if(isset($this->row[$name])) return $this->row[$name];
+    throw new SQLException('Cannot get the value of "' . $name . '" no such field!');
+  }
+
+}
+
+class SQLiteResultSet extends SQLResultSet {
+
+  public function next() {
+    $this->row= sqlite_fetch_array( $this->result );
+    return $this->row ? true : false;
+  }
+
+}
+
+abstract class SQLTableInfo extends Object {
+
+  protected $fields, $name, $connection;
+
+  public function SQLTableInfo($name, SQLConnection $connection) {
+    $this->name= $name;
+    $this->connection= $connection;
+    $this->fields= array();
+  }
+
+  public function getFields() { return $this->fields; }
+
+  abstract public function initFields( );
+
+}
+
+class SQLiteTableInfo extends SQLTableInfo {
+
+  public function initFields() {
+    $sql= 'PRAGMA table_info('.$this->name.')';
+    $rs= $this->connection->execute( $sql );
+    while( $rs->next() ) {
+      // xxx: type.
+      $f= new Field( $rs->name, $rs->pk, $rs->type );
+    }
+  }
+
+}
+
+class SQLiteConnection extends SQLConnection {
+
+  public function SQLiteConnection() {
+    $this->database= 'db/aymo.sqlite';
+  }
+
+  public function connect() {
+    try {
+      $this->resource= sqlite_open( $this->database );
+    } catch (Error $err) {
+      throw new SQLException( $err->getMessage() );
+    }
+  }
+
+  public function execute($sql) {
+    $this->lasQuery= $sql;
+    try {
+      $result= sqlite_query( $this->resource, $sql, SQLITE_ASSOC );
+    } catch (Error $err) {
+      throw new SQLException( $err->getMessage() );
+    }
+    return new SQLiteResultSet($result, $this);
+  }
+
+  public function close() {
+    sqlite_close( $this->resource );
+  }
+
+  public function getLastErrorMessage() {
+    return sqlite_error_string( sqlite_last_error($this->resource) );
+  }
+  
+  // xxx. cache.
+  public function getTableInfo( $name ) {
+    $table_info= new SQLiteTableInfo( $name, $this );
+    $table_info->initFields();
+  }
+
+}
+
+
+


Property changes on: exp/ar5/ar5_sql.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at mail.berlios.de  Mon Aug 20 15:19:02 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Mon, 20 Aug 2007 15:19:02 +0200
Subject: [Medick-svn] r454 - in exp/ar5: . db libs libs/active
	libs/active/record libs/active/record/drivers
	libs/active/record/drivers/abstract
	libs/active/record/drivers/sqlite libs/active/support
Message-ID: <200708201319.l7KDJ2gD011357@sheep.berlios.de>

Author: aurelian
Date: 2007-08-20 15:18:56 +0200 (Mon, 20 Aug 2007)
New Revision: 454

Added:
   exp/ar5/db/
   exp/ar5/db/sqlite.schema
   exp/ar5/libs/
   exp/ar5/libs/active/
   exp/ar5/libs/active/record/
   exp/ar5/libs/active/record/drivers/
   exp/ar5/libs/active/record/drivers/abstract/
   exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
   exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
   exp/ar5/libs/active/record/drivers/sqlite/
   exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
   exp/ar5/libs/active/support/
   exp/ar5/libs/active/support/Inflector.php
Modified:
   exp/ar5/ar5.php
   exp/ar5/ar5_base.php
   exp/ar5/ar5_sql.php
Log:
 -- added PreparedStatements

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/ar5.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -2,28 +2,105 @@
 // $Id$
 
 include_once('ar5_base.php');
+include_once('libs/active/record/drivers/abstract/SQLConnection.php');
+include_once('libs/active/record/drivers/abstract/SQLPreparedStatement.php');
+
 include_once('ar5_sql.php');
+
+include_once('libs/active/record/drivers/sqlite/sqlite.php');
+
 include_once('libs/active/support/Inflector.php');
 
+class ActiveRecordException extends MedickException { }
+
 class ActiveRecord extends Object {
 
   protected $__class_name;
-
   protected $__table_name;
-
   protected $__fields;
+  protected $__primary_key;
 
-  public function ActiveRecord(  ) {
-    $this->__class_name= $this->getClassName();
-    $this->__table_name= Inflector::tabelize( $this->__class_name );
-    $this->__fields    = ActiveRecord::connection()->getTableInfo( $this->__table_name )->getFields();
+  public function ActiveRecord( $params=array() ) {
+    $this->__class_name  = $this->getClassName();
+    $this->__table_name  = Inflector::tabelize( $this->__class_name );
+    $this->__fields      = ActiveRecord::connection()->getTableInfo( $this->__table_name )->getFields();
+    $this->__primary_key = current( array_filter( $this->__fields, array($this,'__pk') ));
+    foreach($params as $key=>$value) {
+      $this->$key= $value;
+    }
   }
 
+  public function __set($name, $value) {
+    if(isset($this->__fields[$name])) return $this->__fields[$name]->alter( $value );
+    throw new ActiveRecordException('No such field "' . $name . '"');
+  }
 
+  public function save() {
+    if($this->__primary_key->isAffected()) return $this->update();
+    else $this->insert();
+  }
+
+  public function insert() {
+    $fields= $this->getAffectedFields();
+    $sql= 'insert into ' . $this->__table_name
+          . ' (' . implode(',', array_keys($fields)) . ')'
+          . ' values (' . substr(str_repeat('?,', count($fields)), 0, -1) . ')';
+    $this->performQuery($sql, $fields);
+    $this->__primary_key->alter( self::connection()->nextId() );
+  }
+
+  public function update() {
+    $fields= $this->getAffectedFields();
+    if(sizeof($fields)<1) return 0;
+    $sql= 'update ' . $this->__table_name . ' set ';
+    $sql .= implode('=?, ', array_keys($fields)) . '=? ';
+    $sql .= 'where ' . $this->__primary_key->getName() . '=' . $this->__primary_key->getValue();
+    $this->performQuery($sql, $fields);
+  }
+
+  private function performQuery( $sql, $fields ) {
+    $stmt= self::connection()->prepare( $sql );
+    $stmt->populateValues( $fields );
+    $r= $stmt->executeUpdate();
+    $stmt->close();
+    $this->reset();
+    return $r;
+  }
+
+ 
+  public function getPrimaryKey() {
+    return $this->__primary_key;
+  }
+
+  protected function getAffectedFields() {
+    return array_filter( $this->__fields, array($this, '__affectedField') );
+  }
+
+  protected function reset() {
+    return array_walk( $this->__fields, array($this,'__notAffected'));
+  }
+
+  // callback for array_filter
+  private function __affectedField( Field $field ) {
+    return $field->isAffected();
+  }
+  // callback for array_filter
+  private function __pk( Field $field ) {
+    return $field->isPk();
+  }
+
+  // callback for array_walk
+  private function __notAffected( Field $field ) {
+    if( $field->isAffected() && !$field->isPk() ) $field->setAffected(false);
+  }
+
   protected static $__table_info = null;
-
   protected static $__connection = null;
 
+  public static function find() {
+    throw new MedickException('ActiveRecord::find() must be implemented in child class.');
+  }
+
   public static function connection() {
     if(self::$__connection===null) {
       self::$__connection= new SQLiteConnection();
@@ -36,12 +113,27 @@
 
 class User extends ActiveRecord { 
 
+  public static function find() {
+    $args= func_get_args();
+    return self::build(new QueryBuilder(__CLASS__, $args));
+  }
+
 }
 
 $u = new User();
 $u->firstname= 'aurelian';
-$u->insert();
+$u->lastname = 'oancea';
+$u->email= 'oancea at gmail.com';
+$u->password=md5('foo');
+$u->save();
 
-// $ar= ActiveRecord::connection()->execute('select * from users');
+$u->password=md5('bar');
+$u->save();
+$u->save();
 
+$user = new User(array('firstname'=>'oancea', 'lastname'=>'mandinga'));
+$user->email= 'oancea at yahoo.com';
+$user->password= md5('bau-bau');
+$user->save();
+
 ?>

Modified: exp/ar5/ar5_base.php
===================================================================
--- exp/ar5/ar5_base.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/ar5_base.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -43,7 +43,6 @@
     throw new Error( $errstr, $errno, $errfile, $errline, $trace );
   }
 }
+
 set_error_handler( array(new ErrorHandler(), 'raise') );
 
-
-

Modified: exp/ar5/ar5_sql.php
===================================================================
--- exp/ar5/ar5_sql.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/ar5_sql.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -3,44 +3,50 @@
 
 class SQLException extends MedickException {  }
 
-class Field extends Object {
+// xxx.
+class SQLType extends Object {
 
-  private $name, $value, $pk, $type;
-
-  public function Field($name, $pk=0, $type='int', $value=null) {
-    $this->name= $name;
-    $this->value=$value;
-    $this->pk= $pk;
-    $this->type=$type;
+  // sql type to php type
+  public static function getPhpType( $type ) {
+    if( $type == 'integer' || $type == 'int') return 'Integer';
+    else return 'String';
+    // elseif( $type == 'varchar' || $type == 'string' || $type == 'text') return 'String';
+    // elseif( $type == 'timestamp' || $type == 'time' || $type == 'date') return 'Time';
+    // else throw new SQLException('Unknow type: "' . $type . '"');
   }
 
-  public function getName() { return $this->name; }
-  public function getValue() { return $this->value; }
-  public function isPk() { return (bool)$this->pk; }
-  public function getType() { return $this->type; }
-
 }
 
-abstract class SQLConnection extends Object {
+class Field extends Object {
 
-  protected $resource, $database, $lastQuery;
+  private $name, $value, $pk, $type, $size, $affected;
 
-  public function getDatabase() { return $this->database; }
-  public function setDatabase( $database ) { $this->database=$database;}
-  public function getResource() { return $this->resource; }
-  public function setResource( $resource ) { $this->resource= $resource; }
-  public function getLastQuery() { return $this->lastQuery; }
+  public function Field($name, $pk=false, $type='int', $size=0, $value= null, $affected=false) {
+    $this->name=  $name;
+    $this->value= $value;
+    $this->pk= (bool)$pk;
+    $this->size= (int)$size;
+    $this->type= SQLType::getPhpType( strtolower($type) );
+    $this->affected= (bool)$affected;
+  }
 
-  abstract public function connect();
+  public function getName() { return $this->name; }
 
-  abstract public function close(); 
+  public function getValue() { return $this->value; }
+  public function setValue($value) { $this->value= $value;}
 
-  abstract public function execute($sql);
+  public function setAffected($val) { $this->affected= (bool)$val; }
+  public function isAffected() { return (bool)$this->affected; }
 
-  abstract protected function getLastErrorMessage();
+  public function isPk() { return (bool)$this->pk; }
 
-  abstract public function getTableInfo($name);
+  public function getType() { return $this->type; }
 
+  public function alter( $value ) {
+    $this->value    = $value;
+    $this->affected = true;
+  }
+
 }
 
 abstract class SQLResultSet extends Object {
@@ -64,18 +70,10 @@
 
 }
 
-class SQLiteResultSet extends SQLResultSet {
-
-  public function next() {
-    $this->row= sqlite_fetch_array( $this->result );
-    return $this->row ? true : false;
-  }
-
-}
-
 abstract class SQLTableInfo extends Object {
 
-  protected $fields, $name, $connection;
+  protected $name, $connection;
+  private $fields;
 
   public function SQLTableInfo($name, SQLConnection $connection) {
     $this->name= $name;
@@ -83,64 +81,13 @@
     $this->fields= array();
   }
 
+  public function add(Field $field) {
+    $this->fields[$field->getName()]= $field;
+  }
+
   public function getFields() { return $this->fields; }
 
   abstract public function initFields( );
 
 }
 
-class SQLiteTableInfo extends SQLTableInfo {
-
-  public function initFields() {
-    $sql= 'PRAGMA table_info('.$this->name.')';
-    $rs= $this->connection->execute( $sql );
-    while( $rs->next() ) {
-      // xxx: type.
-      $f= new Field( $rs->name, $rs->pk, $rs->type );
-    }
-  }
-
-}
-
-class SQLiteConnection extends SQLConnection {
-
-  public function SQLiteConnection() {
-    $this->database= 'db/aymo.sqlite';
-  }
-
-  public function connect() {
-    try {
-      $this->resource= sqlite_open( $this->database );
-    } catch (Error $err) {
-      throw new SQLException( $err->getMessage() );
-    }
-  }
-
-  public function execute($sql) {
-    $this->lasQuery= $sql;
-    try {
-      $result= sqlite_query( $this->resource, $sql, SQLITE_ASSOC );
-    } catch (Error $err) {
-      throw new SQLException( $err->getMessage() );
-    }
-    return new SQLiteResultSet($result, $this);
-  }
-
-  public function close() {
-    sqlite_close( $this->resource );
-  }
-
-  public function getLastErrorMessage() {
-    return sqlite_error_string( sqlite_last_error($this->resource) );
-  }
-  
-  // xxx. cache.
-  public function getTableInfo( $name ) {
-    $table_info= new SQLiteTableInfo( $name, $this );
-    $table_info->initFields();
-  }
-
-}
-
-
-

Added: exp/ar5/db/sqlite.schema
===================================================================
--- exp/ar5/db/sqlite.schema	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/db/sqlite.schema	2007-08-20 13:18:56 UTC (rev 454)
@@ -0,0 +1,39 @@
+--
+-- $Id$
+--
+-- SQLite3 Database schema for aymo
+-- 
+
+create table users (
+  id         INTEGER PRIMARY KEY,
+  firstname  varchar(255) not null,
+  lastname   varchar(255) not null,
+  email      varchar(255) not null,
+  password   varchar(255) not null,
+  role       int(11) not null default 2048,
+  state      int(11) not null default 0,
+  created_at timestamp default CURRENT_TIMESTAMP
+);
+
+CREATE TRIGGER insert_users_created_at AFTER INSERT ON users
+BEGIN
+  UPDATE users SET created_at = strftime('%s','now')  WHERE rowid = new.rowid;
+END;
+
+create table agents (
+  id INTEGER PRIMARY KEY,
+  user_id int(11) not null
+);
+
+create table estates (
+  id INTEGER PRIMARY KEY,
+  name varchar(255) not null,
+  description text not null
+);
+
+create table agents_estates (
+  id        INTEGER PRIMARY KEY,
+  estate_id int(11) not null,
+  agent_id  int(11) not null
+);
+


Property changes on: exp/ar5/db/sqlite.schema
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -0,0 +1,47 @@
+<?php
+// $Id$
+
+abstract class SQLConnection extends Object {
+
+  protected $resource, $database, $lastQuery;
+
+  public function getDatabase() { return $this->database; }
+  public function setDatabase( $database ) { $this->database=$database;}
+  public function getResource() { return $this->resource; }
+  public function setResource( $resource ) { $this->resource= $resource; }
+  public function getLastQuery() { return $this->lastQuery; }
+
+  abstract public function connect();
+
+  abstract public function close(); 
+
+  // return int
+  abstract public function nextId();
+
+  // return string
+  abstract protected function getLastErrorMessage();
+
+  // return TableInfo
+  abstract public function getTableInfo($name);
+  
+  // return PreparedStatement
+  abstract public function prepare( $sql );
+  
+  // return ResultSet
+  abstract public function execute( $sql );
+
+  // return Resource
+  abstract public function exec( $sql );
+  
+  // return int
+  abstract public function getUpdateCount( $rs=null );
+  
+  // return int
+  public function executeUpdate( $sql ) {
+    return $this->getUpdateCount( $this->exec($sql) );
+  }
+
+}
+
+
+


Property changes on: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -0,0 +1,130 @@
+<?php
+// $Id$
+
+abstract class SQLPreparedStatement extends Object {
+
+  protected $conn, $sql;
+
+  protected $positions=0;
+  protected $positionsCount=0;
+  protected $sql_cache='';
+  protected $sql_cache_valid= false;
+  protected $boundInVars= array();
+
+  public function SQLPreparedStatement(SQLConnection $conn, $sql) {
+    $this->conn= $conn;
+    $this->sql= $sql;
+    $this->positions = $this->parseQuery ( $sql );
+    // save processing later in cases where we may repeatedly exec statement
+    $this->positionsCount = count ( $this->positions );
+  }
+
+  /**
+   * Parse the SQL query for ? positions
+   *
+   * @param string $sql The query to process
+   * @return array Positions from the start of the string that ?'s appear at
+   */
+  protected function parseQuery ( $sql ) {
+    $positions = array();
+    // match anything ? ' " or \ in $sql with an early out if we find nothing
+    if ( preg_match_all ( '([\?]|[\']|[\"]|[\\\])', $sql, $matches, PREG_OFFSET_CAPTURE ) !== 0 ) {
+      $matches = $matches['0'];
+      $open = NULL;
+      // go thru all our matches and see what we can find
+      for ( $i = 0, $j = count ( $matches ); $i < $j; $i++ ) {
+        switch ( $matches[$i]['0'] ) {
+          // if we already have an open " or ' then check if this is the end to close it or not
+          case $open:
+            $open = NULL;
+            break;
+          // we have a quote, set ourselves open
+          case '"':
+          case "'":
+            $open = $matches[$i]['0'];
+            break;
+          // check if it is an escaped quote and skip if it is
+          case '\\':
+            $next_match = $matches[$i+1]['0'];
+            if ( $next_match === '"' || $next_match === "'" ) {
+              $i++;
+            }
+            unset ( $next_match );
+            break;
+				  // we found a ?, check we arent in an open "/' first and
+				  // add it to the position list if we arent
+          default:
+            if ( $open === NULL ) {
+              $positions[] = $matches[$i]['1'];
+            }
+        } // switch
+        unset ( $matches[$i] );
+      } // for
+      unset ( $open, $matches, $i, $j );
+    } // if
+	  return $positions;
+  }
+
+  /**
+   * Replaces placeholders with the specified parameter values in the SQL.
+   * 
+   * This is for emulated prepared statements.
+   * 
+   * @return string New SQL statement with parameters replaced.
+   * @throws SQLException - if param not bound.
+   */
+  protected function replaceParams() {
+    // early out if we still have the same query ready
+    if ( $this->sql_cache_valid === true ) return $this->sql_cache;
+    // Default behavior for this function is to behave in 'emulated' mode.    
+    $sql = '';    
+    $last_position = 0;
+
+    for ($position = 0; $position < $this->positionsCount; $position++) {
+      if (!isset($this->boundInVars[$position + 1])) {
+        throw new SQLException('Replace params: undefined query param: ' . ($position + 1));
+      }
+      $current_position = $this->positions[$position];            
+      $sql .= substr($this->sql, $last_position, $current_position - $last_position);
+      $sql .= $this->boundInVars[$position + 1];                    
+      $last_position = $current_position + 1;            
+    }
+    // append the rest of the query
+    $sql .= substr($this->sql, $last_position);
+    // just so we dont touch anything with a blob/clob
+    if ( strlen ( $sql ) > 2048 ) { 
+		  $this->sql_cache = $sql;
+      $this->sql_cache_valid = true;
+		  return $this->sql_cache;
+	  } else {
+		  return $sql;
+	  }
+  }
+
+  public function setString($idx, $value) {
+    $this->boundInVars[$idx] = "'" . $this->escape((string)$value) . "'";
+  }
+
+  public function setInteger($idx, $value) {
+    $this->boundInVars[$idx]= (int)$value;
+  }
+
+  public function populateValues(Array $fields) {
+    $i=1; foreach($fields as $field) {
+      if(!$field instanceof Field) throw new SQLException('Wrong argument Type, it should be an instance of "Field"');
+      call_user_func( array($this, 'set'.ucfirst($field->getType())), $i++, $field->getValue() );
+    }
+  }
+
+  public function executeUpdate() {
+    $sql= $this->replaceParams();
+    return $this->conn->executeUpdate( $sql );
+  }
+
+  public function close() {
+  }
+
+  abstract protected function escape($value);
+
+}
+


Property changes on: exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
===================================================================
--- exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -0,0 +1,103 @@
+<?php
+// $Id$
+
+class SQLiteResultSet extends SQLResultSet {
+
+  public function next() {
+    $this->row= sqlite_fetch_array( $this->result );
+    return (bool)$this->row;
+    // return $this->row ? true : false;
+  }
+
+}
+
+class SQLiteTableInfo extends SQLTableInfo {
+
+  public function initFields() {
+    $sql= 'PRAGMA table_info('.$this->name.')';
+    $rs= $this->connection->execute( $sql );
+    while( $rs->next() ) {
+      // xxx: type.
+      $fulltype= $rs->type; // varchar(255);
+      $size=0;
+      if (preg_match('/^([^\(]+)\(\s*(\d+)\s*,\s*(\d+)\s*\)$/', $fulltype, $matches)) {
+        $type = $matches[1];
+        $size = $matches[2];
+        // $scale = $matches[3]; // aka precision    
+      } elseif (preg_match('/^([^\(]+)\(\s*(\d+)\s*\)$/', $fulltype, $matches)) {
+        $type = $matches[1];
+        $size = $matches[2];
+      } else {
+        $type = $fulltype;
+      }
+      // add field
+      $this->add( new Field( $rs->name, $rs->pk, $type, $size ) );
+    }
+  }
+
+}
+
+class SQLitePreparedStatement extends SQLPreparedStatement {
+
+  protected function escape( $value ) {
+    return sqlite_escape_string( $value );
+  }
+
+}
+
+class SQLiteConnection extends SQLConnection {
+
+  public function SQLiteConnection() {
+    $this->database= 'db/aymo.sqlite';
+  }
+
+  public function connect() {
+    try {
+      $this->resource= sqlite_open( $this->database );
+    } catch (Error $err) {
+      throw new SQLException( $err->getMessage() );
+    }
+  }
+
+  public function exec( $sql ) {
+   $this->lastQuery= $sql;
+    try {
+      return sqlite_query( $this->resource, $sql, SQLITE_ASSOC );
+    } catch (Error $err) {
+      throw new SQLException( $err->getMessage() );
+    }
+  }
+
+  public function execute( $sql ) {
+    return new SQLiteResultSet( $this->exec( $sql ), $this );
+  }
+
+  public function getUpdateCount( $rs=null ) {
+    return sqlite_changes( $this->resource );
+  }
+
+  public function nextId() {
+    return sqlite_last_insert_rowid( $this->resource );
+  }
+
+  public function close() {
+    sqlite_close( $this->resource );
+  }
+
+  public function getLastErrorMessage() {
+    return sqlite_error_string( sqlite_last_error($this->resource) );
+  }
+  
+  // xxx. cache.
+  public function getTableInfo( $name ) {
+    $table_info= new SQLiteTableInfo( $name, $this );
+    $table_info->initFields();
+    return $table_info;
+  }
+
+  public function prepare( $sql ) {
+    return new SQLitePreparedStatement($this, $sql);
+  }
+
+}
+


Property changes on: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/support/Inflector.php
===================================================================
--- exp/ar5/libs/active/support/Inflector.php	2007-08-17 14:20:56 UTC (rev 453)
+++ exp/ar5/libs/active/support/Inflector.php	2007-08-20 13:18:56 UTC (rev 454)
@@ -0,0 +1,160 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: Inflector.php 431 2007-06-12 14:37:19Z aurelian $
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * Convenient methods to work on english words 
+ * Based on: http://dev.rubyonrails.com/file/trunk/activesupport/lib/active_support/inflections.rb
+ * @package medick.active.support
+ * @author Aurelian Oancea
+ */
+
+class Inflector extends Object {
+
+    /**
+     * Transform word from singular to plural
+     * 
+     * @param string word, the word we want to pluralize
+     */
+    public static function pluralize($word) {
+        $rules = array(
+            '/(quiz)$/i'               => '\1zes',
+            '/^(ox)$/i'                => '\1en',
+            '/([m|l])ouse$/i'          => '\1ice',
+            '/(matr|vert|ind)ix|ex$/i' => '\1ices',
+            '/(x|ch|ss|sh)$/i'         => '\1es',
+            '/([^aeiouy]|qu)ies$/i'    => '\1y',
+            '/([^aeiouy]|qu)y$/i'      => '\1ies',
+            '/(hive)$/i'               => '\1s',
+            '/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',
+            '/sis$/i'                  => 'ses',
+            '/([ti])um$/i'             => '\1a',
+            '/(buffal|tomat)o$/i'      => '\1oes',
+            '/(bu)s$/i'                => '\1ses',
+            '/(alias|status)/i'        => '\1es',
+            '/(octop|vir)us$/i'        => '\1i',
+            '/(ax|test)is$/i'          => '\1es',
+            '/s$/i'                    => 's',
+            '/$/'                      => 's'
+        );
+
+        foreach ($rules AS $rule => $replacement) {
+            if (preg_match($rule, $word)) {
+                return preg_replace($rule, $replacement, $word);
+            }
+        }
+        return $word;
+    }
+
+    /**
+     * Transform word from plural to singular
+     * 
+     * @param string word, the word we want to singularize
+     */
+    public static function singularize($word) {
+        $rules = array(
+            '/s$/i'                 => '',
+            '/(n)ews$/i'            => '\1ews',
+            '/([ti])a$/i'           => '\1um',
+            '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' => '\1\2sis',
+            '/(^analy)ses$/i'       => '\1sis',
+            '/([^f])ves$/i'         => '\1fe',
+            '/(hive)s$/i'           => '\1',
+            '/(tive)s$/i'           => '\1',
+            '/([lr])ves$/i'         => '\1f',
+            '/([^aeiouy]|qu)ies$/i' => '\1y',
+            '/(s)eries$/i'          => '\1eries',
+            '/(m)ovies$/i'          => '\1ovie',
+            '/(x|ch|ss|sh)es$/i'    => '\1',
+            '/([m|l])ice$/i'        => '\1ouse',
+            '/(bus)es$/i'           => '\1',
+            '/(o)es$/i'             => '\1',
+            '/(shoe)s$/i'           => '\1',
+            '/(cris|ax|test)es$/i'  => '\1is',
+            '/([octop|vir])i$/i'    => '\1us',
+            '/(alias|status)es$/i'  => '\1',
+            '/^(ox)en/i'            => '\1',
+            '/(vert|ind)ices$/i'    => '\1ex',
+            '/(matr)ices$/i'        => '\1ix',
+            '/(quiz)zes$/i'         => '\1'
+        );
+
+        foreach (array_reverse($rules) as $rule => $replacement) {
+            if (preg_match($rule, $word)) {
+                return preg_replace($rule, $replacement, $word);
+            }
+        }
+        return $word;
+    }
+
+    public static function tabelize($class) {
+        $s= strtolower(Inflector::pluralize($class));
+        return $s;
+    }
+    
+    // {{{ based on cake.
+    public static function camelize($word) {
+        return str_replace(" ", "", ucwords(str_replace("_", " ", $word)));
+    }
+
+    public static function underscore($word) {
+        $word = preg_replace('/([A-Z]+)([A-Z])/','\1_\2', $word);
+        return strtolower(preg_replace('/([a-z])([A-Z])/','\1_\2', $word));
+    }
+
+    public static function humanize($lower_case_and_underscored_word) {
+        return ucwords(str_replace("_"," ",$lower_case_and_underscored_word));
+    }
+
+    // }}}
+
+    public static function sanitize($word) {
+        $word = strip_tags($word);
+        $word = htmlentities( $word, ENT_NOQUOTES );
+        // Keep only one char in emtities!
+        $word = preg_replace( '/&(.).+?;/', '$1', $word );
+        // Remove non acceptable chars
+        $word = preg_replace( '/[^A-Za-z0-9]+/', '_', $word );
+        $word = preg_replace( '/^_+/', '', $word );
+        $word = preg_replace( '/_+$/', '', $word );
+        // Uppercase the first character of each word in a string
+        $word = strtolower( $word );
+        preg_match( '/^(.*?)(_[0-9]+)?$/', $word, $matches );
+        $base = substr( $matches[1], 0, 40 );
+        $word = $base;
+        if( isset( $matches[2] ) ) {
+            $word = $base . $matches[2];
+        }
+        return $word;
+    }
+}



From aurelian at mail.berlios.de  Mon Aug 20 16:29:20 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Mon, 20 Aug 2007 16:29:20 +0200
Subject: [Medick-svn] r455 - in exp/ar5: . libs libs/context
	libs/context/configurator
Message-ID: <200708201429.l7KETK9Q021038@sheep.berlios.de>

Author: aurelian
Date: 2007-08-20 16:29:17 +0200 (Mon, 20 Aug 2007)
New Revision: 455

Added:
   exp/ar5/libs/context/
   exp/ar5/libs/context/ContextManager.php
   exp/ar5/libs/context/configurator/
   exp/ar5/libs/context/configurator/IConfigurator.php
   exp/ar5/libs/context/configurator/INIConfigurator.php
   exp/ar5/libs/context/configurator/LoggerConfigurator.php
   exp/ar5/libs/context/configurator/XMLConfigurator.php
Modified:
   exp/ar5/ar5.php
Log:
 -- imported context

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/ar5.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -1,15 +1,20 @@
 <?php
 // $Id$
 
+set_include_path('libs');
+
 include_once('ar5_base.php');
-include_once('libs/active/record/drivers/abstract/SQLConnection.php');
-include_once('libs/active/record/drivers/abstract/SQLPreparedStatement.php');
 
+include_once('context/configurator/XMLConfigurator.php');
+
+include_once('active/record/drivers/abstract/SQLConnection.php');
+include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
+
 include_once('ar5_sql.php');
 
-include_once('libs/active/record/drivers/sqlite/sqlite.php');
+include_once('active/record/drivers/sqlite/sqlite.php');
 
-include_once('libs/active/support/Inflector.php');
+include_once('active/support/Inflector.php');
 
 class ActiveRecordException extends MedickException { }
 
@@ -67,7 +72,6 @@
     return $r;
   }
 
- 
   public function getPrimaryKey() {
     return $this->__primary_key;
   }

Added: exp/ar5/libs/context/ContextManager.php
===================================================================
--- exp/ar5/libs/context/ContextManager.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/libs/context/ContextManager.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -0,0 +1,73 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: ContextManager.php 448 2007-07-23 17:53:06Z aurelian $
+//
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('context/configurator/XMLConfigurator.php');
+
+/**
+ * 
+ * @package medick.context
+ * @author Aurelian Oancea
+ */
+class ContextManager extends Object {
+
+    static protected $instance= NULL;
+
+    static public function load($stream, $environment) {
+        if (ContextManager::$instance === NULL) {
+            ContextManager::$instance= new ContextManager($stream, $environment);
+        }
+        return ContextManager::$instance;
+    }
+
+    private function ContextManager($stream, $environment) {
+        $this->configurator= new XMLConfigurator($stream, $environment);
+    }
+
+    public function getConfigurator() {
+        return $this->configurator;
+    }
+    
+    public function getWebContext() {
+        
+    }
+    
+    public function getApplicationContext() {
+        
+    }
+    
+    public function getDatabaseContext() {
+        
+    }
+    
+}

Added: exp/ar5/libs/context/configurator/IConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/IConfigurator.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/libs/context/configurator/IConfigurator.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -0,0 +1,74 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: IConfigurator.php 449 2007-07-23 17:56:27Z aurelian $
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * Configurator Interface is the central point for providing 
+ * configurations for a medick applications
+ *
+ * While the application is running, the configurations options are read-only,
+ * but one might provide methods for writing or changing values.
+ *
+ * A configuration is resolved using the application name. 
+ * Usually, the place for keeping configuration file is under conf/application_name.(xml|ini)
+ *
+ * The olny implementation that it's working right now is XMLConfigurator.
+ * Also, a plain php code configurator is used for testing the Logger.
+ *
+ * From medick 0.2, the options will be splitted based on context, and we will
+ * provide web specific configuration section as well as logger and database contextes.
+ * 
+ * From medick 0.3.0 this class and the old configuration methods will be removed
+ * 
+ * @package medick.configurator
+ * @see XMLConfigurator
+ * @see LoggerConfigurator
+ * @author Aurelian Oancea
+ */
+interface IConfigurator {
+
+    /**
+     * It gets the logger outputters.
+     *
+     * @return array
+     */
+    function getLoggerOutputters();
+
+    /**
+     * It gets the logger formatter
+     *
+     * @return string, Logger formatter name eg. FooFormatter.
+     */
+    function getLoggerFormatter();
+
+}

Added: exp/ar5/libs/context/configurator/INIConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/INIConfigurator.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/libs/context/configurator/INIConfigurator.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -0,0 +1,81 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: INIConfigurator.php 449 2007-07-23 17:56:27Z aurelian $
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('configurator/IConfigurator.php');
+
+/**
+ * INI file-based Configurator.
+ * 
+ * @deprecated this class is deprecated, use medick.configurator.XMLConfigurator
+ * @package medick.configurator
+ * @author Aurelian Oancea
+ */
+class INIConfigurator extends Object implements IConfigurator {
+
+    private $handler;
+    
+    public function INIConfigurator($file) {
+      $this->handler= parse_ini_file($file, TRUE);
+    }
+
+    public function getLoggerOutputters() {
+        $ret= array();
+        $ret[0]=$this->handler['logger.file.outputter'];
+        $ret[0]['name'] = 'file';
+        $ret[1]=$this->handler['logger.mail.outputter'];
+        $ret[1]['name']= 'mail';
+        $ret[2]=$this->handler['logger.stdout.outputter'];
+        $ret[2]['name']= 'stdout';
+        $ao = new ArrayObject($ret);
+        return $ao->getIterator();
+    }
+
+    public function getLoggerFormatter() {
+        return ucfirst($this->handler['logger']['formatter']) . 'Formatter';
+    }
+
+    public function getProperty($name) {
+        if (isset($this->handler['properties'][$name])) {
+            return $this->handler['properties'][$name];
+        } else {
+            throw new Exception('Property: ' . $name . ' not found!');
+        }
+    }
+
+    public function getDatabaseDsn($id = FALSE) {
+        if (!$id) $id= $this->handler['database']['default'];
+        return $this->handler['database.' . $id];
+    }
+
+}

Added: exp/ar5/libs/context/configurator/LoggerConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/LoggerConfigurator.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/libs/context/configurator/LoggerConfigurator.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -0,0 +1,57 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: LoggerConfigurator.php 452 2007-08-15 08:06:49Z aurelian $
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('context/configurator/IConfigurator.php');
+
+/**
+ * A plain Application Configurator
+ * 
+ * @package medick.configurator
+ * @author Aurelian Oancea
+ */ 
+class LoggerConfigurator extends Object implements IConfigurator {
+    /** @see medick.configurator.IConfigurator::getLoggerOutputters() */
+    public function getLoggerOutputters() {
+        return array(array('name' => 'stdout','level' => '0'));
+    }
+    /** @see medick.configurator.IConfigurator::getLoggerFormatter */
+    public function getLoggerFormatter() {
+        return 'SimpleFormatter';
+    }
+    /** @see medick.configurator.IConfigurator::getProperty(string name) */
+    public function getProperty($name) {     }
+    /** @see medick.configurator.IConfigurator::getDatabaseDsn(bool id) */
+    public function getDatabaseDsn($id = FALSE) {  }
+    
+}

Added: exp/ar5/libs/context/configurator/XMLConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/XMLConfigurator.php	2007-08-20 13:18:56 UTC (rev 454)
+++ exp/ar5/libs/context/configurator/XMLConfigurator.php	2007-08-20 14:29:17 UTC (rev 455)
@@ -0,0 +1,233 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id: XMLConfigurator.php 449 2007-07-23 17:56:27Z aurelian $
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('context/configurator/IConfigurator.php');
+
+/**
+ * XML file-based Configurator
+ * 
+ * @package medick.configurator
+ * @author Aurelian Oancea
+ */
+
+class XMLConfigurator extends Object implements IConfigurator {
+
+    /** @var SimpleXML */
+    protected $sxe;
+    
+    /** @var string
+        application name */
+    protected $application_name;
+    
+    /** @var string
+        configuration file */
+    protected $config_file;
+    
+    /** @var string
+        environment */
+    protected $environment;
+    
+    /**
+     * Constructor
+     * 
+     * @param string/file xml
+     * @throws ConfiguratorException
+     */
+    public function XMLConfigurator($stream, $env) {
+        $xmlelement= simplexml_load_file($stream);
+        foreach($xmlelement->environment as $e) {
+            if ($e['name']==$env) {
+                $this->sxe= $e;
+                break;
+            }
+        }
+        if ($this->sxe === NULL) {
+            throw new ConfiguratorException('Cannot find environment: ' . $env . ' in ' . $stream);
+        }
+        $this->application_name= $xmlelement['name'];
+        $this->config_file = $stream;
+        $this->environment = $env;
+    }
+
+    public function getEnvName() {
+        return trim((string)$this->environment);
+    }
+    
+    public function getApplicationName() {
+        return trim((string)$this->application_name);
+    }
+    
+    public function getApplicationPath() {
+        return trim((string)$this->sxe->properties->path);
+    }
+    
+    public function getWebContext() {
+        return $this->sxe->web;
+    }
+    
+    public function getConfigFile() {
+        return $this->config_file;
+    }
+    
+    /**
+     * Configuration Example:
+     * <code>
+     *   <database default="foo">
+     *     <dsn id="one"
+     *          phptype  = "mysql"
+     *          hostspec = "localhost"
+     *          database = "baz"
+     *          username = "root"
+     *          password = "zzz" />
+     *     <dsn id = "foo"
+     *          phptype  = "pgsql"
+     *          hostspec = "192.18.1.1"
+     *          database ="test"
+     *          username ="antonescu"
+     *          password ="x-creeme" />
+     *   </database>
+     * </code>
+     * @see IConfigurator::getDatabaseDsn()
+     */
+    public function getDatabaseDsn($id = FALSE) {
+        if (!$id) $id = $this->sxe->database['default'];
+        foreach( $this->sxe->database->dsn as  $dsn ) {
+            if( trim($dsn['id']) == trim($id) ){
+                return array (
+                        'phptype'  => (string)trim($dsn['phptype']),
+                        'hostspec' => (string)trim($dsn['hostspec']),
+                        'username' => (string)trim($dsn['username']),
+                        'password' => (string)trim($dsn['password']),
+                        'database' => (string)trim($dsn['database'])
+                );
+            }
+        }
+        throw new ConfiguratorException('Database Id ' . $id . ' not found!');
+    }    
+    
+    /**
+     * Configuration example:
+     * <code>
+     *   <logger>
+     *     <outputters>
+     *       <outputter name="file" level="0">
+     *         <property name="path" value="/wwwroot/whereto.log" />
+     *       </outputter>
+     *       <outputter name="stdout" level="0" />
+     *       <outputter name="mail" level="3">
+     *         <property name="subject" value="[Uh-Ah]Fatality on my server!" />
+     *         <property name="address" value="user at example.com" />
+     *       </outputter>
+     *     </outputters>
+     *   </logger>
+     * </code>
+     * @see IConfigurator::getLoggerOutputters()
+     * @return array
+     */
+    public function getLoggerOutputters() {
+        $i=0; $ret= array();
+        if (is_null($this->sxe->logger->outputters)) return $ret;
+        foreach ($this->sxe->logger->outputters->outputter as $outputter) {
+            $ret[$i]['name']    = (string)trim($outputter['name']);
+            $ret[$i]['level']   = (string)trim($outputter['level']);
+            foreach ($outputter->property as $property) {
+                $ret[$i]['properties'][(string)trim($property['name'])]= (string)trim($property['value']);
+            }
+            $i++;
+        }
+        return $ret;
+
+    }
+
+    /** @see IConfigurator::getLoggerFormatter() */
+    public function getLoggerFormatter() {
+        return ucfirst((string)trim($this->sxe->logger->formatter) . 'Formatter');
+    }
+
+    /**
+     * Dinamically sets a proprety on runtime.
+     *
+     * Assuming that we have
+     * <code>
+     *   <property name="application_path" value="/wwwroot/htdocs/locknet7/app" />
+     * </code>  
+     * To change the value of application_path property:
+     * <code>
+     *   $config->setProperty('application_path', 'C:\\Fast\\www\\medick\\app');
+     * </code>
+     *
+     * @param string, name, the name of the property.
+     * @param string, value, the value of the property.
+     * @throws ConfiguratorException if the property that we want to set don't exists in the xml file/string
+     */
+    public function setProperty($name, $value) {
+        $xp = new domxpath($dom = $this->toDom());
+        $property = $xp->query("//application/property[@name=\"" . $name . "\"]");
+        if ($property->length != 1) {
+            throw new ConfiguratorException('Cannot set the property name: ' . $name .
+                'Property don\'t exist or there are two propreties with the same name');
+        }
+        $property->item(0)->setAttribute('value', $value);
+        // save the new xml tree
+        $this->sxe = simplexml_import_dom($dom, 'SimpleXMLIterator');
+    }
+
+    /**
+     * Dinamically sets the logger formatter
+     *
+     * Note: this method is used only in unittests.
+     * @param string, formatter, the formatter to use for logger
+     */
+    public function setLoggerFormatter($formatter) {
+        $this->sxe->logger->formatter = $formatter;
+    }
+
+    /**
+     * Convert this document from SXE to DOM
+     * 
+     * @return DomDocument
+     */
+    public function toDom() {
+        $dom_sxe = dom_import_simplexml($this->sxe);
+        $dom = new DomDocument();
+        $dom_sxe = $dom->importNode($dom_sxe, true);
+        $dom_sxe = $dom->appendChild($dom_sxe);
+        return $dom;
+    }
+
+    /** @return the string representation of this object */
+    public function toString() {
+        return $this->sxe->asXML();
+    }
+}



From aurelian at mail.berlios.de  Wed Aug 22 14:05:11 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Wed, 22 Aug 2007 14:05:11 +0200
Subject: [Medick-svn] r456 - in exp/ar5: . libs/active/record
	libs/active/record/drivers/abstract
	libs/active/record/drivers/sqlite
Message-ID: <200708221205.l7MC5BL7021033@sheep.berlios.de>

Author: aurelian
Date: 2007-08-22 14:05:02 +0200 (Wed, 22 Aug 2007)
New Revision: 456

Added:
   exp/ar5/libs/active/record/QueryBuilder.php
   exp/ar5/libs/active/record/SQLBuilder.php
   exp/ar5/libs/active/record/SQLCommand.php
   exp/ar5/libs/active/record/SQLField.php
   exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php
Modified:
   exp/ar5/ar5.php
   exp/ar5/ar5_sql.php
   exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
   exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
   exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
Log:
 -- almost a base skeleton for the new active record

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/ar5.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -5,16 +5,22 @@
 
 include_once('ar5_base.php');
 
-include_once('context/configurator/XMLConfigurator.php');
+// include_once('context/configurator/XMLConfigurator.php');
 
+include_once('active/record/SQLField.php');
+include_once('active/record/SQLBuilder.php');
+include_once('active/record/SQLCommand.php');
+
 include_once('active/record/drivers/abstract/SQLConnection.php');
 include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
+include_once('active/record/drivers/abstract/SQLTableInfo.php');
 
 include_once('ar5_sql.php');
 
 include_once('active/record/drivers/sqlite/sqlite.php');
 
 include_once('active/support/Inflector.php');
+// include_once('active/support/Reflector.php');
 
 class ActiveRecordException extends MedickException { }
 
@@ -36,13 +42,21 @@
   }
 
   public function __set($name, $value) {
-    if(isset($this->__fields[$name])) return $this->__fields[$name]->alter( $value );
+    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->alter( $value );
     throw new ActiveRecordException('No such field "' . $name . '"');
   }
 
+  public function __get($name) {
+    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->getValue();
+    throw new ActiveRecordException('No such field "' . $name . '"');
+  }
+
+  public function getPrimaryKey() {
+    return $this->__primary_key;
+  }
+
   public function save() {
-    if($this->__primary_key->isAffected()) return $this->update();
-    else $this->insert();
+    return $this->__primary_key->isAffected() ? $this->update() : $this->insert();
   }
 
   public function insert() {
@@ -56,7 +70,7 @@
 
   public function update() {
     $fields= $this->getAffectedFields();
-    if(sizeof($fields)<1) return 0;
+    if( sizeof($fields) < 1 ) return 0; // no harm, primary_key will be always affected, otherwise it will be an insert.
     $sql= 'update ' . $this->__table_name . ' set ';
     $sql .= implode('=?, ', array_keys($fields)) . '=? ';
     $sql .= 'where ' . $this->__primary_key->getName() . '=' . $this->__primary_key->getValue();
@@ -72,39 +86,34 @@
     return $r;
   }
 
-  public function getPrimaryKey() {
-    return $this->__primary_key;
-  }
-
-  protected function getAffectedFields() {
+  private function getAffectedFields() {
     return array_filter( $this->__fields, array($this, '__affectedField') );
   }
 
-  protected function reset() {
+  private function reset() {
     return array_walk( $this->__fields, array($this,'__notAffected'));
   }
 
   // callback for array_filter
-  private function __affectedField( Field $field ) {
+  private function __affectedField( SQLField $field ) {
     return $field->isAffected();
   }
   // callback for array_filter
-  private function __pk( Field $field ) {
+  private function __pk( SQLField $field ) {
     return $field->isPk();
   }
 
   // callback for array_walk
-  private function __notAffected( Field $field ) {
+  private function __notAffected( SQLField $field ) {
     if( $field->isAffected() && !$field->isPk() ) $field->setAffected(false);
   }
 
+  // -----------
+  // static
+  // -----------
   protected static $__table_info = null;
   protected static $__connection = null;
 
-  public static function find() {
-    throw new MedickException('ActiveRecord::find() must be implemented in child class.');
-  }
-
   public static function connection() {
     if(self::$__connection===null) {
       self::$__connection= new SQLiteConnection();
@@ -113,19 +122,28 @@
     return self::$__connection;
   }
 
+  public static function find() {
+    throw new MedickException('ActiveRecord::find() must be implemented in child class.');
+  }
+
+  public static function build( SQLBuilder $builder ) {
+    return $builder->execute();
+  }
+
 }
 
 class User extends ActiveRecord { 
 
   public static function find() {
     $args= func_get_args();
-    return self::build(new QueryBuilder(__CLASS__, $args));
+    return ActiveRecord::build(new SQLBuilder(__CLASS__, $args));
   }
 
 }
 
+
 $u = new User();
-$u->firstname= 'aurelian';
+$u->firstname= 'aurelian2';
 $u->lastname = 'oancea';
 $u->email= 'oancea at gmail.com';
 $u->password=md5('foo');
@@ -135,9 +153,17 @@
 $u->save();
 $u->save();
 
-$user = new User(array('firstname'=>'oancea', 'lastname'=>'mandinga'));
+$user = new User(array('firstname'=>'oancea2', 'lastname'=>'mandinga'));
 $user->email= 'oancea at yahoo.com';
 $user->password= md5('bau-bau');
 $user->save();
 
+
+$users= User::find();
+
+foreach($users as $user) {
+  // var_dump($user);
+  echo '[ ' . $user->id . ' ]> ' . $user->firstname . "\n";
+}
+
 ?>

Modified: exp/ar5/ar5_sql.php
===================================================================
--- exp/ar5/ar5_sql.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/ar5_sql.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -17,40 +17,8 @@
 
 }
 
-class Field extends Object {
+abstract class SQLResultSet extends Object implements ArrayAccess {
 
-  private $name, $value, $pk, $type, $size, $affected;
-
-  public function Field($name, $pk=false, $type='int', $size=0, $value= null, $affected=false) {
-    $this->name=  $name;
-    $this->value= $value;
-    $this->pk= (bool)$pk;
-    $this->size= (int)$size;
-    $this->type= SQLType::getPhpType( strtolower($type) );
-    $this->affected= (bool)$affected;
-  }
-
-  public function getName() { return $this->name; }
-
-  public function getValue() { return $this->value; }
-  public function setValue($value) { $this->value= $value;}
-
-  public function setAffected($val) { $this->affected= (bool)$val; }
-  public function isAffected() { return (bool)$this->affected; }
-
-  public function isPk() { return (bool)$this->pk; }
-
-  public function getType() { return $this->type; }
-
-  public function alter( $value ) {
-    $this->value    = $value;
-    $this->affected = true;
-  }
-
-}
-
-abstract class SQLResultSet extends Object {
-
   protected $result, $connection;
   protected $row= array();
 
@@ -59,35 +27,33 @@
     $this->connection  = $connection;
   }
 
-  public abstract function next();
+  public function offsetExists($offset) {
+    return isset( $this->row[$offset] );
+  }
 
-  public function getRow() { return $this->row; }
+  public function offsetGet($offset) {
+    return $this->row[$offset];
+  }
 
-  public function __get($name) {
-    if(isset($this->row[$name])) return $this->row[$name];
-    throw new SQLException('Cannot get the value of "' . $name . '" no such field!');
+  public function offsetSet($offset, $value) {
+    throw new MedickError("A ResultSet is read-only!");
   }
 
-}
+  public function offsetUnset($offset) {
+    throw new MedickError("A ResultSet is read-only!");
+  }
 
-abstract class SQLTableInfo extends Object {
-
-  protected $name, $connection;
-  private $fields;
-
-  public function SQLTableInfo($name, SQLConnection $connection) {
-    $this->name= $name;
-    $this->connection= $connection;
-    $this->fields= array();
+  public function getRow() { 
+    return $this->row;
   }
 
-  public function add(Field $field) {
-    $this->fields[$field->getName()]= $field;
+  public function __get($name) {
+    if(isset($this->row[$name])) return $this->row[$name];
+    throw new SQLException('Cannot get the value of "' . $name . '" no such field!');
   }
 
-  public function getFields() { return $this->fields; }
+  abstract public function next();
 
-  abstract public function initFields( );
-
 }
 
+

Added: exp/ar5/libs/active/record/QueryBuilder.php
===================================================================
--- exp/ar5/libs/active/record/QueryBuilder.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/QueryBuilder.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -0,0 +1,5 @@
+<?php
+
+// $Id$
+
+class QueryBuilder extends SQLBuilder {	}


Property changes on: exp/ar5/libs/active/record/QueryBuilder.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/SQLBuilder.php
===================================================================
--- exp/ar5/libs/active/record/SQLBuilder.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/SQLBuilder.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -0,0 +1,241 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Aurelian Oancea nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * It knows how to create an SQLCommand from an array
+ *
+ *
+ * Arguments:
+ *
+ *  1. Simple, no argument:
+ *    1.1 User::find(); // select * from users; // => RowsAggregate
+ *
+ *  2. Simple, one Argument
+ *    2.1. User::find( 'all' ); // => select * from users; // => RowsAggregate
+ *    2.2. User::find( 'first' ); // => select * from users limit 1; // => ActiveRecord
+ *    2.3. User::find( 1 ); // => select * fro users where id=1; // => ActiveRecord
+ *
+ *  3. Clauses, one simple argument (see 2) and an array as the second one
+ *    3.1. User::find( 'all', array( 'condition' => "name='Peter'" )); 
+ *    // select * from users where name='Peter';
+ *    3.2. User::find( 'all', array( 'order by' => 'name asc' ));
+ *    // select * from users order by name asc;
+ *    3.3. User::find( 'all', array( 'limit' => 5 ));
+ *    // select * from users limit 5;
+ *    3.4. User::find( 'all', array( 'offset' => 10 ));
+ *
+ *    3.5. User::find( 'all', array( 'left join' => 'posts on posts.user_id=users.id' ));
+ *
+ *    3.6. User::find( 'all', array( 'columns' => 'id, name' ));
+ *    // select id,name from users;
+ *
+ *    3.7. User::find( 'all', array( 'from'=>'posts' ));
+ *    // select * from users, posts;
+ *    3.8. User::find( 'all', array( 'include'=>'posts' ));
+ *
+ *    3.9. User::find( 'all', array( 
+ *          'condition'=>"name != 'Peter'", 'limit' => 5, 'offset'=>10, 'order by' => 'name asc' ));
+ *    // select * from users where name != 'Peter' limit 5, 10 order by name asc;
+ *
+ *  4. Bindings
+ *    4.1. User::find( 'all', array('condition'=>'name=?'), array('Peter'));
+ *    // select * from users where name='Peter';
+ *    4.2. User::find( 'first', array('condition'=>'id > ?'), array(5));
+ *    // select * from users where id > 5 limit 1; 
+ *
+ * @package medick.active.record
+ * @author Aurelian Oancea
+ */
+class SQLBuilder extends Object {
+
+    /** @var string 
+        result type owner */
+    private $owner;
+    
+    /** @var array
+        clauses */ 
+    private $clauses=array();
+
+    /** @var array
+        current bindings */ 
+    private $bindings=array();
+    
+    /** @var string
+        Type of select (all or first) */
+    private $type;
+    
+    /** @var int 
+        limit */
+    private $limit;
+    
+    /** @var int
+        offset */
+    private $offset;
+
+    /**
+     * Constructor.
+     * 
+     * It parses the arguments and will create the instance variables.
+     * Usually this class is a parameter for ActiveRecord::build method, but it is 
+     * also used from Associations.
+     *
+     * @see medick.active.record.ActiveRecord::build, medick.active.record.association
+     * @param string owner
+     * @param array arguments
+     */ 
+    public function SQLBuilder($owner, $arguments) {
+        $this->owner= $owner;
+        if ( !count($arguments) || $arguments[0] == 'all' ) {
+            $this->type= 'all';
+        } else {
+            $this->type = 'first';
+            $this->limit= 1;
+        }
+        if (isset($arguments[0]) && is_numeric($arguments[0])) {
+            $this->clauses['condition']='id=?';
+            $this->bindings[]=$arguments[0];
+        }
+        if (isset($arguments[1])) {
+            $this->clauses= $arguments[1];
+        }
+        if (isset($arguments[2])) {
+            $this->bindings= $arguments[2];
+        }
+    }
+    
+    /**
+     * It gets the limit
+     *
+     * @return int limit
+     */ 
+    public function getLimit() {
+        return $this->limit;    
+    }
+
+    public function setLimit( $limit ) {
+        $this->limit= $limit;
+    }
+
+    /**
+     * It gets the offset
+     *
+     * @return int the offset
+     */ 
+    public function getOffset() {
+        return $this->offset;
+    }
+    
+    /**
+     * It gets the owner
+     *
+     * @return string the owner
+     */ 
+    public function getOwner() {
+        return $this->owner;
+    }
+    
+    /**
+     * It creates an instance of the owner
+     *
+     * @return ReflectionClass
+     */ 
+    // public function getOwnerClass() {
+    //     return ActiveRecord::reflect_class( $this->owner );
+    // }
+
+    /**
+     * It gets the current list of bindings
+     *
+     * @return array the list of bindings
+     */ 
+    public function getBindings() {
+        return $this->bindings;
+    }
+
+    /**
+     * It gets the type
+     *
+     * @return string
+     */ 
+    public function getType() {
+        return $this->type;
+    }
+
+    /**
+     * Compile an SQLCommand from this query clauses.
+     * 
+     * Valid Clauses:
+     * <ul>
+     *  <li>'from'      => to add an additional from clause</li>
+     *  <li>'condition' => to insert a sql condition</li>
+     *  <li>'order by'  => to set an order by</li>
+     *  <li>'columns'   => specify only the columns you want to select (check if it work on aliases too?)</li>
+     *  <li>'limit'     => adjust the limit (this is not sended to the SQLCommand since is intended to be used with PreparedStatements)</li>
+     *  <li>'offset'    => adds an offset (this is not sended to the SQLCommand since is intended to be used with PreparedStatements)</li>
+     *  <li>'left join' => add a left join</li>
+     * </ul>
+     *
+     * @return SQLCommand
+     */
+    public function compile() {
+        if(isset($this->clauses['include'])) {
+          $this->clauses['left join'] = Inflector::pluralize($this->clauses['include']) . ' on ' . Inflector::pluralize($this->clauses['include']).'.id='.Inflector::tabelize($this->owner).'.'.$this->clauses['include'].'_id';
+        }
+        $command= SQLCommand::select()->from(Inflector::tabelize($this->owner));
+        if (isset($this->clauses['from']))       $command->from($this->clauses['from']);
+        if (isset($this->clauses['condition']))  $command->where($this->clauses['condition']);
+        if (isset($this->clauses['order by']))   $command->orderBy($this->clauses['order by']);
+        if (isset($this->clauses['columns']))    $command->columns($this->clauses['columns']);
+        if (isset($this->clauses['limit']))      $this->limit= $this->clauses['limit'];
+        if (isset($this->clauses['offset']))     $this->offset= $this->clauses['offset'];
+        if (isset($this->clauses['left join']))  $command->leftJoin('left outer join ' . $this->clauses['left join']);
+        return $command;
+    }
+
+
+    public function execute() {
+      // 1.
+      $stmt= ActiveRecord::connection()->prepare( $this->compile()->getQueryString() );
+
+      // 2. one or more?
+      return $stmt->getAllRecords( $this->bindings, new ReflectionClass( $this->owner ) );
+
+      $rs= $stmt->executeQuery( $this->bindings );
+      return $rs;
+      // 2.
+      return array();
+    }
+
+}
+


Property changes on: exp/ar5/libs/active/record/SQLBuilder.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/SQLCommand.php
===================================================================
--- exp/ar5/libs/active/record/SQLCommand.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/SQLCommand.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -0,0 +1,142 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * It represents an sql command
+ *
+ * You can use this object to build sql query`s in a fancy way:
+ * <code>
+ *  $command= SQLCommand::select()->from('news')->where('state=?')->orderBy('created_at');
+ * // later, you can use a PreparedStatement to bind parameters.
+ *  $stmt= $conn->prepareStatement($command->getQueryString());
+ *  $stmt->setInt(1, News::PUBLISHED);
+ *  $rs= $stmt->executeQuery();
+ * </code>
+ * More methods will be added later-on, API will be provided on request.
+ * 
+ * @package medick.active.record
+ * @author Aurelian Oancea
+ * @since Rev. 343
+ */
+class SQLCommand extends Object {
+
+    private $command;
+
+    private $tables= array();
+
+    private $joins= array();
+    
+    private $wheres= array();
+
+    private $orderBy;
+
+    private $columns;
+    
+    private function SQLCommand($command) {
+        $this->command= $command;
+    }
+
+    public static function select() {
+        return new SQLCommand('select');
+    }
+
+    public function from($table) {
+        $this->tables[]= $table;
+        return $this;
+    }
+
+    public function where($clause) {
+        $this->wheres[]= $clause;
+        return $this;
+    }
+
+    public function orderBy($clause) {
+        $this->orderBy= $clause;
+        return $this;
+    }
+
+    public function columns($columns) {
+        $this->columns= $columns;
+        return $this;
+    }
+    
+    public function leftJoin($what) {
+        // $this->tables[]=$what;
+        $this->joins[]= $what;
+        return $this;
+    }
+    
+    public function getQueryString() {
+        $query= $this->command . " ";
+        // if ($this->distinct) $query .= "distinct ";
+        $query .= $this->appendColumns();
+        // $query .= " from " . $this->from;
+        $query .= $this->appendFrom();
+        $query .= $this->appendJoins();
+        $query .= $this->appendWhere();
+        $query .= $this->appendOrderBy();
+        return $query;
+    }
+
+    private function appendColumns() {
+        return $this->columns ? $this->columns : "*";
+    }
+
+    private function appendFrom() {
+        $q= " from ";
+        $size= count($this->tables);
+        for ($i = 0; $i < $size; ++$i) {
+            $q .= $this->tables[$i];
+            if ($i <= $size - 2) {
+                $q .= " , ";
+            }
+        }
+        return $q;
+    }
+    
+    private function appendJoins() {
+        if (count($this->joins)) return " " . implode(" ", $this->joins);
+        else return " ";
+    }
+    
+    private function appendWhere() {
+        if (count($this->wheres)) return " where " . implode(" and ", $this->wheres);
+        else return "";
+    }
+
+    private function appendOrderBy() {
+        return $this->orderBy ? " order by " . $this->orderBy : "";
+    }
+
+}


Property changes on: exp/ar5/libs/active/record/SQLCommand.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/SQLField.php
===================================================================
--- exp/ar5/libs/active/record/SQLField.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/SQLField.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -0,0 +1,36 @@
+<?php
+
+// $Id$
+
+class SQLField extends Object {
+
+  private $name, $value, $pk, $type, $size, $affected;
+
+  public function SQLField($name, $pk=false, $type='int', $size=0, $value= null, $affected=false) {
+    $this->name=  $name;
+    $this->value= $value;
+    $this->pk= (bool)$pk;
+    $this->size= (int)$size;
+    $this->type= SQLType::getPhpType( strtolower($type) );
+    $this->affected= (bool)$affected;
+  }
+
+  public function getName() { return $this->name; }
+
+  public function getValue() { return $this->value; }
+  public function setValue($value) { $this->value= $value;}
+
+  public function setAffected($val) { $this->affected= (bool)$val; }
+  public function isAffected() { return (bool)$this->affected; }
+
+  public function isPk() { return (bool)$this->pk; }
+
+  public function getType() { return $this->type; }
+
+  public function alter( $value ) {
+    $this->value    = $value;
+    $this->affected = true;
+  }
+
+}
+


Property changes on: exp/ar5/libs/active/record/SQLField.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -22,7 +22,7 @@
   abstract protected function getLastErrorMessage();
 
   // return TableInfo
-  abstract public function getTableInfo($name);
+  abstract public function getTableInfo( $name, $force=false );
   
   // return PreparedStatement
   abstract public function prepare( $sql );
@@ -38,7 +38,7 @@
   
   // return int
   public function executeUpdate( $sql ) {
-    return $this->getUpdateCount( $this->exec($sql) );
+    return $this->getUpdateCount( $this->exec( $sql ) );
   }
 
 }

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -109,22 +109,49 @@
     $this->boundInVars[$idx]= (int)$value;
   }
 
+  // todo
+  public function set($idx, $value) {
+    var_dump(gettype($value));
+  }
+
   public function populateValues(Array $fields) {
     $i=1; foreach($fields as $field) {
-      if(!$field instanceof Field) throw new SQLException('Wrong argument Type, it should be an instance of "Field"');
+      if(!$field instanceof SQLField) throw new SQLException('Wrong argument Type, it should be an instance of "Field"');
       call_user_func( array($this, 'set'.ucfirst($field->getType())), $i++, $field->getValue() );
     }
   }
 
+  public function executeQuery(Array $params= array()) {
+    $this->setupParams($params);
+    return $this->conn->execute( $this->replaceParams() );
+  }
+
+  public function getAllRecords(Array $params=array(), ReflectionClass $record) {
+    $this->setupParams( $params );
+    $result= $this->conn->exec( $this->replaceParams() );
+    return $this->getRecordsIterator( $result, $record );
+
+  }
+
   public function executeUpdate() {
-    $sql= $this->replaceParams();
-    return $this->conn->executeUpdate( $sql );
+    return $this->conn->executeUpdate( $this->replaceParams() );
   }
 
   public function close() {
+
   }
 
-  abstract protected function escape($value);
+  private function setupParams(Array $params=array()) {
+    if ($params) {
+			for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+				$this->set($i+1, $params[$i]);
+			}
+    }
+  }
 
+  abstract protected function escape( $value );
+
+  abstract protected function getRecordsIterator( $results, ReflectionClass $class );
+
 }
 

Added: exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -0,0 +1,26 @@
+<?php
+// $Id$
+
+abstract class SQLTableInfo extends Object {
+
+  protected $name, $connection;
+  private $fields;
+
+  public function SQLTableInfo($name, SQLConnection $connection) {
+    $this->name= $name;
+    $this->connection= $connection;
+    $this->fields= array();
+  }
+
+  public function add(SQLField $field) {
+    $this->fields[$field->getName()]= $field;
+  }
+
+  public function getFields() { 
+    return $this->fields;
+  }
+
+  abstract public function initFields( );
+
+}
+


Property changes on: exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
===================================================================
--- exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-20 14:29:17 UTC (rev 455)
+++ exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-22 12:05:02 UTC (rev 456)
@@ -1,12 +1,49 @@
 <?php
 // $Id$
 
+class SQLiteRecordsIterator extends Object implements Iterator {
+
+  private $result;
+
+  private $class;
+
+  public function SQLiteRecordsIterator( $result, ReflectionClass $class ) {
+    $this->class= $class;
+    $this->result= $result;
+  }
+
+  // Rewind the Iterator to the first element.
+  public function rewind() {
+    return sqlite_rewind( $this->result );
+  }
+
+  // Returns the current element
+  public function current() {
+    return $this->class->newInstance( sqlite_current( $this->result ) );
+  }
+
+  // Return the key of the current element.
+  public function key() {
+    return sqlite_key( $this->result );
+  }
+
+  // Moves the cursor to the next element.
+  public function next() {
+    return sqlite_next( $this->result );
+  }
+
+  // Check if there is a current element after calls to rewind() or next().
+  public function valid() {
+    return sqlite_valid( $this->result );
+  }
+
+}
+
 class SQLiteResultSet extends SQLResultSet {
 
   public function next() {
     $this->row= sqlite_fetch_array( $this->result );
     return (bool)$this->row;
-    // return $this->row ? true : false;
   }
 
 }
@@ -14,11 +51,12 @@
 class SQLiteTableInfo extends SQLTableInfo {
 
   public function initFields() {
+    echo ".";
     $sql= 'PRAGMA table_info('.$this->name.')';
     $rs= $this->connection->execute( $sql );
     while( $rs->next() ) {
       // xxx: type.
-      $fulltype= $rs->type; // varchar(255);
+      $fulltype= $rs['type']; // varchar(255);
       $size=0;
       if (preg_match('/^([^\(]+)\(\s*(\d+)\s*,\s*(\d+)\s*\)$/', $fulltype, $matches)) {
         $type = $matches[1];
@@ -31,7 +69,7 @@
         $type = $fulltype;
       }
       // add field
-      $this->add( new Field( $rs->name, $rs->pk, $type, $size ) );
+      $this->add( new SQLField( $rs['name'], $rs['pk'], $type, $size ) );
     }
   }
 
@@ -43,6 +81,10 @@
     return sqlite_escape_string( $value );
   }
 
+  public function getRecordsIterator( $result, ReflectionClass $class ) {
+    return new SQLiteRecordsIterator( $result, $class );
+  }
+
 }
 
 class SQLiteConnection extends SQLConnection {
@@ -87,12 +129,15 @@
   public function getLastErrorMessage() {
     return sqlite_error_string( sqlite_last_error($this->resource) );
   }
-  
-  // xxx. cache.
-  public function getTableInfo( $name ) {
-    $table_info= new SQLiteTableInfo( $name, $this );
-    $table_info->initFields();
-    return $table_info;
+
+  private static $__table_info_storage;
+
+  public function getTableInfo( $name, $force= false ) {
+    if( $force || !isset(self::$__table_info_storage[$name]) ) {
+      self::$__table_info_storage[$name]= new SQLiteTableInfo( $name, $this );
+      self::$__table_info_storage[$name]->initFields();
+    }
+    return self::$__table_info_storage[$name];
   }
 
   public function prepare( $sql ) {



From aurelian at mail.berlios.de  Fri Aug 24 16:37:44 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Fri, 24 Aug 2007 16:37:44 +0200
Subject: [Medick-svn] r457 - in exp/ar5: . conf
	libs/active/record/drivers/abstract
	libs/active/record/drivers/sqlite
Message-ID: <200708241437.l7OEbiAV018937@sheep.berlios.de>

Author: aurelian
Date: 2007-08-24 16:37:39 +0200 (Fri, 24 Aug 2007)
New Revision: 457

Added:
   exp/ar5/conf/
   exp/ar5/conf/aymo.xml
   exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php
Modified:
   exp/ar5/ar5.php
   exp/ar5/ar5_sql.php
   exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
   exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
Log:
 -- using configurator

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/ar5.php	2007-08-24 14:37:39 UTC (rev 457)
@@ -3,27 +3,26 @@
 
 set_include_path('libs');
 
+// medick base stuff
 include_once('ar5_base.php');
-
-// include_once('context/configurator/XMLConfigurator.php');
-
+// not yet ported classes
+include_once('ar5_sql.php');
+// medick trunk ported classes
+include_once('context/configurator/XMLConfigurator.php');
+include_once('active/support/Inflector.php');
+// active record helpers
 include_once('active/record/SQLField.php');
 include_once('active/record/SQLBuilder.php');
 include_once('active/record/SQLCommand.php');
-
+// abstract hooks
 include_once('active/record/drivers/abstract/SQLConnection.php');
 include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
+include_once('active/record/drivers/abstract/SQLResultSet.php');
 include_once('active/record/drivers/abstract/SQLTableInfo.php');
-
-include_once('ar5_sql.php');
-
+// specific driver
 include_once('active/record/drivers/sqlite/sqlite.php');
 
-include_once('active/support/Inflector.php');
-// include_once('active/support/Reflector.php');
 
-class ActiveRecordException extends MedickException { }
-
 class ActiveRecord extends Object {
 
   protected $__class_name;
@@ -41,6 +40,9 @@
     }
   }
 
+  // ----------
+  // magick
+  // ----------
   public function __set($name, $value) {
     if( isset($this->__fields[$name]) ) return $this->__fields[$name]->alter( $value );
     throw new ActiveRecordException('No such field "' . $name . '"');
@@ -51,10 +53,16 @@
     throw new ActiveRecordException('No such field "' . $name . '"');
   }
 
+  // ----------
+  // convenient public methods
+  // ----------
   public function getPrimaryKey() {
     return $this->__primary_key;
   }
 
+  // ----------
+  // alter data
+  // ----------
   public function save() {
     return $this->__primary_key->isAffected() ? $this->update() : $this->insert();
   }
@@ -77,6 +85,9 @@
     $this->performQuery($sql, $fields);
   }
 
+  // ----------
+  // internal helpers
+  // ----------
   private function performQuery( $sql, $fields ) {
     $stmt= self::connection()->prepare( $sql );
     $stmt->populateValues( $fields );
@@ -94,6 +105,10 @@
     return array_walk( $this->__fields, array($this,'__notAffected'));
   }
 
+  // ---------
+  // internal callbacks
+  // ---------
+
   // callback for array_filter
   private function __affectedField( SQLField $field ) {
     return $field->isAffected();
@@ -111,15 +126,26 @@
   // -----------
   // static
   // -----------
-  protected static $__table_info = null;
-  protected static $__connection = null;
+  private static $__connection     = null;
+  private static $__connection_dsn = array();
+  private static $__connection_key = '';
 
+  protected static $__connection_dsn_id = null;
+
+  public static function setConnectionDsn( IConfigurator $config ) {
+    self::$__connection_dsn= $config->getDatabaseDsn( self::$__connection_dsn_id );
+    ksort(self::$__connection_dsn);
+    self::$__connection_key= crc32(serialize( self::$__connection_dsn ));
+  }
+
   public static function connection() {
-    if(self::$__connection===null) {
-      self::$__connection= new SQLiteConnection();
-      self::$__connection->connect();
+    if( !isset( self::$__connection[self::$__connection_key] ) ) {
+      // todo: load driver connection implementation.
+      $class = new ReflectionClass( SQLConnection::$__drivers[self::$__connection_dsn['phptype']] . 'Connection' );
+      self::$__connection[self::$__connection_key] = $class->newInstance();
+      self::$__connection[self::$__connection_key]->connect( self::$__connection_dsn );
     }
-    return self::$__connection;
+    return self::$__connection[self::$__connection_key];
   }
 
   public static function find() {
@@ -132,6 +158,11 @@
 
 }
 
+
+// ----------
+// tests :)
+// ----------
+
 class User extends ActiveRecord { 
 
   public static function find() {
@@ -141,6 +172,8 @@
 
 }
 
+$config= new XMLConfigurator('conf/aymo.xml', 'test');
+ActiveRecord::setConnectionDsn( $config );
 
 $u = new User();
 $u->firstname= 'aurelian2';

Modified: exp/ar5/ar5_sql.php
===================================================================
--- exp/ar5/ar5_sql.php	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/ar5_sql.php	2007-08-24 14:37:39 UTC (rev 457)
@@ -3,6 +3,8 @@
 
 class SQLException extends MedickException {  }
 
+class ActiveRecordException extends MedickException { }
+
 // xxx.
 class SQLType extends Object {
 
@@ -17,43 +19,3 @@
 
 }
 
-abstract class SQLResultSet extends Object implements ArrayAccess {
-
-  protected $result, $connection;
-  protected $row= array();
-
-  public function SQLResultSet($result, SQLConnection $connection) {
-    $this->result= $result;
-    $this->connection  = $connection;
-  }
-
-  public function offsetExists($offset) {
-    return isset( $this->row[$offset] );
-  }
-
-  public function offsetGet($offset) {
-    return $this->row[$offset];
-  }
-
-  public function offsetSet($offset, $value) {
-    throw new MedickError("A ResultSet is read-only!");
-  }
-
-  public function offsetUnset($offset) {
-    throw new MedickError("A ResultSet is read-only!");
-  }
-
-  public function getRow() { 
-    return $this->row;
-  }
-
-  public function __get($name) {
-    if(isset($this->row[$name])) return $this->row[$name];
-    throw new SQLException('Cannot get the value of "' . $name . '" no such field!');
-  }
-
-  abstract public function next();
-
-}
-
-

Added: exp/ar5/conf/aymo.xml
===================================================================
--- exp/ar5/conf/aymo.xml	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/conf/aymo.xml	2007-08-24 14:37:39 UTC (rev 457)
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- 
+ ! $Id$
+ ! -->
+<application name="aymo">
+    <!-- localhost environment -->
+    <environment name="localhost">
+        <!-- general properties -->
+        <properties>
+            <path>/W/medick/applications/aymo</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://localhost</server_name>
+            <document_root>/aymo</document_root>
+            <rewrite>on</rewrite>
+            <!-- Session Container
+            Only CreoleSessionContainer is available.
+            It needs a database table:
+            === start ===
+            create table c_sessions (
+                `session_id`   VARCHAR (255) PRIMARY KEY,
+                `session_data` TEXT,
+                `session_lastmodified` DATETIME
+            );
+            ===  end  ===
+            NOTE: this was tested only on mysql driver
+            NOTE: to implement your own session container (handler), see ISessionContainer inteface
+            === end comment here ===
+            <session>
+                <container>action.controller.session.CreoleSessionContainer</container>
+            </session>
+            -->
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="/W/medick/applications/aymo/log/aymo.log" />
+                </outputter>
+                <outputter name="stdout" level="0" />
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on aymo" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "mysql"
+                 hostspec = "localhost"
+                 database = "aymo"
+                 username = "root"
+                 password = "" />
+        </database>
+    </environment>
+
+    <!-- a sample test environment -->
+    <environment name="test">
+        <!-- general properties -->
+        <properties>
+            <path>/W/medick/applications/aymo</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://exemplu.com</server_name>
+            <document_root>/aymo</document_root>
+            <rewrite>on</rewrite>
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="/W/medick/applications/aymo/log/aymo.log" />
+                </outputter>
+                <outputter name="stdout" level="0" />
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on Exemplu.com::aymo" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "sqlite"
+                 database = "/W/medick/applications/aymo/db/aymo.sqlite" />
+        </database>
+    </environment>
+  
+</application>
+  


Property changes on: exp/ar5/conf/aymo.xml
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-24 14:37:39 UTC (rev 457)
@@ -3,16 +3,39 @@
 
 abstract class SQLConnection extends Object {
 
-  protected $resource, $database, $lastQuery;
+  /** @var array 
+   */
+  public static $__drivers= array('sqlite'=>'SQLite');
 
-  public function getDatabase() { return $this->database; }
-  public function setDatabase( $database ) { $this->database=$database;}
-  public function getResource() { return $this->resource; }
-  public function setResource( $resource ) { $this->resource= $resource; }
-  public function getLastQuery() { return $this->lastQuery; }
+  protected $resource; 
+  
+  protected $database;
+  
+  protected $lastQuery;
 
-  abstract public function connect();
+  // return int
+  public function executeUpdate( $sql ) {
+    return $this->getUpdateCount( $this->exec( $sql ) );
+  }
 
+  public function getDatabase() { 
+    return $this->database;
+  }
+  
+  public function setDatabase( $database ) { 
+    $this->database=$database;
+  }
+
+  public function getResource() { 
+    return $this->resource;
+  }
+
+  public function getLastQuery() { 
+    return $this->lastQuery;
+  }
+
+  abstract public function connect( Array $dsn= array() );
+
   abstract public function close(); 
 
   // return int
@@ -36,11 +59,6 @@
   // return int
   abstract public function getUpdateCount( $rs=null );
   
-  // return int
-  public function executeUpdate( $sql ) {
-    return $this->getUpdateCount( $this->exec( $sql ) );
-  }
-
 }
 
 

Added: exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php	2007-08-24 14:37:39 UTC (rev 457)
@@ -0,0 +1,44 @@
+<?php
+
+// $Id$
+
+abstract class SQLResultSet extends Object implements ArrayAccess {
+
+  protected $result, $connection;
+  protected $row= array();
+
+  public function SQLResultSet($result, SQLConnection $connection) {
+    $this->result= $result;
+    $this->connection  = $connection;
+  }
+
+  public function offsetExists($offset) {
+    return isset( $this->row[$offset] );
+  }
+
+  public function offsetGet($offset) {
+    return $this->row[$offset];
+  }
+
+  public function offsetSet($offset, $value) {
+    throw new SQLException("A ResultSet is read-only!");
+  }
+
+  public function offsetUnset($offset) {
+    throw new SQLException("A ResultSet is read-only!");
+  }
+
+  public function getRow() { 
+    return $this->row;
+  }
+
+  public function __get($name) {
+    if(isset($this->row[$name])) return $this->row[$name];
+    throw new SQLException('Cannot get the value of "' . $name . '" no such field!');
+  }
+
+  abstract public function next();
+
+}
+
+


Property changes on: exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
===================================================================
--- exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-22 12:05:02 UTC (rev 456)
+++ exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-24 14:37:39 UTC (rev 457)
@@ -42,7 +42,7 @@
 class SQLiteResultSet extends SQLResultSet {
 
   public function next() {
-    $this->row= sqlite_fetch_array( $this->result );
+    $this->row= sqlite_fetch_array( $this->result, SQLITE_ASSOC );
     return (bool)$this->row;
   }
 
@@ -89,12 +89,9 @@
 
 class SQLiteConnection extends SQLConnection {
 
-  public function SQLiteConnection() {
-    $this->database= 'db/aymo.sqlite';
-  }
-
-  public function connect() {
+  public function connect( Array $dsn = array() ) {
     try {
+      $this->database= $dsn['database'];
       $this->resource= sqlite_open( $this->database );
     } catch (Error $err) {
       throw new SQLException( $err->getMessage() );
@@ -104,14 +101,15 @@
   public function exec( $sql ) {
    $this->lastQuery= $sql;
     try {
-      return sqlite_query( $this->resource, $sql, SQLITE_ASSOC );
+      return sqlite_query( $this->resource, $this->lastQuery, SQLITE_ASSOC );
     } catch (Error $err) {
       throw new SQLException( $err->getMessage() );
     }
   }
 
   public function execute( $sql ) {
-    return new SQLiteResultSet( $this->exec( $sql ), $this );
+    $this->lastQuery= $sql;
+    return new SQLiteResultSet( $this->exec( $this->lastQuery ), $this );
   }
 
   public function getUpdateCount( $rs=null ) {



From aurelian at mail.berlios.de  Sun Aug 26 20:58:09 2007
From: aurelian at mail.berlios.de (aurelian at BerliOS)
Date: Sun, 26 Aug 2007 20:58:09 +0200
Subject: [Medick-svn] r458 - in exp/ar5: . conf db libs/active/record
	libs/active/record/drivers/abstract
	libs/active/record/drivers/sqlite libs/context/configurator
	test test/libs test/mock
Message-ID: <200708261858.l7QIw9LD009960@sheep.berlios.de>

Author: aurelian
Date: 2007-08-26 20:58:03 +0200 (Sun, 26 Aug 2007)
New Revision: 458

Added:
   exp/ar5/LICENSE
   exp/ar5/db/import.php
   exp/ar5/libs/active/record/Base.php
   exp/ar5/libs/active/record/SQLType.php
   exp/ar5/test/
   exp/ar5/test/libs/
   exp/ar5/test/libs/st-1.0.1beta2.tar.bz2
   exp/ar5/test/mock/
   exp/ar5/test/mock/configurator.php
   exp/ar5/test/mock/driver.php
   exp/ar5/test/runner.php
Removed:
   exp/ar5/ar5_sql.php
Modified:
   exp/ar5/README
   exp/ar5/ar5.php
   exp/ar5/ar5_base.php
   exp/ar5/conf/aymo.xml
   exp/ar5/libs/active/record/QueryBuilder.php
   exp/ar5/libs/active/record/SQLBuilder.php
   exp/ar5/libs/active/record/SQLCommand.php
   exp/ar5/libs/active/record/SQLField.php
   exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
   exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
   exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php
   exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php
   exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
   exp/ar5/libs/context/configurator/IConfigurator.php
   exp/ar5/libs/context/configurator/XMLConfigurator.php
Log:
 -- org. stuff

Added: exp/ar5/LICENSE
===================================================================
--- exp/ar5/LICENSE	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/LICENSE	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,25 @@
+Copyright (c) 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+    this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+    * Neither the name of Aurelian Oancea nor the names of his contributors may
+    be used to endorse or promote products derived from this software without
+    specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+

Modified: exp/ar5/README
===================================================================
--- exp/ar5/README	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/README	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,35 @@
 // $Id$
 
-This is an experiment to create a faster&better ActiveRecord
-It will also replace creole from medick.
+This is an experiment to create a faster / better and feature rich ActiveRecord
+It will also replace Creole from Medick.
 
+This Medick experiment is licensed under BSD Licence, see LICENSE for details.
+
+Status:
+  -> removed Creole
+  -> SQLConnection -> database connection class
+  -> SQLTableInfo -> metadata for database tables
+  -> SQLResultSet -> fetch data from database
+  -> SQLPreparedStatement -> executes prepared statements on the database
+  -> SQLRecordsIterator -> returns collections of ActiveRecord objects
+  -> SQLite (v.2) driver
+  -> SQLField -> a field from a table
+  -> SQLCommand -> builds SQL Commands
+  -> SQLBuilder -> builds SQLCommands from array
+  -> ActiveRecord: configurations from IConfigurator
+  -> ActiveRecord: base insert/update/save
+  -> ActiveRecord: base find
+
+Todo:
+  -> ActiveRecord: filters
+  -> ActiveRecord: validators
+  -> Driver: MySQL
+  -> Driver: MySQLi
+  -> Driver: PostgreSQL
+  -> Driver: PDOSQLite (v.3)
+
+Unit Tests:
+  -> setup simpletest, a runner
+  -> setup mocks for accessing data
+  -> active record tests.
+

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/ar5.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,6 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 set_include_path('libs');
 
@@ -9,156 +10,12 @@
 include_once('ar5_sql.php');
 // medick trunk ported classes
 include_once('context/configurator/XMLConfigurator.php');
-include_once('active/support/Inflector.php');
-// active record helpers
-include_once('active/record/SQLField.php');
-include_once('active/record/SQLBuilder.php');
-include_once('active/record/SQLCommand.php');
-// abstract hooks
-include_once('active/record/drivers/abstract/SQLConnection.php');
-include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
-include_once('active/record/drivers/abstract/SQLResultSet.php');
-include_once('active/record/drivers/abstract/SQLTableInfo.php');
-// specific driver
+
+// driver
 include_once('active/record/drivers/sqlite/sqlite.php');
 
+include_once('active/record/Base.php');
 
-class ActiveRecord extends Object {
-
-  protected $__class_name;
-  protected $__table_name;
-  protected $__fields;
-  protected $__primary_key;
-
-  public function ActiveRecord( $params=array() ) {
-    $this->__class_name  = $this->getClassName();
-    $this->__table_name  = Inflector::tabelize( $this->__class_name );
-    $this->__fields      = ActiveRecord::connection()->getTableInfo( $this->__table_name )->getFields();
-    $this->__primary_key = current( array_filter( $this->__fields, array($this,'__pk') ));
-    foreach($params as $key=>$value) {
-      $this->$key= $value;
-    }
-  }
-
-  // ----------
-  // magick
-  // ----------
-  public function __set($name, $value) {
-    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->alter( $value );
-    throw new ActiveRecordException('No such field "' . $name . '"');
-  }
-
-  public function __get($name) {
-    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->getValue();
-    throw new ActiveRecordException('No such field "' . $name . '"');
-  }
-
-  // ----------
-  // convenient public methods
-  // ----------
-  public function getPrimaryKey() {
-    return $this->__primary_key;
-  }
-
-  // ----------
-  // alter data
-  // ----------
-  public function save() {
-    return $this->__primary_key->isAffected() ? $this->update() : $this->insert();
-  }
-
-  public function insert() {
-    $fields= $this->getAffectedFields();
-    $sql= 'insert into ' . $this->__table_name
-          . ' (' . implode(',', array_keys($fields)) . ')'
-          . ' values (' . substr(str_repeat('?,', count($fields)), 0, -1) . ')';
-    $this->performQuery($sql, $fields);
-    $this->__primary_key->alter( self::connection()->nextId() );
-  }
-
-  public function update() {
-    $fields= $this->getAffectedFields();
-    if( sizeof($fields) < 1 ) return 0; // no harm, primary_key will be always affected, otherwise it will be an insert.
-    $sql= 'update ' . $this->__table_name . ' set ';
-    $sql .= implode('=?, ', array_keys($fields)) . '=? ';
-    $sql .= 'where ' . $this->__primary_key->getName() . '=' . $this->__primary_key->getValue();
-    $this->performQuery($sql, $fields);
-  }
-
-  // ----------
-  // internal helpers
-  // ----------
-  private function performQuery( $sql, $fields ) {
-    $stmt= self::connection()->prepare( $sql );
-    $stmt->populateValues( $fields );
-    $r= $stmt->executeUpdate();
-    $stmt->close();
-    $this->reset();
-    return $r;
-  }
-
-  private function getAffectedFields() {
-    return array_filter( $this->__fields, array($this, '__affectedField') );
-  }
-
-  private function reset() {
-    return array_walk( $this->__fields, array($this,'__notAffected'));
-  }
-
-  // ---------
-  // internal callbacks
-  // ---------
-
-  // callback for array_filter
-  private function __affectedField( SQLField $field ) {
-    return $field->isAffected();
-  }
-  // callback for array_filter
-  private function __pk( SQLField $field ) {
-    return $field->isPk();
-  }
-
-  // callback for array_walk
-  private function __notAffected( SQLField $field ) {
-    if( $field->isAffected() && !$field->isPk() ) $field->setAffected(false);
-  }
-
-  // -----------
-  // static
-  // -----------
-  private static $__connection     = null;
-  private static $__connection_dsn = array();
-  private static $__connection_key = '';
-
-  protected static $__connection_dsn_id = null;
-
-  public static function setConnectionDsn( IConfigurator $config ) {
-    self::$__connection_dsn= $config->getDatabaseDsn( self::$__connection_dsn_id );
-    ksort(self::$__connection_dsn);
-    self::$__connection_key= crc32(serialize( self::$__connection_dsn ));
-  }
-
-  public static function connection() {
-    if( !isset( self::$__connection[self::$__connection_key] ) ) {
-      // todo: load driver connection implementation.
-      $class = new ReflectionClass( SQLConnection::$__drivers[self::$__connection_dsn['phptype']] . 'Connection' );
-      self::$__connection[self::$__connection_key] = $class->newInstance();
-      self::$__connection[self::$__connection_key]->connect( self::$__connection_dsn );
-    }
-    return self::$__connection[self::$__connection_key];
-  }
-
-  public static function find() {
-    throw new MedickException('ActiveRecord::find() must be implemented in child class.');
-  }
-
-  public static function build( SQLBuilder $builder ) {
-    return $builder->execute();
-  }
-
-}
-
-
 // ----------
 // tests :)
 // ----------

Modified: exp/ar5/ar5_base.php
===================================================================
--- exp/ar5/ar5_base.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/ar5_base.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,6 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 error_reporting(E_ALL);
 
@@ -21,6 +22,10 @@
 
 class MedickException extends Exception { }
 
+class SQLException extends MedickException {  }
+
+class ActiveRecordException extends MedickException { }
+
 class Error extends MedickException {
 
   public function __construct($message, $code, $file, $line, $trace) {
@@ -31,6 +36,7 @@
     $this->trace = $trace;
   }
 }
+
 class ErrorHandler extends Object {
   public function ErrorHandler() {  }
   public function raise($errno, $errstr, $errfile, $errline) {
@@ -45,4 +51,3 @@
 }
 
 set_error_handler( array(new ErrorHandler(), 'raise') );
-

Deleted: exp/ar5/ar5_sql.php
===================================================================
--- exp/ar5/ar5_sql.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/ar5_sql.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,21 +0,0 @@
-<?php
-// $Id$
-
-class SQLException extends MedickException {  }
-
-class ActiveRecordException extends MedickException { }
-
-// xxx.
-class SQLType extends Object {
-
-  // sql type to php type
-  public static function getPhpType( $type ) {
-    if( $type == 'integer' || $type == 'int') return 'Integer';
-    else return 'String';
-    // elseif( $type == 'varchar' || $type == 'string' || $type == 'text') return 'String';
-    // elseif( $type == 'timestamp' || $type == 'time' || $type == 'date') return 'Time';
-    // else throw new SQLException('Unknow type: "' . $type . '"');
-  }
-
-}
-

Modified: exp/ar5/conf/aymo.xml
===================================================================
--- exp/ar5/conf/aymo.xml	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/conf/aymo.xml	2007-08-26 18:58:03 UTC (rev 458)
@@ -87,7 +87,7 @@
         <database default="one">
             <dsn id = "one"
                  phptype  = "sqlite"
-                 database = "/W/medick/applications/aymo/db/aymo.sqlite" />
+                 database = "db/aymo.sqlite" />
         </database>
     </environment>
   

Added: exp/ar5/db/import.php
===================================================================
--- exp/ar5/db/import.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/db/import.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,6 @@
+<?php
+// $Id$
+
+$dbh= sqlite_open('db/aymo.sqlite');
+sqlite_query( file_get_contents('db/sqlite.schema'), $dbh );
+  


Property changes on: exp/ar5/db/import.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/libs/active/record/Base.php
===================================================================
--- exp/ar5/libs/active/record/Base.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/Base.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,144 @@
+<?php
+// $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
+
+include_once('active/support/Inflector.php');
+include_once('active/record/SQLType.php');
+include_once('active/record/SQLField.php');
+include_once('active/record/SQLBuilder.php');
+include_once('active/record/SQLCommand.php');
+
+class ActiveRecord extends Object {
+
+  protected $__class_name;
+  protected $__table_name;
+  protected $__fields;
+  protected $__primary_key;
+
+  public function ActiveRecord( $params=array() ) {
+    $this->__class_name  = $this->getClassName();
+    $this->__table_name  = Inflector::tabelize( $this->__class_name );
+    $this->__fields      = ActiveRecord::connection()->getTableInfo( $this->__table_name )->getFields();
+    $this->__primary_key = current( array_filter( $this->__fields, array($this,'__pk') ));
+    foreach($params as $key=>$value) {
+      $this->$key= $value;
+    }
+  }
+
+  // ----------
+  // magick
+  // ----------
+  public function __set($name, $value) {
+    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->alter( $value );
+    throw new ActiveRecordException('No such field "' . $name . '"');
+  }
+
+  public function __get($name) {
+    if( isset($this->__fields[$name]) ) return $this->__fields[$name]->getValue();
+    throw new ActiveRecordException('No such field "' . $name . '"');
+  }
+
+  // ----------
+  // convenient public methods
+  // ----------
+  public function getPrimaryKey() {
+    return $this->__primary_key;
+  }
+
+  // ----------
+  // alter data
+  // ----------
+  public function save() {
+    return $this->__primary_key->isAffected() ? $this->update() : $this->insert();
+  }
+
+  public function insert() {
+    $fields= $this->getAffectedFields();
+    $sql= 'insert into ' . $this->__table_name
+          . ' (' . implode(',', array_keys($fields)) . ')'
+          . ' values (' . substr(str_repeat('?,', count($fields)), 0, -1) . ')';
+    $this->performQuery($sql, $fields);
+    $this->__primary_key->alter( self::connection()->nextId() );
+  }
+
+  public function update() {
+    $fields= $this->getAffectedFields();
+    if( sizeof($fields) < 1 ) return 0; // no harm, primary_key will be always affected, otherwise it will be an insert.
+    $sql= 'update ' . $this->__table_name . ' set ';
+    $sql .= implode('=?, ', array_keys($fields)) . '=? ';
+    $sql .= 'where ' . $this->__primary_key->getName() . '=' . $this->__primary_key->getValue();
+    $this->performQuery($sql, $fields);
+  }
+
+  // ----------
+  // internal helpers
+  // ----------
+  private function performQuery( $sql, $fields ) {
+    $stmt= self::connection()->prepare( $sql );
+    $stmt->populateValues( $fields );
+    $r= $stmt->executeUpdate();
+    $stmt->close();
+    $this->reset();
+    return $r;
+  }
+
+  private function getAffectedFields() {
+    return array_filter( $this->__fields, array($this, '__affectedField') );
+  }
+
+  private function reset() {
+    return array_walk( $this->__fields, array($this,'__notAffected'));
+  }
+
+  // ---------
+  // internal callbacks
+  // ---------
+
+  // callback for array_filter
+  private function __affectedField( SQLField $field ) {
+    return $field->isAffected();
+  }
+  // callback for array_filter
+  private function __pk( SQLField $field ) {
+    return $field->isPk();
+  }
+
+  // callback for array_walk
+  private function __notAffected( SQLField $field ) {
+    if( $field->isAffected() && !$field->isPk() ) $field->setAffected(false);
+  }
+
+  // -----------
+  // static
+  // -----------
+  private static $__connection     = null;
+  private static $__connection_dsn = array();
+  private static $__connection_key = '';
+
+  protected static $__connection_dsn_id = null;
+
+  public static function setConnectionDsn( IConfigurator $config ) {
+    self::$__connection_dsn= $config->getDatabaseDsn( self::$__connection_dsn_id );
+    ksort(self::$__connection_dsn);
+    self::$__connection_key= crc32(serialize( self::$__connection_dsn ));
+  }
+
+  public static function connection() {
+    if( !isset( self::$__connection[self::$__connection_key] ) ) {
+      // todo: load driver connection implementation.
+      $class = new ReflectionClass( SQLConnection::$__drivers[self::$__connection_dsn['phptype']] . 'Connection' );
+      self::$__connection[self::$__connection_key] = $class->newInstance();
+      self::$__connection[self::$__connection_key]->connect( self::$__connection_dsn );
+    }
+    return self::$__connection[self::$__connection_key];
+  }
+
+  public static function find() {
+    throw new MedickException('ActiveRecord::find() must be implemented in child class.');
+  }
+
+  public static function build( SQLBuilder $builder ) {
+    return $builder->execute();
+  }
+
+}


Property changes on: exp/ar5/libs/active/record/Base.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/QueryBuilder.php
===================================================================
--- exp/ar5/libs/active/record/QueryBuilder.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/QueryBuilder.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,7 @@
 <?php
-
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
+// BC 
 class QueryBuilder extends SQLBuilder {	}
+

Modified: exp/ar5/libs/active/record/SQLBuilder.php
===================================================================
--- exp/ar5/libs/active/record/SQLBuilder.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/SQLBuilder.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,36 +1,6 @@
 <?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 - 2007 Aurelian Oancea < aurelian [ at ] locknet [ dot ] ro >
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Aurelian Oancea nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
 // $Id$
-//
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 /**
  * It knows how to create an SQLCommand from an array
@@ -74,8 +44,6 @@
  *    4.2. User::find( 'first', array('condition'=>'id > ?'), array(5));
  *    // select * from users where id > 5 limit 1; 
  *
- * @package medick.active.record
- * @author Aurelian Oancea
  */
 class SQLBuilder extends Object {
 
@@ -164,15 +132,6 @@
     public function getOwner() {
         return $this->owner;
     }
-    
-    /**
-     * It creates an instance of the owner
-     *
-     * @return ReflectionClass
-     */ 
-    // public function getOwnerClass() {
-    //     return ActiveRecord::reflect_class( $this->owner );
-    // }
 
     /**
      * It gets the current list of bindings
@@ -223,18 +182,11 @@
         return $command;
     }
 
-
     public function execute() {
-      // 1.
+      // 1. create a statement
       $stmt= ActiveRecord::connection()->prepare( $this->compile()->getQueryString() );
-
       // 2. one or more?
       return $stmt->getAllRecords( $this->bindings, new ReflectionClass( $this->owner ) );
-
-      $rs= $stmt->executeQuery( $this->bindings );
-      return $rs;
-      // 2.
-      return array();
     }
 
 }

Modified: exp/ar5/libs/active/record/SQLCommand.php
===================================================================
--- exp/ar5/libs/active/record/SQLCommand.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/SQLCommand.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,36 +1,6 @@
 <?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 - 2007 Oancea Aurelian < aurelian [ at ] locknet [ dot ] ro >
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
 // $Id$
-//
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 /**
  * It represents an sql command
@@ -140,3 +110,4 @@
     }
 
 }
+

Modified: exp/ar5/libs/active/record/SQLField.php
===================================================================
--- exp/ar5/libs/active/record/SQLField.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/SQLField.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,6 +1,6 @@
 <?php
-
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 class SQLField extends Object {
 

Added: exp/ar5/libs/active/record/SQLType.php
===================================================================
--- exp/ar5/libs/active/record/SQLType.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/SQLType.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,17 @@
+<?php
+// $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
+
+class SQLType extends Object {
+
+  // sql type to php type
+  public static function getPhpType( $type ) {
+    if( $type == 'integer' || $type == 'int') return 'Integer';
+    else return 'String';
+    // elseif( $type == 'varchar' || $type == 'string' || $type == 'text') return 'String';
+    // elseif( $type == 'timestamp' || $type == 'time' || $type == 'date') return 'Time';
+    // else throw new SQLException('Unknow type: "' . $type . '"');
+  }
+
+}
+


Property changes on: exp/ar5/libs/active/record/SQLType.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,27 +1,47 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 abstract class SQLConnection extends Object {
 
-  /** @var array 
-   */
+  // @var array known drivers
   public static $__drivers= array('sqlite'=>'SQLite');
+  
+  // @var resource
+  protected $resource; 
 
-  protected $resource; 
-  
+  // @var string the database
   protected $database;
-  
+
+  // @var string the last executed query
   protected $lastQuery;
 
-  // return int
+  /**
+   * Executes an update
+   *
+   * @param string the sql string to execute
+   *
+   * @return int
+   */ 
   public function executeUpdate( $sql ) {
     return $this->getUpdateCount( $this->exec( $sql ) );
   }
-
+  
+  /**
+   * Gets the database
+   *
+   * @return string string
+   */ 
   public function getDatabase() { 
     return $this->database;
   }
-  
+
+  /**
+   * Sets the database
+   * 
+   * @param string database to use
+   * @return void
+   */ 
   public function setDatabase( $database ) { 
     $this->database=$database;
   }
@@ -61,5 +81,3 @@
   
 }
 
-
-

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,6 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 abstract class SQLPreparedStatement extends Object {
 

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLResultSet.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,6 +1,6 @@
 <?php
-
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 abstract class SQLResultSet extends Object implements ArrayAccess {
 

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLTableInfo.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,5 +1,6 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
 abstract class SQLTableInfo extends Object {
 

Modified: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
===================================================================
--- exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -1,6 +1,13 @@
 <?php
 // $Id$
+// This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
+// abstract hooks
+include_once('active/record/drivers/abstract/SQLConnection.php');
+include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
+include_once('active/record/drivers/abstract/SQLResultSet.php');
+include_once('active/record/drivers/abstract/SQLTableInfo.php');
+
 class SQLiteRecordsIterator extends Object implements Iterator {
 
   private $result;

Modified: exp/ar5/libs/context/configurator/IConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/IConfigurator.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/context/configurator/IConfigurator.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -70,5 +70,7 @@
      * @return string, Logger formatter name eg. FooFormatter.
      */
     function getLoggerFormatter();
+    
+    function getDatabaseDsn($id=false);
 
 }

Modified: exp/ar5/libs/context/configurator/XMLConfigurator.php
===================================================================
--- exp/ar5/libs/context/configurator/XMLConfigurator.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/libs/context/configurator/XMLConfigurator.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -120,7 +120,7 @@
      * </code>
      * @see IConfigurator::getDatabaseDsn()
      */
-    public function getDatabaseDsn($id = FALSE) {
+    public function getDatabaseDsn($id = false) {
         if (!$id) $id = $this->sxe->database['default'];
         foreach( $this->sxe->database->dsn as  $dsn ) {
             if( trim($dsn['id']) == trim($id) ){

Added: exp/ar5/test/libs/st-1.0.1beta2.tar.bz2
===================================================================
(Binary files differ)


Property changes on: exp/ar5/test/libs/st-1.0.1beta2.tar.bz2
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: exp/ar5/test/mock/configurator.php
===================================================================
--- exp/ar5/test/mock/configurator.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/test/mock/configurator.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,16 @@
+<?php
+// $Id$
+
+include_once('context/configurator/IConfigurator.php');
+
+class MockConfigurator extends Object implements IConfigurator {  
+  
+  function getLoggerOutputters() { return array(); }
+  
+  function getLoggerFormatter() { return ''; }
+  
+  function getDatabaseDsn($id=false) {
+    return array('phptype'=>'mock');
+  }
+  
+}


Property changes on: exp/ar5/test/mock/configurator.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/test/mock/driver.php
===================================================================
--- exp/ar5/test/mock/driver.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/test/mock/driver.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,28 @@
+<?php
+// $Id$
+
+// abstract hooks
+include_once('active/record/drivers/abstract/SQLConnection.php');
+include_once('active/record/drivers/abstract/SQLPreparedStatement.php');
+include_once('active/record/drivers/abstract/SQLResultSet.php');
+include_once('active/record/drivers/abstract/SQLTableInfo.php');
+
+class MockConnection extends SQLConnection {
+  
+  public function connect(Array $dsn=array()) {
+    return true;
+  }
+  
+  public function close() {
+    return true;
+  }
+  
+  public function nextId() {
+    
+  }
+  
+  public function getLastErrorMessage() {
+    return 'mock.';
+  }
+  
+}


Property changes on: exp/ar5/test/mock/driver.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: exp/ar5/test/runner.php
===================================================================
--- exp/ar5/test/runner.php	2007-08-24 14:37:39 UTC (rev 457)
+++ exp/ar5/test/runner.php	2007-08-26 18:58:03 UTC (rev 458)
@@ -0,0 +1,31 @@
+<?php
+// $Id: $
+
+set_include_path('../libs:libs');
+
+include_once('simpletest/unit_tester.php');
+include_once('simpletest/reporter.php');
+
+include_once('../ar5_base.php');
+
+include_once('mock/configurator.php');
+include_once('mock/driver.php');
+
+// include_once('context/configurator/XMLConfigurator.php');
+
+include_once('active/record/drivers/sqlite/sqlite.php');
+
+include_once('active/record/Base.php');
+
+$config= new MockConfigurator();
+
+class TestSetup extends UnitTestCase {
+  
+  function testTrue() {
+    
+  }
+  
+}
+
+$test = new TestSetup();
+$test->run(new TextReporter());



From aurelian at mail.berlios.de  Sun Aug 26 21:05:13 2007
From: aurelian at mail.berlios.de (aurelian at BerliOS)
Date: Sun, 26 Aug 2007 21:05:13 +0200
Subject: [Medick-svn] r459 - exp/ar5
Message-ID: <200708261905.l7QJ5DOC010327@sheep.berlios.de>

Author: aurelian
Date: 2007-08-26 21:05:12 +0200 (Sun, 26 Aug 2007)
New Revision: 459

Modified:
   exp/ar5/ar5.php
Log:
 -- ups, removed a wrong include

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-26 18:58:03 UTC (rev 458)
+++ exp/ar5/ar5.php	2007-08-26 19:05:12 UTC (rev 459)
@@ -4,16 +4,13 @@
 
 set_include_path('libs');
 
-// medick base stuff
+// Medick base stuff
 include_once('ar5_base.php');
-// not yet ported classes
-include_once('ar5_sql.php');
-// medick trunk ported classes
+// Medick trunk ported classes
 include_once('context/configurator/XMLConfigurator.php');
-
-// driver
+// Driver
 include_once('active/record/drivers/sqlite/sqlite.php');
-
+// ActiveRecord
 include_once('active/record/Base.php');
 
 // ----------
@@ -24,7 +21,7 @@
 
   public static function find() {
     $args= func_get_args();
-    return ActiveRecord::build(new SQLBuilder(__CLASS__, $args));
+    return ActiveRecord::build( new SQLBuilder( __CLASS__, $args ) );
   }
 
 }



From aurelian at mail.berlios.de  Tue Aug 28 16:29:31 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Tue, 28 Aug 2007 16:29:31 +0200
Subject: [Medick-svn] r460 - in exp/ar5: . test/mock
Message-ID: <200708281429.l7SETVbO001818@sheep.berlios.de>

Author: aurelian
Date: 2007-08-28 16:29:29 +0200 (Tue, 28 Aug 2007)
New Revision: 460

Modified:
   exp/ar5/README
   exp/ar5/test/mock/driver.php
Log:
 -- updated README + more mocks

Modified: exp/ar5/README
===================================================================
--- exp/ar5/README	2007-08-26 19:05:12 UTC (rev 459)
+++ exp/ar5/README	2007-08-28 14:29:29 UTC (rev 460)
@@ -5,7 +5,7 @@
 
 This Medick experiment is licensed under BSD Licence, see LICENSE for details.
 
-Status:
+Done:
   -> removed Creole
   -> SQLConnection -> database connection class
   -> SQLTableInfo -> metadata for database tables
@@ -21,8 +21,14 @@
   -> ActiveRecord: base find
 
 Todo:
+  -> port Logger
+  -> add MTimer to logs
+  -> SQL Limit/Offset
+  -> ActiveRecord: advanced find(see SQLBuilder comments)
   -> ActiveRecord: filters
   -> ActiveRecord: validators
+  -> ActiveRecord: find with array --> User::find( array(1,2,3,4), $clauses, $bindings )
+  -> SQL Transactions
   -> Driver: MySQL
   -> Driver: MySQLi
   -> Driver: PostgreSQL
@@ -31,5 +37,6 @@
 Unit Tests:
   -> setup simpletest, a runner
   -> setup mocks for accessing data
+  -> test1. sqlbuilder with mock-sql
   -> active record tests.
 

Modified: exp/ar5/test/mock/driver.php
===================================================================
--- exp/ar5/test/mock/driver.php	2007-08-26 19:05:12 UTC (rev 459)
+++ exp/ar5/test/mock/driver.php	2007-08-28 14:29:29 UTC (rev 460)
@@ -7,6 +7,10 @@
 include_once('active/record/drivers/abstract/SQLResultSet.php');
 include_once('active/record/drivers/abstract/SQLTableInfo.php');
 
+class MocTableInfo extends SQLTableInfo {
+
+}
+
 class MockConnection extends SQLConnection {
   
   public function connect(Array $dsn=array()) {
@@ -24,5 +28,25 @@
   public function getLastErrorMessage() {
     return 'mock.';
   }
+
+  public function getTableInfo($name, $force=false) {
+    return new MockTableInfo($name, $this);
+  }
+
+  public function execute( $sql ) {
+
+  }
+
+  public function exec( $sql ) {
+
+  }
+
+  public function getUpdateCount($rs=null) {
+
+  }
+
+  public function prepare( $sql ) {
+    return new MockPreparedStatement($sql, $this);
+  }
   
 }



From aurelian at mail.berlios.de  Fri Aug 31 11:47:12 2007
From: aurelian at mail.berlios.de (aurelian at mail.berlios.de)
Date: Fri, 31 Aug 2007 11:47:12 +0200
Subject: [Medick-svn] r461 - in exp/ar5: . libs/active/record
	libs/active/record/drivers/abstract
	libs/active/record/drivers/sqlite
Message-ID: <200708310947.l7V9lCPX008510@sheep.berlios.de>

Author: aurelian
Date: 2007-08-31 11:47:09 +0200 (Fri, 31 Aug 2007)
New Revision: 461

Modified:
   exp/ar5/ar5.php
   exp/ar5/libs/active/record/SQLBuilder.php
   exp/ar5/libs/active/record/SQLCommand.php
   exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
   exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
   exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
Log:
 -- more stuff.

Modified: exp/ar5/ar5.php
===================================================================
--- exp/ar5/ar5.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/ar5.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -45,7 +45,6 @@
 $user->password= md5('bau-bau');
 $user->save();
 
-
 $users= User::find();
 
 foreach($users as $user) {
@@ -53,4 +52,7 @@
   echo '[ ' . $user->id . ' ]> ' . $user->firstname . "\n";
 }
 
+$user= User::find(155);
+echo 'User: ' . $user->id . ' ' . $user->firstname . " " . $user->created_at . "\n";
+
 ?>

Modified: exp/ar5/libs/active/record/SQLBuilder.php
===================================================================
--- exp/ar5/libs/active/record/SQLBuilder.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/libs/active/record/SQLBuilder.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -5,16 +5,16 @@
 /**
  * It knows how to create an SQLCommand from an array
  *
- *
  * Arguments:
  *
  *  1. Simple, no argument:
- *    1.1 User::find(); // select * from users; // => RowsAggregate
+ *    1.1 User::find(); // select * from users; // => Rows
  *
  *  2. Simple, one Argument
- *    2.1. User::find( 'all' ); // => select * from users; // => RowsAggregate
+ *    2.1. User::find( 'all' ); // => select * from users; // => Rows
  *    2.2. User::find( 'first' ); // => select * from users limit 1; // => ActiveRecord
- *    2.3. User::find( 1 ); // => select * fro users where id=1; // => ActiveRecord
+ *    2.3. User::find( 155 ); // => select * from users where id=155; // => ActiveRecord
+ *    2.4. User::find( array(1,2,5) ); // => select * from users where id in (1,2,5) // => Rows
  *
  *  3. Clauses, one simple argument (see 2) and an array as the second one
  *    3.1. User::find( 'all', array( 'condition' => "name='Peter'" )); 
@@ -93,6 +93,9 @@
         if (isset($arguments[0]) && is_numeric($arguments[0])) {
             $this->clauses['condition']='id=?';
             $this->bindings[]=$arguments[0];
+            // $this->type= 'first';
+            // $this->limit= -1;
+            // $this->offset= -1;
         }
         if (isset($arguments[1])) {
             $this->clauses= $arguments[1];
@@ -184,9 +187,18 @@
 
     public function execute() {
       // 1. create a statement
-      $stmt= ActiveRecord::connection()->prepare( $this->compile()->getQueryString() );
-      // 2. one or more?
-      return $stmt->getAllRecords( $this->bindings, new ReflectionClass( $this->owner ) );
+      $stmt= ActiveRecord::connection()->prepare( $this->compile()->toSQL() );
+      $stmt->setLimit( $this->limit );
+      $stmt->setOffset( $this->offset );
+
+      // 2. reflect on owner
+      $clazz = new ReflectionClass( $this->owner );
+      // 3. return stuff.
+      if($this->type=='all') {
+        return $stmt->getAllRecords( $this->bindings, $clazz );
+      } else {
+        return $clazz->newInstance( $stmt->executeQuery( $this->bindings )->next()->getRow() );
+      }
     }
 
 }

Modified: exp/ar5/libs/active/record/SQLCommand.php
===================================================================
--- exp/ar5/libs/active/record/SQLCommand.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/libs/active/record/SQLCommand.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -9,7 +9,7 @@
  * <code>
  *  $command= SQLCommand::select()->from('news')->where('state=?')->orderBy('created_at');
  * // later, you can use a PreparedStatement to bind parameters.
- *  $stmt= $conn->prepareStatement($command->getQueryString());
+ *  $stmt= $conn->prepareStatement($command->toSQL());
  *  $stmt->setInt(1, News::PUBLISHED);
  *  $rs= $stmt->executeQuery();
  * </code>
@@ -67,7 +67,7 @@
         return $this;
     }
     
-    public function getQueryString() {
+    public function toSQL() {
         $query= $this->command . " ";
         // if ($this->distinct) $query .= "distinct ";
         $query .= $this->appendColumns();

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLConnection.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -2,6 +2,13 @@
 // $Id$
 // This file is part of ActiveRecord5, a Medick (http://medick.locknet.ro) Experiment
 
+/**
+ * Drivers Authors notes:
+ *  -> remember to set lastQuery in exec
+ *
+ */
+
+
 abstract class SQLConnection extends Object {
 
   // @var array known drivers
@@ -10,7 +17,7 @@
   // @var resource
   protected $resource; 
 
-  // @var string the database
+  // @var string the database name
   protected $database;
 
   // @var string the last executed query
@@ -21,7 +28,7 @@
    *
    * @param string the sql string to execute
    *
-   * @return int
+   * @return int number of affected rows
    */ 
   public function executeUpdate( $sql ) {
     return $this->getUpdateCount( $this->exec( $sql ) );
@@ -46,16 +53,28 @@
     $this->database=$database;
   }
 
+  /**
+   * It gets the resource
+   *
+   * @return resource the PHP resource type
+   */ 
   public function getResource() { 
     return $this->resource;
   }
 
+  /**
+   * Gets the last *executed* sql query
+   *
+   * @return string
+   */ 
   public function getLastQuery() { 
     return $this->lastQuery;
   }
 
+  // return self
   abstract public function connect( Array $dsn= array() );
-
+  
+  // return void
   abstract public function close(); 
 
   // return int
@@ -78,6 +97,8 @@
   
   // return int
   abstract public function getUpdateCount( $rs=null );
-  
+
+  // retrun void
+  abstract public function applyLimit(&$sql, $limit, $offset);
 }
 

Modified: exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php
===================================================================
--- exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/libs/active/record/drivers/abstract/SQLPreparedStatement.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -6,6 +6,10 @@
 
   protected $conn, $sql;
 
+  protected $limit= -1;
+
+  protected $offset= -1;
+
   protected $positions=0;
   protected $positionsCount=0;
   protected $sql_cache='';
@@ -74,7 +78,8 @@
    * @return string New SQL statement with parameters replaced.
    * @throws SQLException - if param not bound.
    */
-  protected function replaceParams() {
+  protected function replaceParams(Array $params= array()) {
+    $this->setupParams($params);
     // early out if we still have the same query ready
     if ( $this->sql_cache_valid === true ) return $this->sql_cache;
     // Default behavior for this function is to behave in 'emulated' mode.    
@@ -111,8 +116,14 @@
   }
 
   // todo
-  public function set($idx, $value) {
-    var_dump(gettype($value));
+  public function set( $idx, $value ) {
+    $t= gettype($value);
+    switch($t) {
+      case "integer":
+        return $this->setInteger($idx, $value);
+      default:
+        throw new MedickException(__METHOD__ . " not implemented for type: ".$t." !");
+    }
   }
 
   public function populateValues(Array $fields) {
@@ -122,14 +133,24 @@
     }
   }
 
+  public function setLimit($limit) {
+    $this->limit= $limit;
+  }
+
+  public function setOffset($offset) {
+    $this->offset= $offset;
+  }
+
   public function executeQuery(Array $params= array()) {
-    $this->setupParams($params);
-    return $this->conn->execute( $this->replaceParams() );
+    $sql= $this->replaceParams($params);
+    if ($this->limit > 0 || $this->offset > 0) {
+      $this->conn->applyLimit($sql, $this->limit, $this->offset);
+    }
+    return $this->conn->execute( $sql );
   }
 
   public function getAllRecords(Array $params=array(), ReflectionClass $record) {
-    $this->setupParams( $params );
-    $result= $this->conn->exec( $this->replaceParams() );
+    $result= $this->conn->exec( $this->replaceParams($params) );
     return $this->getRecordsIterator( $result, $record );
 
   }
@@ -138,8 +159,7 @@
     return $this->conn->executeUpdate( $this->replaceParams() );
   }
 
-  public function close() {
-
+  public function close() {  
   }
 
   private function setupParams(Array $params=array()) {
@@ -150,7 +170,7 @@
     }
   }
 
-  abstract protected function escape( $value );
+  abstract public function escape( $value );
 
   abstract protected function getRecordsIterator( $results, ReflectionClass $class );
 

Modified: exp/ar5/libs/active/record/drivers/sqlite/sqlite.php
===================================================================
--- exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-28 14:29:29 UTC (rev 460)
+++ exp/ar5/libs/active/record/drivers/sqlite/sqlite.php	2007-08-31 09:47:09 UTC (rev 461)
@@ -50,7 +50,7 @@
 
   public function next() {
     $this->row= sqlite_fetch_array( $this->result, SQLITE_ASSOC );
-    return (bool)$this->row;
+    return $this->row ? $this : false;
   }
 
 }
@@ -84,7 +84,7 @@
 
 class SQLitePreparedStatement extends SQLPreparedStatement {
 
-  protected function escape( $value ) {
+  public function escape( $value ) {
     return sqlite_escape_string( $value );
   }
 
@@ -103,10 +103,12 @@
     } catch (Error $err) {
       throw new SQLException( $err->getMessage() );
     }
+    return $this;
   }
 
   public function exec( $sql ) {
-   $this->lastQuery= $sql;
+    $this->lastQuery= $sql;
+    echo "query: " . $sql . "\n";
     try {
       return sqlite_query( $this->resource, $this->lastQuery, SQLITE_ASSOC );
     } catch (Error $err) {
@@ -149,5 +151,13 @@
     return new SQLitePreparedStatement($this, $sql);
   }
 
+  public function applyLimit(&$sql, $limit, $offset) {
+    if ( $limit > 0 ) {
+      $sql .= " limit " . $limit . ($offset > 0 ? " offset " . $offset : "");
+    } elseif ( $offset > 0 ) {
+            $sql .= " limit -1 offset " . $offset;
+    }
+  }
+
 }
 



