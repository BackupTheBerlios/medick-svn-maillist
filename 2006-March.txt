From aurelian at berlios.de  Wed Mar  1 20:45:21 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Wed, 1 Mar 2006 20:45:21 +0100
Subject: [Medick-svn] r365 - applications/eltodo/conf trunk/libs/action/controller trunk/libs/action/controller/http trunk/test/mock trunk/test/test/action/controller
Message-ID: <200603011945.k21JjLXm030062@sheep.berlios.de>

Author: aurelian
Date: 2006-03-01 20:44:55 +0100 (Wed, 01 Mar 2006)
New Revision: 365

Modified:
   applications/eltodo/conf/eltodo.routes.php
   trunk/libs/action/controller/Request.php
   trunk/libs/action/controller/Route.php
   trunk/libs/action/controller/Routing.php
   trunk/libs/action/controller/http/HTTPRequest.php
   trunk/test/mock/MockRequest.php
   trunk/test/test/action/controller/RoutingTest.php
Log:
 -- working on named Routes and dymanic Routes Components

Modified: applications/eltodo/conf/eltodo.routes.php
===================================================================
--- applications/eltodo/conf/eltodo.routes.php	2006-02-27 20:56:33 UTC (rev 364)
+++ applications/eltodo/conf/eltodo.routes.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -3,6 +3,7 @@
 // $Id$
 
 $map= Map::getInstance();
+$map->add(new Route('/project/all', Route::WELCOME, array('controller'=>'project', 'action'=>'all')));
 $map->add(new Route(':controller/:action/:id'));
 
 ?>

Modified: trunk/libs/action/controller/Request.php
===================================================================
--- trunk/libs/action/controller/Request.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/libs/action/controller/Request.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -43,11 +43,14 @@
         current request parameters */
     private $params = array();
 
-    /** Hidden Constructor */
+    /** 
+     * Hidden Constructor 
+     */
     protected function Request() {  }
 
     /**
-     * It gets the param
+     * It gets a Request Parameter
+     * 
      * @param mixed, param, the paremeter name
      * @return the param value of NULL if this param was not passed with this Resuest
      */
@@ -57,6 +60,7 @@
 
     /**
      * Check if the current Request has the parameter with the specified name
+     * 
      * @param string param_name the parameter name
      * @return bool TRUE if the parameter_name is included in this request, FALSE otherwise
      */
@@ -66,6 +70,7 @@
 
     /**
      * It gets all the parameters of this Request
+     * 
      * @return array this request parameters.
      */
     public function getParameters() {
@@ -73,7 +78,8 @@
     }
 
     /**
-     * It sets a param.
+     * It sets a Request Parameter
+     *
      * @param string, name, the name of the param to set
      * @param mixed, value, value of the param
      * @return void
@@ -83,6 +89,18 @@
     }
 
     /**
+     * It adds an array of parameters on this Request
+     *
+     * @param array parameters, parameters name/value pairs
+     * @return void
+     */ 
+    public function setParameters(/*Array*/ $parameters=array()) {
+        foreach ($parameters as $name=>$value) {
+            $this->setParameter($name, $value);
+        }
+    }
+    
+    /**
      * Gets a string representation of this Object
      *
      * @return string

Modified: trunk/libs/action/controller/Route.php
===================================================================
--- trunk/libs/action/controller/Route.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/libs/action/controller/Route.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -35,24 +35,42 @@
 /**
  * A Route Component
  *
- * @package locknet7.action.controller.route
+ * @see locknet7.action.controller.Route
+ * @package locknet7.action.controller
  */
 class Component extends Object {
 
+    /** @var string
+        the component name */
     private $name;
 
+    /** @var boolean
+        true if this is a dynamic component */
     private $dynamic;
 
-    private $position;
-
+    /**
+     * Creates a new Route Component with the given name
+     *
+     * @param string name the component name
+     */ 
     public function Component($name) {
         $this->name= $name;
     }
 
+    /**
+     * It gets this component name
+     *
+     * @return string
+     */ 
     public function getName() {
         return $this->name;
     }
 
+    /**
+     * Mark this component as dynamic
+     *
+     * @param boolean dynamic
+     */ 
     public function setDynamic($dynamic) {
         $this->dynamic= (bool)$dynamic;
     }
@@ -60,34 +78,56 @@
     public function isDynamic() {
         return $this->dynamic;
     }
-
-    public function setPosition($position) {
-        $this->position= (int)$position;
-    }
-
-    public function getPosition() {
-        return $this->position;
-    }
-
+    
     public function toString() {
-        return sprintf('{%s}--->name=%s[dynamic=%s]', $this->getClassName(), $this->name, $this->dynamic ? 'TRUE':'FALSE');
+        return sprintf('{%s}-->name=%s[dynamic=%s]', $this->getClassName(), $this->name, $this->dynamic ? 'TRUE':'FALSE');
     }
 
 }
 
 /**
  * Route class.
+ * 
+ * A Route resolves the incoming Request URI to a known Controller/Action,
+ * also, it will merge Route Components Names to Request parameters
+ * Usually, a Map holds the Route Definitions for an Web Application
+ * and the Recogition is performed inside the ActionControllerRouting::recognize(Request $request) method
+ * Routes are defined inside __APPLICATION__PATH/conf/__APPLICATION__NAME__.routes.php file,
+ * a plain php code file
  *
- * @package locknet7.action.controller.route
+ * @see locknet7.action.controller.Map
+ * @see locknet7.action.controller.Routing
+ * @see locknet7.action.controller.Component
+ *
+ * @TODO:
+ *      -> Route Requirements
+ * 
+ * @package locknet7.action.controller
  */
 class Route extends Object {
 
+    // {{{ predefined Route Names
+    // default route name
+    const AUTO     = 0x000;
+    // welcome route, it`s used as an entry point of the application
     const WELCOME  = 0x200;
-
+    // used when you want to write your custom error route
     const ERROR    = 0x500;
-
+    // used when the page is not found
     const NOTFOUND = 0x400;
-
+    // }}}
+    
+    /** @var array
+        this route parameters witch will be merged to request parameters */ 
+    private $merges=array();
+    
+    /** @var array
+        cheap cache, this way we can remove request parameters 
+        between 2 route recogitions */
+    static private $old_merges= array();
+    
+    static private $old_defaults= array();
+    
     /** @var string
         incoming Route Definition list. */
     private $route_list;
@@ -96,6 +136,12 @@
         a list with default values */
     private $defaults;
 
+    /** @var bool
+        flag to indicate that this route is loaded.
+        on initial phase, we will use this flag for knowing 
+        if we already loaded the defaults values */
+    private $isLoaded;
+    
     /** @var string
         the route name */
     private $name;
@@ -113,19 +159,27 @@
      *
      * @param string route_list the route list
      * @param string name route name
-     * @param array
+     * @param array defaults a list of defaults values
+     * @param array requirements the route requirements
      */
     public function Route($route_list, $name = '', /*Array*/ $defaults = array(), /*Array*/ $requirements = array()) {
-
         $this->components = new Collection();
         $this->route_list = $route_list;
         $this->defaults   = $defaults;
-        $this->name       = $name;
-
+        $this->name       = $name==''?Route::AUTO:$name;
+        $this->isLoaded   = false;
+        $this->loadComponents();
+    }
+    
+    /**
+     * Helper Method for loading the Route Components
+     * 
+     * @return void
+     */ 
+    private function loadComponents() {
         $parts= explode('/', trim($this->route_list, '/'));
 
         foreach ($parts as $key=>$element) {
-            // Registry::get('__logger')->debug('Parts:: [' . $key . '] '. $element);
             if (preg_match('/:[a-z0-9_\-]+/',$element, $match)) {
                 $c= new Component(substr(trim($match[0]), 1));
                 $c->setDynamic(TRUE);
@@ -133,14 +187,15 @@
                 $c= new Component($element);
                 $c->setDynamic(FALSE);
             }
-            $c->setPosition($key);
+            // $c->setPosition($key);
             $this->components->add($c);
         }
     }
 
     /**
      * It gets the name of this Route.
-     *
+     * 
+     * @see: locknet7.action.controller.Route#getNameToHuman
      * @return string name.
      */
     public function getName() {
@@ -161,72 +216,164 @@
      *
      * @param array an array witch holds defaults values for this Route.
      */
-    public function setDefaults(/*Array*/ $defaults) {
+    public function setDefaults(/*Array*/ $defaults=array()) {
         $this->defaults= $defaults;
     }
-
-    // match the current Route against incoming URL.
+    
+    /**
+     * Adds only a default pair name/value on to the defaults
+     *
+     * @param string name
+     * @param string value
+     */ 
+    public function setDefault($name, $value) {
+        $this->defaults[$name]= $value;
+    }
+    
+    /**
+     * Gets this Route List Definition
+     *
+     * @return string the route list definition
+     */ 
+    public function getRouteList() {
+        return $this->route_list;
+    }
+    
+    /**
+     * It gets a human readable route name for predefined Route Names
+     *
+     * @return string the route name
+     */ 
+    public function getNameToHuman() {
+        switch ($this->name) {
+            case Route::NOTFOUND:
+                return 'NOTFOUND';
+            case Route::ERROR:
+                return 'ERROR';
+            case Route::WELCOME:
+                return 'WELCOME';
+            case Route::AUTO:
+                return 'AUTO';
+            default:
+                return $this->name;
+        }
+    }
+    
+    // match the current Route against incoming URI.
     // @TODO: refactor.
     // @return bool
     public function match(Request $request) {
-        $parts= $request->getPathInfoParts();
-
-        // also if we have more parameters passed, as expected.
-        if ( count($parts) > $this->components->size()) {
-            return FALSE;
+        $parts= $request->getUriParts();
+        
+        // if we have more parameters passed, as expected.
+        if (count($parts) > $this->components->size()) {
+            return false;
         }
         // if / was requested, just skip this part.
         if ( count($parts) != 0 ) {
             $it= $this->components->iterator();
+            $this->merges= array();
             while($it->hasNext()) {
-                $name= $it->next()->getName();
-
+                $component = $it->next();
                 if (isset($parts[$it->key()])) {
-
-                    if (FALSE===strpos($parts[$it->key()], '.html')) {
-                        $part= $parts[$it->key()];
+                    if (!$component->isDynamic() && $component->getName() != $this->ignoreExtension($parts[$it->key()]) ) {
+                        return false;
                     } else {
-                        list($part)= explode('.', $parts[$it->key()]);
+                        $this->merges[$component->getName()] = $this->ignoreExtension($parts[$it->key()]);
                     }
-                    $request->setParameter($name, $part);
                 }
-
             }
         }
+    
+        // preparing to return true.
+        $this->doMerge($request);
+        $this->load($request);
+        return true;
+    }
 
-        // more to be done.
+    /**
+     * Helper method, will remove everithing after . in parts
+     * 
+     * @param string
+     * @return string
+     */ 
+    private function ignoreExtension($on) {
+        if (false === strpos($on, '.html')) {
+            $part = $on;
+        } else {
+            list($part)= explode('.', $on);
+        }
+        return $part;
+    }
+    
+    /**
+     * Merges this Route Parameters into Request Parameters
+     *
+     * @param Request, request, the request on witch we want to merge
+     */ 
+    private function doMerge(Request $request) {
+        foreach ($this->merges as $name=>$value) {
+            if (isset(Route::$old_merges[$name])) unset(Route::$old_merges[$name]);
+            $request->setParameter($name, $value);
+        }
+        // discard previously route parameters.
+        foreach (Route::$old_merges as $name=>$value) {
+            $request->setParameter($name, NULL);
+        }
+        // cache merged parameters  
+        Route::$old_merges= $this->merges;
+    }
 
+    /**
+     * Trigger method to load defaults values and for setting a propper action and controller
+     */ 
+    private function load(Request $request) {
+        $this->loadDefaults($request);
+        $this->loadActionAndController($request);
+        $this->isLoaded= true;
+    }
+    
+    private function loadDefaults(Request $request) {
+        // var_dump(Route::$old_defaults);
+        foreach ($this->defaults as $name=>$value) {
+            if (isset(Route::$old_defaults[$name])) unset(Route::$old_defaults[$name]);
+            $request->setParameter($name, $value);
+        }
+        foreach (Route::$old_defaults as $name=>$value) {
+            $request->setParameter($name, NULL);
+        }
+        Route::$old_defaults= $this->defaults;
+        // var_dump(Route::$old_defaults);
+    }
+    
+    /**
+     * Loads Special Parameters: Controller and Action
+     *
+     * @throws RoutingException if a controller cannot be resolved for this route
+     */ 
+    private function loadActionAndController(Request $request) {
         // check if we have a controller.
-        if (!$request->hasParameter('controller')) {
-            if (array_key_exists('controller', $this->defaults)) {
-                $request->setParameter('controller', $this->defaults['controller']);
-            } else { // we don`t have a controller for this route (?), exit.
-                return FALSE;
-            }
+        if (!$request->hasParameter('controller') && !$request->getParameter('controller')) {
+            throw new RoutingException('Cannot Resolve A Controller for this Route!');
         }
-
         // check for an action
         if (!$request->hasParameter('action')) {
-            if (array_key_exists('action', $this->defaults)) {
-                $request->setParameter('action', $this->defaults['action']);
-            } else {
-                $request->setParameter('action','index');
-            }
+            $request->setParameter('action','index');
         }
-
-        $this->controller= $request->getParameter('controller');
-        Registry::get('__logger')->debug($this->toString());
-        return TRUE;
     }
-
-    public function createControllerInstance() {
-        if ($this->controller === NULL) {
-            throw new RoutingException('Cannot resolve a controller for this Route!');
-        }
+    
+    /**
+     * Creates a Controller Instance
+     *
+     * @return ActionControllerBase
+     */ 
+    public function createControllerInstance(Request $request) {
+        if (!$this->isLoaded) $this->load($request);
         try {
-            return Registry::put(new Injector(), '__injector')->inject('controller', $this->controller);
+            Registry::get('__logger')->debug($this->toString());
+            return Registry::put(new Injector(), '__injector')->inject('controller', $request->getParameter('controller'));
         } catch (FileNotFoundException $fnfEx) {
-            throw new RoutingException('Cannot create a controller instance,' . $fnfEx->getMessage());
+            throw new RoutingException('Cannot create a controller instance, ' . $fnfEx->getMessage());
         }
     }
     
@@ -236,7 +383,7 @@
      * @return string
      */ 
     public function toString() {
-        return "{".$this->getClassName()."}-->{$this->route_list}";
+        return sprintf("{%s}-->Name: %s; List: %s;", $this->getClassName(), $this->getNameToHuman(), $this->route_list);
     }
     
 }

Modified: trunk/libs/action/controller/Routing.php
===================================================================
--- trunk/libs/action/controller/Routing.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/libs/action/controller/Routing.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -53,15 +53,15 @@
         $r= new ActionControllerRouting($request);
         try {
             $route = $r->findRoute($request);
-            return   $route->createControllerInstance();
+            return   $route->createControllerInstance($request);
         } catch (RoutingException $rEx) {
             // exception thrown by findRoute if we dont match any of the registered route.
             // load 404 route, if fails too try the default route, this are named routes.
             // echo $rEx;
             try {
-                return Map::getInstance()->getRouteByName(Route::NOTFOUND)->createControllerInstance();
+                return Map::getInstance()->getRouteByName(Route::NOTFOUND)->createControllerInstance($request);
             } catch (RoutingException $rEx2) {
-                return Map::getInstance()->getRouteByName(Route::WELCOME)->createControllerInstance();
+                return Map::getInstance()->getRouteByName(Route::WELCOME)->createControllerInstance($request);
             }
         }
     }

Modified: trunk/libs/action/controller/http/HTTPRequest.php
===================================================================
--- trunk/libs/action/controller/http/HTTPRequest.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/libs/action/controller/http/HTTPRequest.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -44,7 +44,7 @@
 
     /** @var string
         path_info_parts */
-    private $path_info= NULL;
+    private $requestUri= NULL;
 
     /** @var array
         the list of headers associated with this HTTPRequest */
@@ -53,6 +53,8 @@
     /**
      * Constructor.
      * It builds the HTTPRequest object
+     *
+     * TODO: a URI Helper should be written.
      */
     public function HTTPRequest() {
         foreach ($_REQUEST as $key=>$value) {
@@ -62,13 +64,14 @@
         unset($_REQUEST); unset($_GET); unset($_POST);
 
         if (array_key_exists('PATH_INFO', $_SERVER) && $_SERVER['PATH_INFO']!='' ) {
-            $this->path_info= $_SERVER['PATH_INFO'];
+            $this->requestUri= $_SERVER['PATH_INFO'];
         }
         // TODO:
-        //      -> this is for php as cgi
+        //      -> this is for php as cgi, or where PATH_INFO is not available
+        //      -> ORIG_PATH_INFO should also work
         //      -> should substract the documnet root
         elseif (array_key_exists('REQUEST_URI', $_SERVER)) {
-            $this->path_info= substr($_SERVER['REQUEST_URI'],7);
+            $this->requestUri= substr($_SERVER['REQUEST_URI'],7);
         }
         
         $this->session = new Session();
@@ -88,17 +91,27 @@
     }
 
     /**
+     * Sets this Request URI
+     *
+     * Usefull for testing
+     * @return void
+     */
+    public function setRequestUri($uri) {
+      $this->requestUri= $uri;
+    }
+    
+    /**
      * It gets a part of the path info associated with this request
      * @param int, key, the part index
      * @return value of this part or NULL if this part is not defined
      */
-    public function getPathInfo() {
-        return $this->path_info;
+    public function getRequestUri() {
+        return $this->requestUri;
     }
 
-    public function getPathInfoParts() {
-        if (is_null($this->path_info)) return array();
-        return explode('/', trim($this->path_info,'/'));
+    public function getUriParts() {
+        if (is_null($this->requestUri)) return array();
+        return explode('/', trim($this->requestUri,'/'));
     }
 
     /**
@@ -111,7 +124,7 @@
 
     // {{{ todos.
     public function getIP() {  }
-    public function getRequestURI() {  }
+    // public function getRequestURI() {  }
     public function getProtocol() {  }
     // }}}
     

Modified: trunk/test/mock/MockRequest.php
===================================================================
--- trunk/test/mock/MockRequest.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/test/mock/MockRequest.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -4,4 +4,10 @@
 
 include_once('action/controller/Request.php');
 
-class MockRequest extends Request {  }
+class MockRequest extends HTTPRequest {
+
+    /** Just overwrite HTTPRequest Constructor */
+    public function MockRequest(){  }
+
+}
+

Modified: trunk/test/test/action/controller/RoutingTest.php
===================================================================
--- trunk/test/test/action/controller/RoutingTest.php	2006-02-27 20:56:33 UTC (rev 364)
+++ trunk/test/test/action/controller/RoutingTest.php	2006-03-01 19:44:55 UTC (rev 365)
@@ -10,29 +10,149 @@
 
 include_once('action/controller/Route.php');
 include_once('action/controller/Map.php');
-include_once('action/controller/Routing.php');
-include_once('action/controller/Base.php');
+// include_once('action/controller/Routing.php');
+// include_once('action/controller/Base.php');
 
 class RoutingTest extends UnitTestCase {
 
-    private $map;
+    // private $map;
 
+    // set-up the registry
     public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        $this->map= Registry::put(new Map(), '__map');
+        Registry::put($configurator= new MockConfigurator(), '__configurator');
+        Registry::put(new Logger($configurator), '__logger');
+        // $this->map= Map::getInstance();
     }
     
+    // clean-up
     public function tearDown() {
         Registry::close();
     }
     
-    public function _test_Rec() {
-        $route= new Route('foo', 'bar');
+    // tests default route:
+    // :controller/:action/:id
+    public function testDefaultRoute() {
+        // internal setup
+        $r= $this->getDefaultRoute();
         $request= new MockRequest();
-        $request->setParam('controller', 'foo');
-        $request->setParam('action', 'bar');
-        $this->map->add($route);
-        $this->assertIsA(ActionControllerRouting::recognize($request), 'ActionControllerBase');
+        $request->setRequestUri('/project/delete/3.html');
+        
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'project');
+        $this->assertEqual($request->getParameter('action'), 'delete');
+        $this->assertEqual($request->getParameter('id'), 3);
+        
+        // basically, after a new URI try, the old request parameters should be discarded
+        $request->setRequestUri('/task/list.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'task');
+        $this->assertEqual($request->getParameter('action'),'list');
+        $this->assertFalse($request->hasParameter('id'));
+
+        $request->setRequestUri('/mdk');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'mdk');
+        $this->assertEqual($request->getParameter('action'), 'index');
+
+        $request->setRequestUri('news.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'news');
+
+        $request->setRequestUri('/news/details/5.html/foo');
+        $this->assertFalse($r->match($request));
+
     }
+
+    public function testSimpleStaticComponents() {
+        $r= new Route('/project/all');
+        
+        $r->setDefaults(
+            array(
+                'controller'=>'project',
+                'action'=>'all'
+            )
+        );
+        $request= new MockRequest();
+        
+        $request->setRequestUri('/project/all.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'),'project');
+        $this->assertEqual($request->getParameter('action'),'all');
+
+        $request->setRequestUri('/project/index.html');
+        $this->assertFalse($r->match($request));
+        $request->setRequestUri('/project/delete/3.html');
+        $this->assertFalse($r->match($request));
+    }
+    
+    public function testSimpleStaticAndDynamic() {
+        $routes= array();
+        $routes[]= new Route('/project/all');
+        $routes[]= new Route(':controller/:action/:id');
+        $request= new MockRequest();
+        
+        $routes[0]->setDefaults(array('controller'=>'project','action'=>'all'));
+        
+        $request->setRequestUri('/news/details/1.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+
+        $request->setRequestUri('/project/overview/1.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'project');
+        $this->assertEqual($request->getParameter('action'), 'overview');
+
+        $request->setRequestUri('/project/index.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+
+        $request->setRequestUri('/project/all.html');
+        foreach ($routes as $route) {
+            if ($route->match($request)) break;
+        }
+        $this->assertEqual('/project/all', $route->getRouteList());
+    }
+    
+    public function testDynamicAndStaticWithDefaults() {
+        $r= new Route('/project/overview/:id');
+        $r->setDefault('controller', 'project');
+        $r->setDefault('action', 'overview');
+        
+        $request= new MockRequest();
+        $request->setRequestUri('/project/overview/5.html');
+        
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('id'), 5);
+
+        $request->setRequestUri('/project/overview.html');
+        $this->assertTrue($r->match($request));
+        $this->assertFalse($request->hasParameter('id'));
+        
+        // $r= new Route('/blog/archive/:year/:month/:day');
+        
+    }
+    
+    public function testSimpleNamedRoutes() {
+        $map= Map::getInstance();
+        $map->add(new Route('/project/all', Route::WELCOME, array('controller'=>'project', 'action'=>'all')));
+        $map->add($this->getDefaultRoute());
+        $request= new MockRequest();
+        
+        $request->setRequestUri('/project/all.html');
+        $this->assertTrue($map->getRouteByName(Route::WELCOME));
+        $this->assertTrue($route= $map->match($request));
+        $this->assertEqual(Route::WELCOME, $route->getName());
+        /*
+        foreach ($routes as $route) {
+            if ($route->match($request)) break;
+        }
+        */
+    }
+    
+    private function getDefaultRoute() {
+        return new Route(':controller/:action/:id');
+    }
+    
 }
+



From aurelian at berlios.de  Wed Mar  1 21:17:48 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Wed, 1 Mar 2006 21:17:48 +0100
Subject: [Medick-svn] r366 - trunk/libs/action/controller
Message-ID: <200603012017.k21KHmj7012223@sheep.berlios.de>

Author: aurelian
Date: 2006-03-01 21:17:29 +0100 (Wed, 01 Mar 2006)
New Revision: 366

Modified:
   trunk/libs/action/controller/Route.php
Log:
 -- matching / on the welcome route

Modified: trunk/libs/action/controller/Route.php
===================================================================
--- trunk/libs/action/controller/Route.php	2006-03-01 19:44:55 UTC (rev 365)
+++ trunk/libs/action/controller/Route.php	2006-03-01 20:17:29 UTC (rev 366)
@@ -126,6 +126,8 @@
         between 2 route recogitions */
     static private $old_merges= array();
     
+    /** @var array
+        cheap cache for old defaults */
     static private $old_defaults= array();
     
     /** @var string
@@ -139,7 +141,8 @@
     /** @var bool
         flag to indicate that this route is loaded.
         on initial phase, we will use this flag for knowing 
-        if we already loaded the defaults values */
+        if we already loaded the defaults values 
+        Later on this will be also used for validating Route Requirements. */
     private $isLoaded;
     
     /** @var string
@@ -178,16 +181,14 @@
      */ 
     private function loadComponents() {
         $parts= explode('/', trim($this->route_list, '/'));
-
         foreach ($parts as $key=>$element) {
             if (preg_match('/:[a-z0-9_\-]+/',$element, $match)) {
                 $c= new Component(substr(trim($match[0]), 1));
-                $c->setDynamic(TRUE);
+                $c->setDynamic(true);
             } else {
                 $c= new Component($element);
-                $c->setDynamic(FALSE);
+                $c->setDynamic(false);
             }
-            // $c->setPosition($key);
             $this->components->add($c);
         }
     }
@@ -334,7 +335,6 @@
     }
     
     private function loadDefaults(Request $request) {
-        // var_dump(Route::$old_defaults);
         foreach ($this->defaults as $name=>$value) {
             if (isset(Route::$old_defaults[$name])) unset(Route::$old_defaults[$name]);
             $request->setParameter($name, $value);
@@ -343,7 +343,6 @@
             $request->setParameter($name, NULL);
         }
         Route::$old_defaults= $this->defaults;
-        // var_dump(Route::$old_defaults);
     }
     
     /**
@@ -353,11 +352,11 @@
      */ 
     private function loadActionAndController(Request $request) {
         // check if we have a controller.
-        if (!$request->hasParameter('controller') && !$request->getParameter('controller')) {
+        if (!$request->hasParameter('controller') || $request->getParameter('controller') == '') {
             throw new RoutingException('Cannot Resolve A Controller for this Route!');
         }
         // check for an action
-        if (!$request->hasParameter('action')) {
+        if (!$request->hasParameter('action') || $request->getParameter('action') == '') {
             $request->setParameter('action','index');
         }
     }



From aurelian at berlios.de  Wed Mar  1 21:31:45 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Wed, 1 Mar 2006 21:31:45 +0100
Subject: [Medick-svn] r367 - in branches/release_0.1: libs/action/controller libs/action/controller/http test/mock test/test/action/controller
Message-ID: <200603012031.k21KVjFs018190@sheep.berlios.de>

Author: aurelian
Date: 2006-03-01 21:31:21 +0100 (Wed, 01 Mar 2006)
New Revision: 367

Modified:
   branches/release_0.1/libs/action/controller/Request.php
   branches/release_0.1/libs/action/controller/Route.php
   branches/release_0.1/libs/action/controller/Routing.php
   branches/release_0.1/libs/action/controller/http/HTTPRequest.php
   branches/release_0.1/test/mock/MockRequest.php
   branches/release_0.1/test/test/action/controller/RoutingTest.php
Log:
 -- MFH

Modified: branches/release_0.1/libs/action/controller/Request.php
===================================================================
--- branches/release_0.1/libs/action/controller/Request.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/libs/action/controller/Request.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -43,11 +43,14 @@
         current request parameters */
     private $params = array();
 
-    /** Hidden Constructor */
+    /** 
+     * Hidden Constructor 
+     */
     protected function Request() {  }
 
     /**
-     * It gets the param
+     * It gets a Request Parameter
+     * 
      * @param mixed, param, the paremeter name
      * @return the param value of NULL if this param was not passed with this Resuest
      */
@@ -57,6 +60,7 @@
 
     /**
      * Check if the current Request has the parameter with the specified name
+     * 
      * @param string param_name the parameter name
      * @return bool TRUE if the parameter_name is included in this request, FALSE otherwise
      */
@@ -66,6 +70,7 @@
 
     /**
      * It gets all the parameters of this Request
+     * 
      * @return array this request parameters.
      */
     public function getParameters() {
@@ -73,7 +78,8 @@
     }
 
     /**
-     * It sets a param.
+     * It sets a Request Parameter
+     *
      * @param string, name, the name of the param to set
      * @param mixed, value, value of the param
      * @return void
@@ -83,6 +89,18 @@
     }
 
     /**
+     * It adds an array of parameters on this Request
+     *
+     * @param array parameters, parameters name/value pairs
+     * @return void
+     */ 
+    public function setParameters(/*Array*/ $parameters=array()) {
+        foreach ($parameters as $name=>$value) {
+            $this->setParameter($name, $value);
+        }
+    }
+    
+    /**
      * Gets a string representation of this Object
      *
      * @return string

Modified: branches/release_0.1/libs/action/controller/Route.php
===================================================================
--- branches/release_0.1/libs/action/controller/Route.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/libs/action/controller/Route.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -35,24 +35,42 @@
 /**
  * A Route Component
  *
- * @package locknet7.action.controller.route
+ * @see locknet7.action.controller.Route
+ * @package locknet7.action.controller
  */
 class Component extends Object {
 
+    /** @var string
+        the component name */
     private $name;
 
+    /** @var boolean
+        true if this is a dynamic component */
     private $dynamic;
 
-    private $position;
-
+    /**
+     * Creates a new Route Component with the given name
+     *
+     * @param string name the component name
+     */ 
     public function Component($name) {
         $this->name= $name;
     }
 
+    /**
+     * It gets this component name
+     *
+     * @return string
+     */ 
     public function getName() {
         return $this->name;
     }
 
+    /**
+     * Mark this component as dynamic
+     *
+     * @param boolean dynamic
+     */ 
     public function setDynamic($dynamic) {
         $this->dynamic= (bool)$dynamic;
     }
@@ -60,34 +78,58 @@
     public function isDynamic() {
         return $this->dynamic;
     }
-
-    public function setPosition($position) {
-        $this->position= (int)$position;
-    }
-
-    public function getPosition() {
-        return $this->position;
-    }
-
+    
     public function toString() {
-        return sprintf('{%s}--->name=%s[dynamic=%s]', $this->getClassName(), $this->name, $this->dynamic ? 'TRUE':'FALSE');
+        return sprintf('{%s}-->name=%s[dynamic=%s]', $this->getClassName(), $this->name, $this->dynamic ? 'TRUE':'FALSE');
     }
 
 }
 
 /**
  * Route class.
+ * 
+ * A Route resolves the incoming Request URI to a known Controller/Action,
+ * also, it will merge Route Components Names to Request parameters
+ * Usually, a Map holds the Route Definitions for an Web Application
+ * and the Recogition is performed inside the ActionControllerRouting::recognize(Request $request) method
+ * Routes are defined inside __APPLICATION__PATH/conf/__APPLICATION__NAME__.routes.php file,
+ * a plain php code file
  *
- * @package locknet7.action.controller.route
+ * @see locknet7.action.controller.Map
+ * @see locknet7.action.controller.Routing
+ * @see locknet7.action.controller.Component
+ *
+ * @TODO:
+ *      -> Route Requirements
+ * 
+ * @package locknet7.action.controller
  */
 class Route extends Object {
 
+    // {{{ predefined Route Names
+    // default route name
+    const AUTO     = 0x000;
+    // welcome route, it`s used as an entry point of the application
     const WELCOME  = 0x200;
-
+    // used when you want to write your custom error route
     const ERROR    = 0x500;
-
+    // used when the page is not found
     const NOTFOUND = 0x400;
-
+    // }}}
+    
+    /** @var array
+        this route parameters witch will be merged to request parameters */ 
+    private $merges=array();
+    
+    /** @var array
+        cheap cache, this way we can remove request parameters 
+        between 2 route recogitions */
+    static private $old_merges= array();
+    
+    /** @var array
+        cheap cache for old defaults */
+    static private $old_defaults= array();
+    
     /** @var string
         incoming Route Definition list. */
     private $route_list;
@@ -96,6 +138,13 @@
         a list with default values */
     private $defaults;
 
+    /** @var bool
+        flag to indicate that this route is loaded.
+        on initial phase, we will use this flag for knowing 
+        if we already loaded the defaults values 
+        Later on this will be also used for validating Route Requirements. */
+    private $isLoaded;
+    
     /** @var string
         the route name */
     private $name;
@@ -113,34 +162,41 @@
      *
      * @param string route_list the route list
      * @param string name route name
-     * @param array
+     * @param array defaults a list of defaults values
+     * @param array requirements the route requirements
      */
     public function Route($route_list, $name = '', /*Array*/ $defaults = array(), /*Array*/ $requirements = array()) {
-
         $this->components = new Collection();
         $this->route_list = $route_list;
         $this->defaults   = $defaults;
-        $this->name       = $name;
-
+        $this->name       = $name==''?Route::AUTO:$name;
+        $this->isLoaded   = false;
+        $this->loadComponents();
+    }
+    
+    /**
+     * Helper Method for loading the Route Components
+     * 
+     * @return void
+     */ 
+    private function loadComponents() {
         $parts= explode('/', trim($this->route_list, '/'));
-
         foreach ($parts as $key=>$element) {
-            // Registry::get('__logger')->debug('Parts:: [' . $key . '] '. $element);
             if (preg_match('/:[a-z0-9_\-]+/',$element, $match)) {
                 $c= new Component(substr(trim($match[0]), 1));
-                $c->setDynamic(TRUE);
+                $c->setDynamic(true);
             } else {
                 $c= new Component($element);
-                $c->setDynamic(FALSE);
+                $c->setDynamic(false);
             }
-            $c->setPosition($key);
             $this->components->add($c);
         }
     }
 
     /**
      * It gets the name of this Route.
-     *
+     * 
+     * @see: locknet7.action.controller.Route#getNameToHuman
      * @return string name.
      */
     public function getName() {
@@ -161,72 +217,162 @@
      *
      * @param array an array witch holds defaults values for this Route.
      */
-    public function setDefaults(/*Array*/ $defaults) {
+    public function setDefaults(/*Array*/ $defaults=array()) {
         $this->defaults= $defaults;
     }
-
-    // match the current Route against incoming URL.
+    
+    /**
+     * Adds only a default pair name/value on to the defaults
+     *
+     * @param string name
+     * @param string value
+     */ 
+    public function setDefault($name, $value) {
+        $this->defaults[$name]= $value;
+    }
+    
+    /**
+     * Gets this Route List Definition
+     *
+     * @return string the route list definition
+     */ 
+    public function getRouteList() {
+        return $this->route_list;
+    }
+    
+    /**
+     * It gets a human readable route name for predefined Route Names
+     *
+     * @return string the route name
+     */ 
+    public function getNameToHuman() {
+        switch ($this->name) {
+            case Route::NOTFOUND:
+                return 'NOTFOUND';
+            case Route::ERROR:
+                return 'ERROR';
+            case Route::WELCOME:
+                return 'WELCOME';
+            case Route::AUTO:
+                return 'AUTO';
+            default:
+                return $this->name;
+        }
+    }
+    
+    // match the current Route against incoming URI.
     // @TODO: refactor.
     // @return bool
     public function match(Request $request) {
-        $parts= $request->getPathInfoParts();
-
-        // also if we have more parameters passed, as expected.
-        if ( count($parts) > $this->components->size()) {
-            return FALSE;
+        $parts= $request->getUriParts();
+        
+        // if we have more parameters passed, as expected.
+        if (count($parts) > $this->components->size()) {
+            return false;
         }
         // if / was requested, just skip this part.
         if ( count($parts) != 0 ) {
             $it= $this->components->iterator();
+            $this->merges= array();
             while($it->hasNext()) {
-                $name= $it->next()->getName();
-
+                $component = $it->next();
                 if (isset($parts[$it->key()])) {
-
-                    if (FALSE===strpos($parts[$it->key()], '.html')) {
-                        $part= $parts[$it->key()];
+                    if (!$component->isDynamic() && $component->getName() != $this->ignoreExtension($parts[$it->key()]) ) {
+                        return false;
                     } else {
-                        list($part)= explode('.', $parts[$it->key()]);
+                        $this->merges[$component->getName()] = $this->ignoreExtension($parts[$it->key()]);
                     }
-                    $request->setParameter($name, $part);
                 }
-
             }
         }
+    
+        // preparing to return true.
+        $this->doMerge($request);
+        $this->load($request);
+        return true;
+    }
 
-        // more to be done.
+    /**
+     * Helper method, will remove everithing after . in parts
+     * 
+     * @param string
+     * @return string
+     */ 
+    private function ignoreExtension($on) {
+        if (false === strpos($on, '.html')) {
+            $part = $on;
+        } else {
+            list($part)= explode('.', $on);
+        }
+        return $part;
+    }
+    
+    /**
+     * Merges this Route Parameters into Request Parameters
+     *
+     * @param Request, request, the request on witch we want to merge
+     */ 
+    private function doMerge(Request $request) {
+        foreach ($this->merges as $name=>$value) {
+            if (isset(Route::$old_merges[$name])) unset(Route::$old_merges[$name]);
+            $request->setParameter($name, $value);
+        }
+        // discard previously route parameters.
+        foreach (Route::$old_merges as $name=>$value) {
+            $request->setParameter($name, NULL);
+        }
+        // cache merged parameters  
+        Route::$old_merges= $this->merges;
+    }
 
+    /**
+     * Trigger method to load defaults values and for setting a propper action and controller
+     */ 
+    private function load(Request $request) {
+        $this->loadDefaults($request);
+        $this->loadActionAndController($request);
+        $this->isLoaded= true;
+    }
+    
+    private function loadDefaults(Request $request) {
+        foreach ($this->defaults as $name=>$value) {
+            if (isset(Route::$old_defaults[$name])) unset(Route::$old_defaults[$name]);
+            $request->setParameter($name, $value);
+        }
+        foreach (Route::$old_defaults as $name=>$value) {
+            $request->setParameter($name, NULL);
+        }
+        Route::$old_defaults= $this->defaults;
+    }
+    
+    /**
+     * Loads Special Parameters: Controller and Action
+     *
+     * @throws RoutingException if a controller cannot be resolved for this route
+     */ 
+    private function loadActionAndController(Request $request) {
         // check if we have a controller.
-        if (!$request->hasParameter('controller')) {
-            if (array_key_exists('controller', $this->defaults)) {
-                $request->setParameter('controller', $this->defaults['controller']);
-            } else { // we don`t have a controller for this route (?), exit.
-                return FALSE;
-            }
+        if (!$request->hasParameter('controller') || $request->getParameter('controller') == '') {
+            throw new RoutingException('Cannot Resolve A Controller for this Route!');
         }
-
         // check for an action
-        if (!$request->hasParameter('action')) {
-            if (array_key_exists('action', $this->defaults)) {
-                $request->setParameter('action', $this->defaults['action']);
-            } else {
-                $request->setParameter('action','index');
-            }
+        if (!$request->hasParameter('action') || $request->getParameter('action') == '') {
+            $request->setParameter('action','index');
         }
-
-        $this->controller= $request->getParameter('controller');
-        Registry::get('__logger')->debug($this->toString());
-        return TRUE;
     }
-
-    public function createControllerInstance() {
-        if ($this->controller === NULL) {
-            throw new RoutingException('Cannot resolve a controller for this Route!');
-        }
+    
+    /**
+     * Creates a Controller Instance
+     *
+     * @return ActionControllerBase
+     */ 
+    public function createControllerInstance(Request $request) {
+        if (!$this->isLoaded) $this->load($request);
         try {
-            return Registry::put(new Injector(), '__injector')->inject('controller', $this->controller);
+            Registry::get('__logger')->debug($this->toString());
+            return Registry::put(new Injector(), '__injector')->inject('controller', $request->getParameter('controller'));
         } catch (FileNotFoundException $fnfEx) {
-            throw new RoutingException('Cannot create a controller instance,' . $fnfEx->getMessage());
+            throw new RoutingException('Cannot create a controller instance, ' . $fnfEx->getMessage());
         }
     }
     
@@ -236,7 +382,7 @@
      * @return string
      */ 
     public function toString() {
-        return "{".$this->getClassName()."}-->{$this->route_list}";
+        return sprintf("{%s}-->Name: %s; List: %s;", $this->getClassName(), $this->getNameToHuman(), $this->route_list);
     }
     
 }

Modified: branches/release_0.1/libs/action/controller/Routing.php
===================================================================
--- branches/release_0.1/libs/action/controller/Routing.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/libs/action/controller/Routing.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -53,15 +53,15 @@
         $r= new ActionControllerRouting($request);
         try {
             $route = $r->findRoute($request);
-            return   $route->createControllerInstance();
+            return   $route->createControllerInstance($request);
         } catch (RoutingException $rEx) {
             // exception thrown by findRoute if we dont match any of the registered route.
             // load 404 route, if fails too try the default route, this are named routes.
             // echo $rEx;
             try {
-                return Map::getInstance()->getRouteByName(Route::NOTFOUND)->createControllerInstance();
+                return Map::getInstance()->getRouteByName(Route::NOTFOUND)->createControllerInstance($request);
             } catch (RoutingException $rEx2) {
-                return Map::getInstance()->getRouteByName(Route::WELCOME)->createControllerInstance();
+                return Map::getInstance()->getRouteByName(Route::WELCOME)->createControllerInstance($request);
             }
         }
     }

Modified: branches/release_0.1/libs/action/controller/http/HTTPRequest.php
===================================================================
--- branches/release_0.1/libs/action/controller/http/HTTPRequest.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/libs/action/controller/http/HTTPRequest.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -44,7 +44,7 @@
 
     /** @var string
         path_info_parts */
-    private $path_info= NULL;
+    private $requestUri= NULL;
 
     /** @var array
         the list of headers associated with this HTTPRequest */
@@ -53,6 +53,8 @@
     /**
      * Constructor.
      * It builds the HTTPRequest object
+     *
+     * TODO: a URI Helper should be written.
      */
     public function HTTPRequest() {
         foreach ($_REQUEST as $key=>$value) {
@@ -62,13 +64,14 @@
         unset($_REQUEST); unset($_GET); unset($_POST);
 
         if (array_key_exists('PATH_INFO', $_SERVER) && $_SERVER['PATH_INFO']!='' ) {
-            $this->path_info= $_SERVER['PATH_INFO'];
+            $this->requestUri= $_SERVER['PATH_INFO'];
         }
         // TODO:
-        //      -> this is for php as cgi
+        //      -> this is for php as cgi, or where PATH_INFO is not available
+        //      -> ORIG_PATH_INFO should also work
         //      -> should substract the documnet root
         elseif (array_key_exists('REQUEST_URI', $_SERVER)) {
-            $this->path_info= substr($_SERVER['REQUEST_URI'],7);
+            $this->requestUri= substr($_SERVER['REQUEST_URI'],7);
         }
         
         $this->session = new Session();
@@ -88,17 +91,27 @@
     }
 
     /**
+     * Sets this Request URI
+     *
+     * Usefull for testing
+     * @return void
+     */
+    public function setRequestUri($uri) {
+      $this->requestUri= $uri;
+    }
+    
+    /**
      * It gets a part of the path info associated with this request
      * @param int, key, the part index
      * @return value of this part or NULL if this part is not defined
      */
-    public function getPathInfo() {
-        return $this->path_info;
+    public function getRequestUri() {
+        return $this->requestUri;
     }
 
-    public function getPathInfoParts() {
-        if (is_null($this->path_info)) return array();
-        return explode('/', trim($this->path_info,'/'));
+    public function getUriParts() {
+        if (is_null($this->requestUri)) return array();
+        return explode('/', trim($this->requestUri,'/'));
     }
 
     /**
@@ -111,7 +124,7 @@
 
     // {{{ todos.
     public function getIP() {  }
-    public function getRequestURI() {  }
+    // public function getRequestURI() {  }
     public function getProtocol() {  }
     // }}}
     

Modified: branches/release_0.1/test/mock/MockRequest.php
===================================================================
--- branches/release_0.1/test/mock/MockRequest.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/test/mock/MockRequest.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -4,4 +4,10 @@
 
 include_once('action/controller/Request.php');
 
-class MockRequest extends Request {  }
+class MockRequest extends HTTPRequest {
+
+    /** Just overwrite HTTPRequest Constructor */
+    public function MockRequest(){  }
+
+}
+

Modified: branches/release_0.1/test/test/action/controller/RoutingTest.php
===================================================================
--- branches/release_0.1/test/test/action/controller/RoutingTest.php	2006-03-01 20:17:29 UTC (rev 366)
+++ branches/release_0.1/test/test/action/controller/RoutingTest.php	2006-03-01 20:31:21 UTC (rev 367)
@@ -10,29 +10,149 @@
 
 include_once('action/controller/Route.php');
 include_once('action/controller/Map.php');
-include_once('action/controller/Routing.php');
-include_once('action/controller/Base.php');
+// include_once('action/controller/Routing.php');
+// include_once('action/controller/Base.php');
 
 class RoutingTest extends UnitTestCase {
 
-    private $map;
+    // private $map;
 
+    // set-up the registry
     public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        $this->map= Registry::put(new Map(), '__map');
+        Registry::put($configurator= new MockConfigurator(), '__configurator');
+        Registry::put(new Logger($configurator), '__logger');
+        // $this->map= Map::getInstance();
     }
     
+    // clean-up
     public function tearDown() {
         Registry::close();
     }
     
-    public function _test_Rec() {
-        $route= new Route('foo', 'bar');
+    // tests default route:
+    // :controller/:action/:id
+    public function testDefaultRoute() {
+        // internal setup
+        $r= $this->getDefaultRoute();
         $request= new MockRequest();
-        $request->setParam('controller', 'foo');
-        $request->setParam('action', 'bar');
-        $this->map->add($route);
-        $this->assertIsA(ActionControllerRouting::recognize($request), 'ActionControllerBase');
+        $request->setRequestUri('/project/delete/3.html');
+        
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'project');
+        $this->assertEqual($request->getParameter('action'), 'delete');
+        $this->assertEqual($request->getParameter('id'), 3);
+        
+        // basically, after a new URI try, the old request parameters should be discarded
+        $request->setRequestUri('/task/list.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'task');
+        $this->assertEqual($request->getParameter('action'),'list');
+        $this->assertFalse($request->hasParameter('id'));
+
+        $request->setRequestUri('/mdk');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'mdk');
+        $this->assertEqual($request->getParameter('action'), 'index');
+
+        $request->setRequestUri('news.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'news');
+
+        $request->setRequestUri('/news/details/5.html/foo');
+        $this->assertFalse($r->match($request));
+
     }
+
+    public function testSimpleStaticComponents() {
+        $r= new Route('/project/all');
+        
+        $r->setDefaults(
+            array(
+                'controller'=>'project',
+                'action'=>'all'
+            )
+        );
+        $request= new MockRequest();
+        
+        $request->setRequestUri('/project/all.html');
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('controller'),'project');
+        $this->assertEqual($request->getParameter('action'),'all');
+
+        $request->setRequestUri('/project/index.html');
+        $this->assertFalse($r->match($request));
+        $request->setRequestUri('/project/delete/3.html');
+        $this->assertFalse($r->match($request));
+    }
+    
+    public function testSimpleStaticAndDynamic() {
+        $routes= array();
+        $routes[]= new Route('/project/all');
+        $routes[]= new Route(':controller/:action/:id');
+        $request= new MockRequest();
+        
+        $routes[0]->setDefaults(array('controller'=>'project','action'=>'all'));
+        
+        $request->setRequestUri('/news/details/1.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+
+        $request->setRequestUri('/project/overview/1.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+        $this->assertEqual($request->getParameter('controller'), 'project');
+        $this->assertEqual($request->getParameter('action'), 'overview');
+
+        $request->setRequestUri('/project/index.html');
+        $this->assertFalse($routes[0]->match($request));
+        $this->assertTrue($routes[1]->match($request));
+
+        $request->setRequestUri('/project/all.html');
+        foreach ($routes as $route) {
+            if ($route->match($request)) break;
+        }
+        $this->assertEqual('/project/all', $route->getRouteList());
+    }
+    
+    public function testDynamicAndStaticWithDefaults() {
+        $r= new Route('/project/overview/:id');
+        $r->setDefault('controller', 'project');
+        $r->setDefault('action', 'overview');
+        
+        $request= new MockRequest();
+        $request->setRequestUri('/project/overview/5.html');
+        
+        $this->assertTrue($r->match($request));
+        $this->assertEqual($request->getParameter('id'), 5);
+
+        $request->setRequestUri('/project/overview.html');
+        $this->assertTrue($r->match($request));
+        $this->assertFalse($request->hasParameter('id'));
+        
+        // $r= new Route('/blog/archive/:year/:month/:day');
+        
+    }
+    
+    public function testSimpleNamedRoutes() {
+        $map= Map::getInstance();
+        $map->add(new Route('/project/all', Route::WELCOME, array('controller'=>'project', 'action'=>'all')));
+        $map->add($this->getDefaultRoute());
+        $request= new MockRequest();
+        
+        $request->setRequestUri('/project/all.html');
+        $this->assertTrue($map->getRouteByName(Route::WELCOME));
+        $this->assertTrue($route= $map->match($request));
+        $this->assertEqual(Route::WELCOME, $route->getName());
+        /*
+        foreach ($routes as $route) {
+            if ($route->match($request)) break;
+        }
+        */
+    }
+    
+    private function getDefaultRoute() {
+        return new Route(':controller/:action/:id');
+    }
+    
 }
+



From aurelian at berlios.de  Sun Mar  5 10:44:43 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sun, 5 Mar 2006 10:44:43 +0100
Subject: [Medick-svn] r368 - in trunk: bin skel/public
Message-ID: <200603050944.k259ihmR020354@sheep.berlios.de>

Author: aurelian
Date: 2006-03-05 10:44:42 +0100 (Sun, 05 Mar 2006)
New Revision: 368

Modified:
   trunk/bin/medick.php
   trunk/skel/public/default.htaccess
Log:
 -- minor fix on htaccess file

Modified: trunk/bin/medick.php
===================================================================
--- trunk/bin/medick.php	2006-03-01 20:31:21 UTC (rev 367)
+++ trunk/bin/medick.php	2006-03-05 09:44:42 UTC (rev 368)
@@ -169,7 +169,7 @@
     <h3><center>Welcome To Medick</center></h3>
     <p><b>Application:</b> $short_name</p>
     <p><b>Develop $short_name on: </b>$app_location</p>
-    <p>Setup a default controller in
+    <p>Setup the WELCOME route in
         <i>$app_location/config/$short_name.routes.php</i>, <br />
         and remove this file ($app_location/public/index.html).
     </p>

Modified: trunk/skel/public/default.htaccess
===================================================================
--- trunk/skel/public/default.htaccess	2006-03-01 20:31:21 UTC (rev 367)
+++ trunk/skel/public/default.htaccess	2006-03-05 09:44:42 UTC (rev 368)
@@ -2,21 +2,27 @@
 # $Id$
 
 # Configuration
-# 1. Medick Related.
+
+# 1. Apache Section.
+DirectoryIndex index.html index.php
+
+# 2. Medick Related.
 # this will not work for php as cgi
+# and it will be removed in version 0.2
 SetEnv MEDICK_APPLICATION_PATH ${APP_PATH}
 SetEnv MEDICK_APPLICATION_NAME ${APP_NAME}
 
-# 2. php options.
-# this will not work for php as cgi
+# 3. PHP Options.
+# this options will not work for php as cgi
+# and it will be removed in version 0.2
+# HINT: move this one to PHPTemplateView class
 php_value short_open_tag 1
 # this should depend on environment.
 # while we are on "planning", we will 
 # keep this to 1
 php_value display_errors 1
 
-# Rewrite
-
+# 4. Rewrite
 RewriteEngine on
 
 # Set 1.
@@ -25,9 +31,16 @@
 #RewriteRule   ^([^i][^n][^d][^e][^x].*)$  index.php/$1/ [NS,L]
 
 # Set 2.
-# RewriteBase /${APP_NAME}
-RewriteRule ^$ index.php  [L]
+RewriteBase /${APP_NAME}
+
+# Send requests without parameters to index.php
+# -- disabled since we want to show index.html
+# default index page for medick.
+#RewriteRule ^$ index.php  [L]
+# Send requests for files that exist to those files.
 RewriteCond %{REQUEST_FILENAME} !-f
+# Send requests for directories that exist to those directories.
 RewriteCond %{REQUEST_FILENAME} !-d
+# Send requests to index.php, appending the query string part.
 RewriteRule (.*) index.php/$1  [QSA,L]
 



From aurelian at berlios.de  Sun Mar  5 10:51:40 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sun, 5 Mar 2006 10:51:40 +0100
Subject: [Medick-svn] r369 - in branches/release_0.1: bin skel/public
Message-ID: <200603050951.k259peMW021083@sheep.berlios.de>

Author: aurelian
Date: 2006-03-05 10:51:39 +0100 (Sun, 05 Mar 2006)
New Revision: 369

Modified:
   branches/release_0.1/bin/medick.php
   branches/release_0.1/skel/public/default.htaccess
Log:
 -- MFH

Modified: branches/release_0.1/bin/medick.php
===================================================================
--- branches/release_0.1/bin/medick.php	2006-03-05 09:44:42 UTC (rev 368)
+++ branches/release_0.1/bin/medick.php	2006-03-05 09:51:39 UTC (rev 369)
@@ -169,7 +169,7 @@
     <h3><center>Welcome To Medick</center></h3>
     <p><b>Application:</b> $short_name</p>
     <p><b>Develop $short_name on: </b>$app_location</p>
-    <p>Setup a default controller in
+    <p>Setup the WELCOME route in
         <i>$app_location/config/$short_name.routes.php</i>, <br />
         and remove this file ($app_location/public/index.html).
     </p>

Modified: branches/release_0.1/skel/public/default.htaccess
===================================================================
--- branches/release_0.1/skel/public/default.htaccess	2006-03-05 09:44:42 UTC (rev 368)
+++ branches/release_0.1/skel/public/default.htaccess	2006-03-05 09:51:39 UTC (rev 369)
@@ -2,21 +2,27 @@
 # $Id$
 
 # Configuration
-# 1. Medick Related.
+
+# 1. Apache Section.
+DirectoryIndex index.html index.php
+
+# 2. Medick Related.
 # this will not work for php as cgi
+# and it will be removed in version 0.2
 SetEnv MEDICK_APPLICATION_PATH ${APP_PATH}
 SetEnv MEDICK_APPLICATION_NAME ${APP_NAME}
 
-# 2. php options.
-# this will not work for php as cgi
+# 3. PHP Options.
+# this options will not work for php as cgi
+# and it will be removed in version 0.2
+# HINT: move this one to PHPTemplateView class
 php_value short_open_tag 1
 # this should depend on environment.
 # while we are on "planning", we will 
 # keep this to 1
 php_value display_errors 1
 
-# Rewrite
-
+# 4. Rewrite
 RewriteEngine on
 
 # Set 1.
@@ -25,9 +31,16 @@
 #RewriteRule   ^([^i][^n][^d][^e][^x].*)$  index.php/$1/ [NS,L]
 
 # Set 2.
-# RewriteBase /${APP_NAME}
-RewriteRule ^$ index.php  [L]
+RewriteBase /${APP_NAME}
+
+# Send requests without parameters to index.php
+# -- disabled since we want to show index.html
+# default index page for medick.
+#RewriteRule ^$ index.php  [L]
+# Send requests for files that exist to those files.
 RewriteCond %{REQUEST_FILENAME} !-f
+# Send requests for directories that exist to those directories.
 RewriteCond %{REQUEST_FILENAME} !-d
+# Send requests to index.php, appending the query string part.
 RewriteRule (.*) index.php/$1  [QSA,L]
 



From aurelian at berlios.de  Wed Mar  8 19:32:35 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Wed, 8 Mar 2006 19:32:35 +0100
Subject: [Medick-svn] r371 - in trunk/docs/medick.website: . css i
Message-ID: <200603081832.k28IWZ0D010541@sheep.berlios.de>

Author: aurelian
Date: 2006-03-08 19:32:14 +0100 (Wed, 08 Mar 2006)
New Revision: 371

Modified:
   trunk/docs/medick.website/css/medick.css
   trunk/docs/medick.website/documentation.html
   trunk/docs/medick.website/i/say_web.jpg
   trunk/docs/medick.website/i/welcome_route_web.jpg
Log:
 -- minor layout fixes

Modified: trunk/docs/medick.website/css/medick.css
===================================================================
--- trunk/docs/medick.website/css/medick.css	2006-03-07 19:36:38 UTC (rev 370)
+++ trunk/docs/medick.website/css/medick.css	2006-03-08 18:32:14 UTC (rev 371)
@@ -63,6 +63,7 @@
   padding: 15px; 
   margin-right: 1.0em; 
   margin-left: 1.0em;
+  text-align: center;
 }
 
 .toc {

Modified: trunk/docs/medick.website/documentation.html
===================================================================
--- trunk/docs/medick.website/documentation.html	2006-03-07 19:36:38 UTC (rev 370)
+++ trunk/docs/medick.website/documentation.html	2006-03-08 18:32:14 UTC (rev 371)
@@ -25,7 +25,13 @@
       <h3><a name="top">Intro - Table of Contents</a></h3>
       <ul class="toc">
         <li><a href="#what_is_this">What is this?</a></li>
-        <li><a href="#requirements">Requirements</a></li>
+        <li><a href="#requirements">Requirements</a>
+          <ul class="subtoc">
+            <li>2.1&nbsp;<a href="#php">PHP</a></li>
+            <li>2.2&nbsp;<a href="#web_server">Web Server</a></li>
+            <li>2.3&nbsp;<a href="#database_server">Database</a></li>
+          </ul>
+        </li>
         <li><a href="#state">Project State</a></li>
         <li><a href="#getting_started">Getting Started</a>
           <ul class="subtoc">
@@ -45,6 +51,13 @@
             <li>5.4&nbsp;<a href="#new_controller">Controllers, Actions and URLs</a></li>
           </ul>
         </li>
+        <li><a href="#contribute">Contribute</a>
+          <ul class="subtoc">
+            <li>6.1&nbsp;<a href="#whats_next">What's next?</a></li>
+            <li>6.2&nbsp;<a href="#coding">Coding</a></li>
+            <li>6.3&nbsp;<a href="#where">Where</a></li>
+          </ul>
+        </li>
         <li><a href="#history">Project History</a></li>
       </ul>
 
@@ -82,8 +95,8 @@
       <!-- requirements -->
       <div class="chapter">
         <h4 class="chapter_title"><a name="requirements">Requirements</a></h4>
-        &nbsp;&nbsp;<b>PHP, version 5.0.3 or higher, 5.1.2 recommended</b><br />
-        PHP Extensions and Settings:<br />
+        &nbsp;&nbsp;<h4><a name="php">2.1 PHP, version 5.0.3 or higher, 5.1.2 recommended</a></h4>
+        Extensions and Settings:<br />
         &nbsp;&nbsp;<i><a href="http://php.net/simplexml" title="Simple XML" target="_blank">SimpleXML</a></i>, 
         for parsing app.xml file, it's enabled by default on every php installation otherwise, 
         compile php with: <i>--enable-simplexml</i><br />
@@ -93,8 +106,8 @@
         Reflection is enabled by default on every php installation, otherwise, compile php with: <i>--enable-reflection</i><br />
         &nbsp;&nbsp;<i><a href="http://php.net/spl" target="_blank" title="Standard PHP Lybrary">SPL</a></i>, 
         enabled by default on every php installation, otherwise, compile php with: <i>--enable-spl</i><br />
-        On Windows, this 3 extensions cannot be disabled so you will not have to activate anything to run medick.<br />
-        &nbsp;&nbsp;<b>Web Server, Apache 2.0 recommended</b><br />
+        On Windows, this 3 extensions cannot be disabled so you will not have to activate anything to run medick.
+        &nbsp;&nbsp;<h4><a name="web_server">2.2 Web Server, Apache 2.0 recommended</a></h4>
         Alltrough I tested medick with <a 
           href="http://www.lighttpd.net/" 
           target="_blank" 
@@ -122,8 +135,8 @@
         &nbsp;&nbsp;<i><a 
             href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html"
             title="Apache Module mod_rewrite"
-            target="_blank">mod_rewrite</a></i> for nice URLs.<br />
-        &nbsp;&nbsp;<b>Database Server</b><br />
+            target="_blank">mod_rewrite</a></i> for nice URLs.
+        &nbsp;&nbsp;<h4><a name="database_server">2.3 Database Server</a></h4>
         If you are going to use a database as a backend for your application, 
         medick commes with <a 
           href="http://creole.phpdb.org" 
@@ -303,7 +316,7 @@
               width="400" 
               alt="Medick Welcome Screen"
               title="Medick Welcome Screen"/>
-            <center>Click on image for a larger view.</center>
+            <br />Click on image for a larger view.
             </a>
         </div>
         &nbsp;&nbsp;You should see the "Welcome to Medick" page as shown on my screenshoot. 
@@ -320,7 +333,7 @@
               width="400"
               alt="Medick Routing Exception"
               title="Medick Routing Exception"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <br />
@@ -349,7 +362,7 @@
               width="400"
               alt="No index to invoke for this Controller" 
               title="No index to invoke for this Controller"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <br />
@@ -388,7 +401,7 @@
               width="350"
               alt="We have an index!"
               title="We have an index!"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         Reload your browser and you will see the default medick generated action: MainController#index 
@@ -408,7 +421,7 @@
               width="400" 
               alt="Render Text on Index" 
               title="Render Text on Index"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         &nbsp;<br style="clear:both"/>
@@ -421,7 +434,7 @@
               width="400"
               alt="Render Text on Index"
               title="Render Text on Index"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <br />
@@ -438,7 +451,7 @@
               width="400"
               alt="Editing MainController" 
               title="Editing MainController"/>
-              <center>Click on image for a larger view.</center>
+              Click on image for a larger view.
           </a>
         </div>
         <b>more to be added on editing maincontroller</b>
@@ -451,7 +464,7 @@
               width="400"
               alt="Editing the Template" 
               title="Editing the Tempalate"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <b>more to be added on editing say template</b>
@@ -464,7 +477,7 @@
               width="400"
               alt="The Result" 
               title="The Result"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <b>more to be added on editing say web</b>
@@ -477,7 +490,7 @@
               width="400"
               alt="Editing hello.routes.php" 
               title="Editing hello.routes.php"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <b>more to be added on editing hello.routes.php</b>
@@ -491,7 +504,7 @@
               width="400"
               alt="Default Application Entry" 
               title="Default Application Entry"/>
-              <center>Click on image for a larger view.</center>
+              <br />Click on image for a larger view.
           </a>
         </div>
         <b>more to be added on default application entry</b>
@@ -502,13 +515,13 @@
       <!-- /hello_world -->
       
       <!-- contribute -->
-      
       <div class="chapter">
         <h4 class="chapter_title"><a name="contribute">Contribute</a></h4>
-        <b>TBD.</b>
+        &nbsp;&nbsp;<h4><a name="whats_next">6.1 What's next?</a></h4>
+        &nbsp;&nbsp;<h4><a name="coding">6.2 Coding</a></h4>
+        &nbsp;&nbsp;<h4><a name="where">6.3 Where</a></h4>
         <a href="#top" class="top">Top</a>
-      </div>
-      
+      </div>      
       <!-- /contribute -->
       
       <!-- history -->
@@ -551,11 +564,13 @@
   </div>
   <div id="footer">
     <p>
-      Medick is an <a href="http://www.opensource.org/docs/definition.php"
-title="Open Source Definition" target="_blank">open source</a> project released
-under a <a href="http://www.opensource.org/licenses/bsd-license.php"
-title="BSD-style LICENSE" target="_blank">BSD-style</a> <a href="/LICENSE"
-title="BSD-style Licence">LICENSE</a>.
+      Medick is an <a 
+        href="http://www.opensource.org/docs/definition.php"
+	title="Open Source Definition" 
+	target="_blank">open source</a> project released under a <a 
+	href="http://www.opensource.org/licenses/bsd-license.php"
+	title="BSD-style LICENSE" 
+	target="_blank">BSD-style</a> <a href="/LICENSE" title="BSD-style Licence">LICENSE</a>.
     </p>
   </div>
 

Modified: trunk/docs/medick.website/i/say_web.jpg
===================================================================
(Binary files differ)

Modified: trunk/docs/medick.website/i/welcome_route_web.jpg
===================================================================
(Binary files differ)



From aurelian at berlios.de  Thu Mar  9 10:14:20 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Thu, 9 Mar 2006 10:14:20 +0100
Subject: [Medick-svn] r373 - in trunk/libs: action/controller/session active/record logger/outputter
Message-ID: <200603090914.k299EKMb026075@sheep.berlios.de>

Author: aurelian
Date: 2006-03-09 10:13:51 +0100 (Thu, 09 Mar 2006)
New Revision: 373

Removed:
   trunk/libs/action/controller/session/SessionException.php
Modified:
   trunk/libs/active/record/Field.php
   trunk/libs/logger/outputter/FileOutputter.php
Log:
 -- removed SessionException + minor API doc fixes

Deleted: trunk/libs/action/controller/session/SessionException.php
===================================================================
--- trunk/libs/action/controller/session/SessionException.php	2006-03-09 08:53:42 UTC (rev 372)
+++ trunk/libs/action/controller/session/SessionException.php	2006-03-09 09:13:51 UTC (rev 373)
@@ -1,49 +0,0 @@
-<?php
-// {{{ License
-//////////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
-// $Id$
-//
-//////////////////////////////////////////////////////////////////////////////////
-// }}}
-
-/**
- * @package locknet7.action.controller.session
- */
-
-class SessionException extends MedickException {
-
-    /**
-     * Constructor.
-     * Make a custom message
-     */
-    public function __construct($message, $code = 0) {
-        $msg = "Uh, ah!<br /><i>SessionException thrown!</i><br />Code: $code<br /><font color=\"green\">" . $message . "</font><br />";
-        parent::__construct($msg, $code);
-    }
-}

Modified: trunk/libs/active/record/Field.php
===================================================================
--- trunk/libs/active/record/Field.php	2006-03-09 08:53:42 UTC (rev 372)
+++ trunk/libs/active/record/Field.php	2006-03-09 09:13:51 UTC (rev 373)
@@ -51,8 +51,8 @@
      */
     private $formattedName;
 
-    /** @var
-        mixed value of the field */
+    /** @var mixed 
+        value of the field */
     private $value;
 
     /** @var string

Modified: trunk/libs/logger/outputter/FileOutputter.php
===================================================================
--- trunk/libs/logger/outputter/FileOutputter.php	2006-03-09 08:53:42 UTC (rev 372)
+++ trunk/libs/logger/outputter/FileOutputter.php	2006-03-09 09:13:51 UTC (rev 373)
@@ -35,7 +35,7 @@
 /**
  * It writes logging messages to a file
  * 
- * @package locknet7.logger
+ * @package medick.logger
  * @subpackage outputter
  * @author Oancea Aurelian
  */



From aurelian at berlios.de  Sun Mar 12 09:04:39 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sun, 12 Mar 2006 09:04:39 +0100
Subject: [Medick-svn] r376 - trunk/skel/public
Message-ID: <200603120804.k2C84d5r026211@sheep.berlios.de>

Author: aurelian
Date: 2006-03-12 09:04:30 +0100 (Sun, 12 Mar 2006)
New Revision: 376

Modified:
   trunk/skel/public/index.php
Log:
 -- single quotes for include_once in skel/public/index.php (path problems unse windows)

Modified: trunk/skel/public/index.php
===================================================================
--- trunk/skel/public/index.php	2006-03-10 20:39:48 UTC (rev 375)
+++ trunk/skel/public/index.php	2006-03-12 08:04:30 UTC (rev 376)
@@ -1,38 +1,8 @@
 <?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
 // $Id$
-//
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
 
-// load medick core
-include_once( "${CORE}" . DIRECTORY_SEPARATOR . "boot.php" );
+// Complete path to medick boot.php file.
+include_once( '${CORE}' . DIRECTORY_SEPARATOR . 'boot.php' );
 // Dispatch this request.
 Dispatcher::dispatch();
+



From aurelian at berlios.de  Sun Mar 12 09:07:19 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sun, 12 Mar 2006 09:07:19 +0100
Subject: [Medick-svn] r377 - branches/release_0.1/skel/public
Message-ID: <200603120807.k2C87JML029025@sheep.berlios.de>

Author: aurelian
Date: 2006-03-12 09:07:17 +0100 (Sun, 12 Mar 2006)
New Revision: 377

Modified:
   branches/release_0.1/skel/public/index.php
Log:
 -- MFT

Modified: branches/release_0.1/skel/public/index.php
===================================================================
--- branches/release_0.1/skel/public/index.php	2006-03-12 08:04:30 UTC (rev 376)
+++ branches/release_0.1/skel/public/index.php	2006-03-12 08:07:17 UTC (rev 377)
@@ -1,38 +1,8 @@
 <?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
 // $Id$
-//
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
 
-// load medick core
-include_once( "${CORE}" . DIRECTORY_SEPARATOR . "boot.php" );
+// Complete path to medick boot.php file.
+include_once( '${CORE}' . DIRECTORY_SEPARATOR . 'boot.php' );
 // Dispatch this request.
 Dispatcher::dispatch();
+



From aurelian at berlios.de  Tue Mar 14 07:14:41 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Tue, 14 Mar 2006 07:14:41 +0100
Subject: [Medick-svn] r378 - in trunk/libs: action/controller/http action/view active/record
Message-ID: <200603140614.k2E6EfDl022371@sheep.berlios.de>

Author: aurelian
Date: 2006-03-14 07:14:25 +0100 (Tue, 14 Mar 2006)
New Revision: 378

Modified:
   trunk/libs/action/controller/http/HTTPRequest.php
   trunk/libs/action/view/Base.php
   trunk/libs/action/view/HTML.php
   trunk/libs/active/record/Base.php
   trunk/libs/active/record/DatabaseRow.php
Log:
 -- removed COOKIES array from HTTPRequest merge
 -- added ActiveRecord::attributes() method
 -- removed HTML labels from FormHelper


Modified: trunk/libs/action/controller/http/HTTPRequest.php
===================================================================
--- trunk/libs/action/controller/http/HTTPRequest.php	2006-03-12 08:07:17 UTC (rev 377)
+++ trunk/libs/action/controller/http/HTTPRequest.php	2006-03-14 06:14:25 UTC (rev 378)
@@ -59,9 +59,10 @@
      * It builds the HTTPRequest object
      *
      * @todo a URI Helper should be written.
+     * @todo $_COOKIES are not merged anymore!!!
      */
     public function HTTPRequest() {
-        foreach ($_REQUEST as $key=>$value) {
+        foreach (array_merge($_GET,$_POST) as $key=>$value) {
             $this->setParameter($key, $value);
         }
 
@@ -77,7 +78,7 @@
         elseif (array_key_exists('REQUEST_URI', $_SERVER)) {
             $this->requestUri= substr($_SERVER['REQUEST_URI'],7);
         }
-        
+
         $this->session = new Session();
         $this->headers = HTTPRequest::getAllHeaders();
     }
@@ -85,11 +86,11 @@
     public function getHeaders() {
         return $this->headers;
     }
-    
+
     public function getHeader($name) {
         return $this->hasHeader($name) ? $this->headers[ucfirst($name)] : FALSE;
     }
-    
+
     public function hasHeader($name) {
         return isset($this->headers[ucfirst($name)]);
     }
@@ -104,7 +105,7 @@
     public function setRequestUri($uri) {
       $this->requestUri= $uri;
     }
-    
+
     /**
      * It gets a part of the path info associated with this request
      * @param int, key, the part index
@@ -132,7 +133,7 @@
     // public function getRequestURI() {  }
     public function getProtocol() {  }
     // }}}
-    
+
     /**
      * A wrapper around getallheaders apache function that gets a list
      * of headers associated with this HTTPRequest.
@@ -149,7 +150,7 @@
                 if(ereg('HTTP_(.+)',$header,$hp)) {
                     $headers[ucfirst(strtolower($hp[1]))] = $value;
                 }
-            }       
+            }
         }
         return $headers;
     }

Modified: trunk/libs/action/view/Base.php
===================================================================
--- trunk/libs/action/view/Base.php	2006-03-12 08:07:17 UTC (rev 377)
+++ trunk/libs/action/view/Base.php	2006-03-14 06:14:25 UTC (rev 378)
@@ -35,7 +35,7 @@
 include_once('action/view/HTML.php');
 
 /**
- * 
+ *
  * @package medick.action.view
  * @author Oancea Aurelian
  */
@@ -46,10 +46,10 @@
 }
 
 /**
- * 
+ *
  * @package medick.action.view
  * @author Oancea Aurelian
- */ 
+ */
 class ActionView extends Object {
 
     public static function factory($engine) {
@@ -58,7 +58,7 @@
 
     /**
      * Strips slashes, method called recursive
-     * 
+     *
      * @todo Move this OUT of this class, or, in __set.
      * @todo What if $value is Object?
      * @param mixed value, the value on witch we strip slashes.
@@ -86,16 +86,16 @@
  * @author Oancea Aurelian
  */
 class PHPTemplateEngine extends Object implements ITemplateEngine {
-    
+
     /** @var array
-        Container for templates variables */  
+        Container for templates variables */
     private $vars= array();
-    
+
     /**
      * It renders a template file
      *
      * @param string template file
-     */ 
+     */
     public function render_file($template_file) {
         return $this->render($template_file);
     }
@@ -107,7 +107,7 @@
      *
      * @param string controller
      * @param string patrial
-     */ 
+     */
     public function render_partial($controller, $partial) {
         $path= Registry::get('__injector')->getPath('views');
         if (NULL === $controller) {
@@ -121,7 +121,7 @@
 
     /**
      * Render the file.
-     * 
+     *
      * @param string file, the file to render.
      * @return string contents of the file
      * @throws FileNotFoundException if we cannot find the specified file
@@ -143,7 +143,7 @@
 
     /**
      * Wrapper for __set.
-     * 
+     *
      * A convenient way to make the migration from Smarty smoother
      * @see PHPTemplateEngine::__set()
      * @param string name
@@ -155,9 +155,9 @@
 
     /**
      * Overload default __set behavior from PHP
-     * 
+     *
      * This way, I`m able to register the vars passed to the template.
-     * 
+     *
      * Advantages: cannot call from template the private vars of this class
      * since $vars will act as a registry system
      * @param string name the name of the variable
@@ -169,7 +169,7 @@
 
     /**
      * Overload the default behavior of PHP get var.
-     * 
+     *
      * NOTE: Will rise an error if the variable is not set
      * @param string name the name of variable
      */

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2006-03-12 08:07:17 UTC (rev 377)
+++ trunk/libs/action/view/HTML.php	2006-03-14 06:14:25 UTC (rev 378)
@@ -36,9 +36,9 @@
  * @package medick.action.view
  * @subpackage helpers
  * @author Oancea Aurelian
- */ 
+ */
 class ActiveRecordHelper extends Object {
-    
+
     /**
      * Finds and retuns a HTML formatted string with errors for an ActiveRecord object
      *
@@ -51,7 +51,7 @@
      * @param array options the options where we can cusomize the look and feel of the error message.
      *                      this includes: css_class and heading
      * @return string a HTML formatted string
-     */ 
+     */
     public static function error_messages_for(ActiveRecord $object, $options=array()) {
         $css_class= isset($options['css_class']) ? $options['css_class'] : 'formErrors';
         $heading  = isset($options['heading']) && (int)$options['heading'] > 0 && (int)$options['heading'] < 6 ? $options['heading'] : 2;
@@ -89,11 +89,11 @@
 
 }
 
-/** 
+/**
  *
  * @package medick.action.view
  * @subpackage helpers
- * @see http://api.rubyonrails.com/classes/ActionView/Helpers/FormHelper.html 
+ * @see http://api.rubyonrails.com/classes/ActionView/Helpers/FormHelper.html
  * @author Oancea Aurelian
  */
 class FormHelper extends Object {
@@ -102,11 +102,9 @@
         if (!$field= $object->getRow()->getFieldByName($method)) {
             return; // ex?
         }
-
         $id   = strtolower(get_class($object)) . '_'.$method;
         $name = strtolower(get_class($object)).'['.$method.']';
-        $buff = "<div class=\"formRow\">\n<label for=\"" . $id . "\">" . $field->getFormattedName() . "</label><br />\n";
-
+        $buff = '';
         $errors= FALSE;
         if($field->hasErrors()) {
             $buff .= '<div class="fieldWithErrors">';
@@ -123,7 +121,7 @@
         if ($errors) {
             $buff .= '</div>';
         }
-        return $buff . "</div>";
+        return $buff;
     }
 
     public static function text_area(ActiveRecord $object, $method, $options=array()) {
@@ -132,7 +130,7 @@
         }
         $id   = strtolower(get_class($object)) . '_'.$method;
         $name = strtolower(get_class($object)).'['.$method.']';
-        $buff = "<div class=\"formRow\">\n<label for=\"" . $id . "\">" . $field->getFormattedName() . "</label><br />\n";
+        $buff = '';
         $errors= FALSE;
         if($field->hasErrors()) {
             $buff .= '<div class="fieldWithErrors">';
@@ -148,56 +146,50 @@
         if ($errors) {
             $buff .= '</div>';
         }
-        return $buff . "</div>";
+        return $buff;
     }
 
-    public static function check_box(
-            Object $object,
-            $method,
-            $options = array(),
-            $checked_value = "1",
-            $unchecked_value = "0") {
-                
+    public static function check_box(Object $object, $method, $options = array()) {
         if (!$field= $object->getRow()->getFieldByName($method)) {
             return; // ex?
         }
-        $id   = strtolower(get_class($object)) . '_'.$method;
-        $name = strtolower(get_class($object)).'['.$method.']';
-        $buff = "<div class=\"formRow\">\n<label for=\"" . $id . "\">" . $field->getFormattedName() . "</label><br />\n";
+        $id   = strtolower($object->getClassName()) . '_' .$method;
+        $name = strtolower($object->getClassName()) . '[' . $method . ']';
+        $buff = '';
         $errors= FALSE;
         if($field->hasErrors()) {
             $buff .= '<div class="fieldWithErrors">';
             $errors= TRUE;
         }
-                
         $buff .= '<input type="checkbox" id="' . $id . '" name="' . $name . '" ';
         foreach ($options as $key=>$value) {
-            $buff .= $key . '="'.$value.'" ';
+            $buff .= $key . '="' . $value . '" ';
         }
         if ((int)$object->$method > 0) {
-            $buff .= 'value="1" checked="checked" ';
+            $buff .= 'value="1" checked="checked"';
         } else {
             $buff .= 'value="0"';
         }
-
         $buff .= ' />';
-        // $buff .= '<input name="'.strtolower(get_class($object)).'['.$method.']" type="hidden" ';
+        if ($errors) {
+            $buff .= '</div>';
+        }
+        $buff .= '<input name="' . $name . '" value="' . $object->$method . '" type="hidden" />';
         return $buff;
     }
 }
 
 /**
- * 
+ *
  * @package medick.action.view
  * @subpackage helpers
  * @author Oancea Aurelian
- */ 
+ */
 class URL extends Object {
-  
+
     public static function create($controller, $action='index', $params=array(), $ext='html') {
         $config = Registry::get('__configurator');
         $base   = $config->getProperty('document_root');
-        
         if (!$config->getProperty('rewrite')) {
             $base .= '/index.php';
         }
@@ -210,7 +202,7 @@
 }
 
 /**
- * 
+ *
  * @package medick.action.view
  * @subpackage helpers
  * @deprecated use FormHelper since it provides more features

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2006-03-12 08:07:17 UTC (rev 377)
+++ trunk/libs/active/record/Base.php	2006-03-14 06:14:25 UTC (rev 378)
@@ -45,20 +45,20 @@
 
 /**
  * Main ActiveRecord Class
- * 
+ *
  * @package medick.active.record
  * @author Oancea Aurelian
  */
 abstract class ActiveRecord extends Object {
 
-    /** @var string 
+    /** @var string
         class name: Person */
     protected $class_name = NULL;
-    
+
     /** @var string
         table mane: persons */
     protected $table_name = NULL;
-    
+
     /** @var CreoleConnection
         database connection */
     static protected $conn= NULL;
@@ -84,17 +84,17 @@
      * @return Creole database connection
      */
     public static function establish_connection () {
-        if (self::$conn === NULL) {
-            self::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
+        if (ActiveRecord::$conn === NULL) {
+            ActiveRecord::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
         }
-        return self::$conn;
+        return ActiveRecord::$conn;
     }
 
     /**
      * Close the Database Connection
      */
     public static function close_connection() {
-        self::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn())->close();
+        ActiveRecord::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn())->close();
     }
 
     /**
@@ -104,7 +104,7 @@
      * @final because there is no reason to overwrite in parent classes, PHP Engine will call this constructor by default.
      */
     public final function ActiveRecord($params = array()) {
-        self::establish_connection();
+        ActiveRecord::establish_connection();
         $this->class_name = $this->getClassName();
         $this->table_name = Inflector::pluralize(strtolower(Inflector::underscore($this->class_name)));
 
@@ -131,8 +131,9 @@
             }
             $this->row[] = $field;
         }
-
+        // $logger= Registry::get('__logger');
         foreach ($params as $field_name => $field_value) {
+            // $logger->debug('['.__LINE__ . '] Name: ' . $field_name . ' Value: ' . $field_value);
             $this->$field_name = $field_value;
         }
     }
@@ -156,7 +157,7 @@
 
     /**
      * It gets the value of the field
-     * 
+     *
      * @see http://php.net/manual/en/language.oop5.overloading.php
      * @param string, field_name, the field name
      * @throws ActiveRecordException
@@ -194,7 +195,7 @@
      *
      * Basically it checks before save, insert, update or delete calls that
      * the current run has affected fields and throws an ActiveRecordException if not.
-     * 
+     *
      * @see http://php.net/manual/en/language.oop5.overloading.php
      * @param string method name
      * @param array arguments
@@ -343,9 +344,20 @@
      * </code>
      */
     public final function save() {
+        $logger= Registry::get('__logger');
+        if ( !$this->before_save() ) {
+            $logger->info('Before Save Failed!');
+            return false;
+        }
+        if (count($this->row->collectErrors()) > 0) {
+            $logger->info('Object has Errors!');
+            return false;
+        }
+/*
         if ( !$this->before_save() || count($this->row->collectErrors()) > 0) {
             return FALSE;
         }
+*/
         if ($this->row->getPrimaryKey()->isAffected) {
             return $this->update();
         } else {
@@ -370,9 +382,20 @@
      * @throws SQLException
      */
     public final function insert() {
+        $logger= Registry::get('__logger');
+        if ( !$this->before_insert() ) {
+            $logger->info('Before Save Failed!');
+            return false;
+        }
+        if (count($this->row->collectErrors()) > 0) {
+            $logger->info('Object has Errors!');
+            return false;
+        }
+/*
         if (!$this->before_insert() || count($this->row->collectErrors()) > 0) {
-            return FALSE;
+            return false;
         }
+*/
         $af_rows = $this->performQuery($this->getInsertSql());
         $id = $this->getNextId();
         $this->after_insert();
@@ -397,13 +420,27 @@
      * @throws SQLException
      */
     public final function update() {
-        if (!$this->before_update() || count($this->row->collectErrors()) > 0) {
-            return FALSE;
+        $logger= Registry::get('__logger');
+        if ( !$this->before_update() ) {
+            $logger->info('Before Update Failed!');
+            return false;
         }
+        if (count($this->row->collectErrors()) > 0) {
+            $logger->info('Object has Errors!');
+            return false;
+        }
         $af= $this->performQuery($this->getUpdateSql());
         $this->after_update();
         return $af;
     }
+
+    public final function attributes(/*Array*/ $params=array()) {
+        foreach($params as $name=>$value) {
+            $this->$name=$value;
+        }
+        return $this;
+    }
+
     // }}}
 
     // {{{ delete
@@ -467,7 +504,7 @@
         ActiveRecord::populateStmtValues($stmt, $this->row->getAffectedFields());
         $af_rows = $stmt->executeUpdate();
         $stmt->close();
-        // Registry::get('__logger')->debug('Performing sql query: ' . ActiveRecord::$conn->lastQuery);
+        Registry::get('__logger')->debug('Query: ' . ActiveRecord::$conn->lastQuery);
         // $this->_reset();
         return $af_rows;
     }

Modified: trunk/libs/active/record/DatabaseRow.php
===================================================================
--- trunk/libs/active/record/DatabaseRow.php	2006-03-12 08:07:17 UTC (rev 377)
+++ trunk/libs/active/record/DatabaseRow.php	2006-03-14 06:14:25 UTC (rev 378)
@@ -36,7 +36,7 @@
 
 /**
  * It represents a Row from the Database
- * 
+ *
  * @package medick.active.record
  * @author Oancea Aurelian
  */
@@ -59,14 +59,14 @@
     private $affected = FALSE;
 
     /** @var string
-        this database table name */ 
+        this database table name */
     private $table;
 
     /**
      * Creates a new DatabaseRow
      *
      * @param string table, the table name where this row is from
-     */ 
+     */
     public function DatabaseRow($table) {
         $this->table= $table;
         parent::__construct();
@@ -76,14 +76,14 @@
      * It gets the table name
      *
      * @return string, the table name
-     */ 
+     */
     public function getTable() {
         return $this->table;
     }
 
     /**
      * Automatic trigger executed when a new Field is added on to this Collection
-     * 
+     *
      * @see Collection::onAdd
      */
     public function onAdd(Object $field) {
@@ -97,7 +97,7 @@
 
     /**
      * Set the affected modifier
-     * 
+     *
      * @param bool affected
      */
     public function setAffected($affected) {
@@ -106,7 +106,7 @@
 
     /**
      * It checks if it has affected fields by this run
-     * 
+     *
      * @return bool TRUE if it has, FALSE otherwise
      */
     public function hasAffected() {
@@ -143,7 +143,7 @@
      * Collects errors from the fields added on this row
      *
      * @return array an array of errors
-     */ 
+     */
     public function collectErrors() {
         $errors= array();
         $it = $this->iterator();
@@ -155,24 +155,24 @@
         }
         return $errors;
     }
-    
+
     /**
      * Updates the Status of a Filed
      *
      * @param Field field
      * @param mixed value the new field value
-     */ 
+     */
     public function updateStatus(Field $field, $value) {
         $field->setValue($value);
         $field->isAffected = TRUE;
         $this->field_names[] = $field->getName();
-        $this->affected_fields[] = $field;
+        $this->affected_fields[$field->getName()] = $field;
         $this->affected = TRUE;
     }
 
     /**
      * It gets an array with the names of the affected fields
-     * 
+     *
      * @return array
      */
     public function getAffectedFieldsNames() {
@@ -181,7 +181,7 @@
 
     /**
      * Get an array of objects Field[] that are affected(changed) by this run
-     * 
+     *
      * @return Field[]
      */
     public function getAffectedFields() {



From aurelian at berlios.de  Sat Mar 18 18:36:57 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sat, 18 Mar 2006 18:36:57 +0100
Subject: [Medick-svn] r379 - applications/eltodo/app/views/layouts applications/eltodo/app/views/project applications/eltodo/conf applications/eltodo/public trunk trunk/bin trunk/libs trunk/libs/action/controller trunk/libs/action/view trunk/libs/configurator trunk/libs/context trunk/libs/medick trunk/skel/config trunk/skel/public trunk/skel/scripts
Message-ID: <200603181736.k2IHavaw028715@sheep.berlios.de>

Author: aurelian
Date: 2006-03-18 18:36:03 +0100 (Sat, 18 Mar 2006)
New Revision: 379

Added:
   trunk/libs/context/
   trunk/libs/context/ContextManager.php
Removed:
   applications/eltodo/public/index.html
Modified:
   applications/eltodo/app/views/layouts/eltodo.phtml
   applications/eltodo/app/views/project/add.phtml
   applications/eltodo/conf/eltodo.xml
   applications/eltodo/public/.htaccess
   applications/eltodo/public/index.php
   trunk/CHANGELOG
   trunk/TODO
   trunk/VERSION
   trunk/bin/medick.php
   trunk/boot.php
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/Dispatcher.php
   trunk/libs/action/controller/Injector.php
   trunk/libs/action/controller/Map.php
   trunk/libs/action/view/HTML.php
   trunk/libs/configurator/IConfigurator.php
   trunk/libs/configurator/XMLConfigurator.php
   trunk/libs/medick/Medick.php
   trunk/libs/medick/Object.php
   trunk/skel/config/application.xml
   trunk/skel/public/default.htaccess
   trunk/skel/public/index.php
   trunk/skel/scripts/generator.php
Log:
 -- added environments concept
 -- added ActiveRecord::attributes(Array $attributes)
 -- added ContextManager class
 -- eltodo sample fixed to work with the new concepts
 -- !!! to get COOKIES from HTTPRequest, use $request->getHeader('Cookies') !!!
 -- !!! unit-tests related with XMLConfigurator are broken !!!
 -- !!! removed _SERVER definitions from .htaccess file (was a bad ideea) !!!


Modified: applications/eltodo/app/views/layouts/eltodo.phtml
===================================================================
--- applications/eltodo/app/views/layouts/eltodo.phtml	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/app/views/layouts/eltodo.phtml	2006-03-18 17:36:03 UTC (rev 379)
@@ -30,7 +30,7 @@
 
             <div id="content"><?=$content_for_layout;?></div>
 
-            <div id="footer"><p>elTodo :: powered by <a href="http://medick.locknet.ro">medick</a>.</p></div>
+            <div id="footer"><p>elTodo :: powered by <a href="http://medick.locknet.ro">medick (<?=$__version;?>)</a>.</p></div>
 
         </div>
 

Modified: applications/eltodo/app/views/project/add.phtml
===================================================================
--- applications/eltodo/app/views/project/add.phtml	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/app/views/project/add.phtml	2006-03-18 17:36:03 UTC (rev 379)
@@ -4,10 +4,16 @@
     <fieldset>
         <legend>Create a new Project</legend>
         <?=ActiveRecordHelper::error_messages_for($project);?>
+        <p><label for="project_name">Name</label><br />
         <?=FormHelper::text_field($project, 'name', array('maxlength'=>255,'size'=>35)); ?>
-        <br />
+        </p>
+        
+        <p><label for="project_description">Description</label><br />
         <?=FormHelper::text_area($project, 'description', array('cols'=>40,'rows'=>20)); ?>
+        </p>
+        
         <?=Form::submit('submit', 'Submit', array('class'=>'submit-button')) ?>
+        
     </fieldset>
 </form>
 

Modified: applications/eltodo/conf/eltodo.xml
===================================================================
--- applications/eltodo/conf/eltodo.xml	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/conf/eltodo.xml	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,35 +1,78 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!--
- ! $Id: application.xml 187 2005-10-07 05:09:20Z aurelian $
- -->
+<!-- 
+ ! $Id: $
+ ! -->
+<application name="eltodo">
+    <!-- localhost environment -->
+    <environment name="localhost">
+        <!-- general properties -->
+        <properties>
+            <path>/wwwroot/medick/applications/eltodo</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://localhost</server_name>
+            <document_root>/eltodo</document_root>
+            <rewrite>on</rewrite>
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="/wwwroot/medick/applications/eltodo/log/eltodo.log" />
+                </outputter>
+                <!-- <outputter name="stdout" level="0" /> -->
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on eltodo" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "mysql"
+                 hostspec = "localhost"
+                 database = "eltodo"
+                 username = "root"
+                 password = "virus" />
+        </database>
+    </environment>
 
-<application>
-     
-  <!-- General properties -->
-  <property name="server_name"      value="http://localhost" />
-  <property name="document_root"    value="/eltodo" />
-  <property name="rewrite"          value="on" />
-     
-  <!-- Logger System -->
-  <logger>
-      <formatter>simple</formatter>
-      <outputters>
-        <outputter name="file" level="0">
-            <property name="path" value="/wwwroot/medick/applications/eltodo/log/eltodo.log" />
-        </outputter>
-        <!-- <outputter name="stdout"  level="0" /> -->
-      </outputters>
-  </logger>
-
-  <!-- Database(s) Settings -->
-  <database default="one">
-    <dsn id = "one"
-           phptype  = "mysql"
-           hostspec = "localhost"
-           database = "eltodo"
-           username = "root"
-           password = "virus" />
-  </database>
-
+    <!-- a sample test environment -->
+    <environment name="test">
+        <!-- general properties -->
+        <properties>
+            <path>/wwwroot/medick/applications/eltodo</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://29dots.com</server_name>
+            <document_root>/eltodo</document_root>
+            <rewrite>on</rewrite>
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="/wwwroot/medick/applications/eltodo/log/eltodo-test.log" />
+                </outputter>
+                <!-- <outputter name="stdout" level="0" /> -->
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on 29dots.com::eltodo" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "sqlite"
+                 database = "/wwwroot/medick/applications/eltodo/db/eltodo-sqlite.db" />
+        </database>
+    </environment>
+  
 </application>
-
+  

Modified: applications/eltodo/public/.htaccess
===================================================================
--- applications/eltodo/public/.htaccess	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/public/.htaccess	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,31 +1,40 @@
-# eltodo project .htaccess file
-# $Id: .htaccess 181 2005-10-03 20:34:29Z aurelian $
+# .htaccess file for eldepot sample medick application
+# $Id: default.htaccess 368 2006-03-05 09:44:42Z aurelian $
 
 # Configuration
-# php_value auto_prepend_file /wwwroot/medick/trunk/boot.php
 
-SetEnv MEDICK_APPLICATION_PATH /wwwroot/medick/applications/eltodo
-SetEnv MEDICK_APPLICATION_NAME eltodo
+# 1. Apache Section.
+DirectoryIndex index.html index.php
 
+# 2. PHP Options.
+# this options will not work for php as cgi
+# and it will be removed in version 0.2
+# HINT: move this one to PHPTemplateView class
 php_value short_open_tag 1
+# this should depend on environment.
+# while we are on "planning", we will 
+# keep this to 1
+php_value display_errors 1
 
-#ErrorDocument 404 /todo.html
- 
+# 4. Rewrite
 RewriteEngine on
 
-RewriteRule ^$ index.php  [L]
+# Set 1.
+#RewriteCond %{REQUEST_FILENAME} !-s
+#RewriteCond %{REQUEST_URI} !^index.php/$
+#RewriteRule   ^([^i][^n][^d][^e][^x].*)$  index.php/$1/ [NS,L]
+
+# Set 2.
+RewriteBase /eltodo
+
+# Send requests without parameters to index.php
+# -- disabled since we want to show index.html
+# -- default index page for medick.
+#RewriteRule ^$ index.php  [L]
+# Send requests for files that exist to those files.
 RewriteCond %{REQUEST_FILENAME} !-f
+# Send requests for directories that exist to those directories.
 RewriteCond %{REQUEST_FILENAME} !-d
+# Send requests to index.php, appending the query string part.
 RewriteRule (.*) index.php/$1  [QSA,L]
 
-# all files with .something are skipped
-# RewriteCond %{REQUEST_URI} \..+$
-# RewriteCond %{REQUEST_URI} !\.html$
-# RewriteRule .* - [L]
-# the others are redirected to the front web controller
-# RewriteRule ^(.*)$ index.php [QSA,L]
-
-#RewriteCond %{REQUEST_FILENAME} !-s
-#RewriteCond %{REQUEST_URI} !^index.php/$
-#RewriteRule   ^([^i][^n][^d][^e][^x].*)$  index.php/$1/ [NS,L]
-

Deleted: applications/eltodo/public/index.html
===================================================================
--- applications/eltodo/public/index.html	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/public/index.html	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,18 +0,0 @@
-<html>
-    <head>
-        <!-- $Id$ -->
-        <title>Welcome to Medick!</title>
-     </head>
-     <body>
-         <h3>
-             <center>Welcome To Medick</center>
-         </h3>
-
-         <h4>You are ready to go!</h4>
-         <p><b>Application name :</b> eltodo</p>
-         <p><b>Develop eltodo application on: </b>/wwwroot/medick/applications/eltodo</p>
-         <p>Setup a default controller in <i>/wwwroot/medick/applications/eltodo/config/eltodo.routes.php</i>, and remove this file.</p>
-         <p>Ask for support on medick <a href="https://lists.berlios.de/mailman/listinfo/medick-devel">development list</a>.</p>
-    </body>
-</html>
-

Modified: applications/eltodo/public/index.php
===================================================================
--- applications/eltodo/public/index.php	2006-03-14 06:14:25 UTC (rev 378)
+++ applications/eltodo/public/index.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,42 +1,19 @@
 <?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice, 
-//   this list of conditions and the following disclaimer. 
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation 
-//   and/or other materials provided with the distribution. 
-//   * Neither the name of locknet.ro nor the names of its contributors may 
-//   be used to endorse or promote products derived from this software without 
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// $Id: index.php 376 2006-03-12 08:04:30Z aurelian $
+
 // 
-// $Id: index.php 183 2005-10-07 04:53:56Z aurelian $
+// This file is part of eltodo project
+// auto-generated on  with medick version: 0.2.1
 // 
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
 
-/**
- * Index.php file.
- * The file __APPLICATION__NAME__.bootstrap.php should be included here.
- */
-
+// complete path to medick boot.php file.
 include_once('/wwwroot/medick/trunk/boot.php');
-Dispatcher::dispatch();
+// complete path to eltodo.xml
+// and environment to load
+$d= new Dispatcher(
+          ContextManager::load(
+            '/wwwroot/medick/applications/eltodo/conf/eltodo.xml',
+            'localhost')
+        );
+$d->dispatch();
 

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/CHANGELOG	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,7 +1,12 @@
 $Id$
 (*) SVN version
 
-0.2.0(*)
+0.2.1(18.Mar.2006)
+    - Added ``environment" concept
+    - Added ActiveRecord::attributes() method
+    - Added ContextManager
+    - removed _SERVER[MEDICK_APPLICATION_NAME] and _SERVER[MEDICK_APPLICATION_PATH]
+    - COOKIES are not merged with HTTPRequest::parameters
 
 0.1.0(04.Mar.2006)
     - Renamed ActionViewBase to ActionView, ActionControllerBase to ActionController and ActiveRecordBase to ActiveRecord;

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/TODO	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,25 +1,21 @@
 $Id$
-
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 Medick TODO list.
-LEGEND:
-(*) done tasks.
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Planned features for 0.2 series
-    -> environments (0.2.1)
-    -> context like (0.2.2)
-    -> cheap cache in ActiveRecord (0.2.3)
-    -> routing requirements (0.2.3)
-    -> expandable validators (0.2.4)
-    -> customizable error messages (0.2.4)
-    -> write in associations (0.2.5)
-    -> refactor && unit-test
+*Planned features for 0.2 series*
+    # -environments (0.2.1)-
+    # context like (0.2.2)
+    # cheap cache in ActiveRecord (0.2.3)
+    # routing requirements (0.2.3)
+    # expandable validators (0.2.4)
+    # customizable error messages (0.2.4)
+    # write in associations (0.2.5)
+    # refactor && unit-test
     
-Planned features for 0.3 series
-    -> scaffolding generator
-    -> refactor && unit-test
-    -> RDBAC
-    -> i18n, l10n
-    -> caching
-
+*Planned features for 0.3 series*
+    # scaffolding generator
+    # refactor && unit-test
+    # RDBAC
+    # i18n, l10n
+    # caching

Modified: trunk/VERSION
===================================================================
--- trunk/VERSION	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/VERSION	2006-03-18 17:36:03 UTC (rev 379)
@@ -1 +1 @@
-0.2.0-svn
+0.2.1

Modified: trunk/bin/medick.php
===================================================================
--- trunk/bin/medick.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/bin/medick.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -113,19 +113,23 @@
 );
 
 $search= array(
-            '${LOG}',
-            '${CORE}',
-            '${APP_PATH}',
-            '${APP_NAME}',
-            '${MEDICK_V}'
+            // '${LOG}',
+            '${medick.core}',
+            '${app.path}',
+            '${app.name}',
+            '${ds}',
+            '${medick.version}',
+            '${date}'
           );
 
 $replace= array(
-            $app_location.DIRECTORY_SEPARATOR.$folders['log'].DIRECTORY_SEPARATOR.$short_name.'.log',
+            // $app_location.DIRECTORY_SEPARATOR.$folders['log'].DIRECTORY_SEPARATOR.$short_name.'.log',
             $medick_core,
             $app_location,
             $short_name,
-            $medick_version
+            DIRECTORY_SEPARATOR,
+            $medick_version,
+            date('Y M d H:i:s')
           );
 
 foreach ($files as $from=>$file) {

Modified: trunk/boot.php
===================================================================
--- trunk/boot.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/boot.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -53,19 +53,4 @@
 include_once('medick/Medick.php');
 set_error_handler(array(new ErrorHandler(), 'raiseError'));
 include_once('action/controller/Dispatcher.php');
-include_once('configurator/XMLConfigurator.php');
-include_once('logger/Logger.php');
 
-$conf_files = $_SERVER['MEDICK_APPLICATION_PATH'] . DIRECTORY_SEPARATOR . 'conf' .
-                        DIRECTORY_SEPARATOR . $_SERVER['MEDICK_APPLICATION_NAME'];
-
-$configurator= new XMLConfigurator($conf_files . '.xml');                        
-Registry::put($configurator, '__configurator');
-
-$logger= Registry::put(new Logger($configurator), '__logger');
-
-$logger->debug('Medick $v: ' . Medick::getVersion());
-$logger->debug('Config: ' . $conf_files . '.xml');
-$logger->debug('Routes: ' . $conf_files . '.routes.php');
-include_once($conf_files . '.routes.php');
-

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/action/controller/Base.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -329,9 +329,12 @@
         $this->template = ActionView::factory('php');
         // predefined variables:
         // TODO: check if we have a / at the end, if not, add one
-        $this->template->assign('__base', $this->config->getProperty('document_root').'/');
-        $this->template->assign('__server', $this->config->getProperty('server_name'));
+        
+        $this->template->assign('__base', $this->config->getWebContext()->document_root .'/');
+        $this->template->assign('__server', $this->config->getWebContext()->server_name);
+        
         $this->template->assign('__controller', $this->params['controller']);
+        $this->template->assign('__version', Medick::getVersion());
         $this->logger->debug($this->request->toString());
     }
 
@@ -370,8 +373,9 @@
         if (is_null($controller)) {
             $controller= $this->params['controller'];
         }
-        $redirect_to= $this->config->getProperty('server_name') . $this->config->getProperty('document_root') . '/';
-        if (!$this->config->getProperty('rewrite')) {
+        $redirect_to= $this->config->getWebContext()->server_name . $this->config->getWebContext()->document_root . '/';
+        $rewrite = strtolower($this->config->getWebContext()->rewrite);
+        if ($rewrite == 'false' || $rewrite == 'off' || $rewrite == 0) {
             $redirect_to .= 'index.php/';
         }
         $redirect_to .= $controller . '/' . $action;

Modified: trunk/libs/action/controller/Dispatcher.php
===================================================================
--- trunk/libs/action/controller/Dispatcher.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/action/controller/Dispatcher.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -38,29 +38,49 @@
 include_once('action/controller/Request.php');
 include_once('action/controller/Response.php');
 include_once('action/controller/Base.php');
+include_once('context/ContextManager.php');
+include_once('logger/Logger.php');
 
 /**
  * It knows how to dispatch a request
  * 
- * The role of this class will increase in the next version.
+ * The role of this class will increase in the next versions.
  *
  * @package medick.action.controller
  * @author Oancea Aurelian
  */
 class Dispatcher extends Object {
 
+    private $manager;
+    
+    public function Dispatcher(ContextManager $manager) {
+        $this->manager= $manager;
+    }
+    
     /**
      * Framework entry point
      * @return void.
      */
-    public static function dispatch() {
+    public function dispatch() {
         $request  = new HTTPRequest();
         $response = new HTTPResponse();
+        
         try {
+            $configurator= $this->manager->getConfigurator();
+            Registry::put($configurator, '__configurator');
+            Registry::put($logger= new Logger($configurator), '__logger');
+            $logger->debug('Config File: ' . $configurator->getConfigFile());
+            $ap= $configurator->getApplicationPath();
+            $an= $configurator->getApplicationName();
+            $logger->debug("{app.name} -> $an");
+            $routes_path= $ap . DIRECTORY_SEPARATOR . 'conf' . DIRECTORY_SEPARATOR . $an . '.routes.php';
+            include_once($routes_path);
+            $logger->debug("routes loaded from: $routes_path");
+            $logger->debug("Medick {" . Medick::getVersion() . "} ready to dispatch.");
             ActionControllerRouting::recognize($request)->process($request, $response)->dump();
         } catch (Exception $ex) {
             ActionController::process_with_exception($request, $response, $ex)->dump();
-            Registry::get('__logger')->warn($ex->getMessage());
+            $logger->warn($ex->getMessage());
         }
     }
 }

Modified: trunk/libs/action/controller/Injector.php
===================================================================
--- trunk/libs/action/controller/Injector.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/action/controller/Injector.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -62,14 +62,8 @@
     public function Injector($append= TRUE) {
         $this->config = Registry::get('__configurator');
         $this->logger = Registry::get('__logger');
-        if (array_key_exists('MEDICK_APPLICATION_PATH', $_SERVER)) {
-            $app_path = $_SERVER['MEDICK_APPLICATION_PATH'];
-        } else {
-            $app_path = $this->config->getProperty('application_path');
-        }
+        $app_path= $this->config->getApplicationPath() . DIRECTORY_SEPARATOR;
         
-        $app_path .= DIRECTORY_SEPARATOR;
-        
         if ($append) {
             $app_path .= 'app' . DIRECTORY_SEPARATOR;
         }

Modified: trunk/libs/action/controller/Map.php
===================================================================
--- trunk/libs/action/controller/Map.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/action/controller/Map.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -58,7 +58,7 @@
         foreach ($this->elements as $element) {
             if ($element->match($request)) return $element;
         }
-        throw new RoutingException('Cannot find a Route for this hash: ' . $request->getPathInfo());    
+        throw new RoutingException('Cannot find a Route for this hash: ' . $request->getRequestURI());
     }
     
     public function getRouteByName($name) {

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/action/view/HTML.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -189,8 +189,9 @@
 
     public static function create($controller, $action='index', $params=array(), $ext='html') {
         $config = Registry::get('__configurator');
-        $base   = $config->getProperty('document_root');
-        if (!$config->getProperty('rewrite')) {
+        $base   = $config->getWebContext()->document_root;
+        $rewrite= strtolower($config->getWebContext()->rewrite);
+        if ($rewrite == 'false' || $rewrite == 'off' || $rewrite == 0) {
             $base .= '/index.php';
         }
         $buff = $base . '/' . $controller . '/' . $action;

Modified: trunk/libs/configurator/IConfigurator.php
===================================================================
--- trunk/libs/configurator/IConfigurator.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/configurator/IConfigurator.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -76,7 +76,7 @@
      * @return string, the property value
      * @throws ConfiguratorException if the property is not found
      */
-    function getProperty($name);
+    // function getProperty($name);
 
     /**
      * Based on id we return the dsn array

Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/configurator/XMLConfigurator.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -46,13 +46,31 @@
     /** @var SimpleXML */
     protected $sxe;
 
+    protected $application_name;
+    
+    protected $config_file;
+    
     /**
      * Constructor
      * 
      * @param string/file xml
      * @throws ConfiguratorException
      */
-    public function XMLConfigurator($xml) {
+    public function XMLConfigurator($stream, $env) {
+        $xmlelement= simplexml_load_file($stream);
+        foreach($xmlelement->environment as $e) {
+            if ($e['name']==$env) {
+                $this->sxe= $e;
+                break;
+            }
+        }
+
+        if ($this->sxe === NULL) {
+            throw new ConfiguratorException('Cannot find environment: ' . $env . ' in ' . $stream);
+        }
+        $this->application_name= $xmlelement['name'];
+        $this->config_file = $stream;
+        /*
         if (file_exists($xml)) {
             if (is_readable($xml)) {
                 $this->sxe = simplexml_load_file($xml, 'SimpleXMLIterator');
@@ -65,8 +83,25 @@
         if ($this->sxe === false) {
             throw new ConfiguratorException("Cannot read: " . $xml . " Bad Format!");
         }
+        */
     }
 
+    public function getApplicationName() {
+        return $this->application_name;
+    }
+    
+    public function getApplicationPath() {
+        return $this->sxe->properties->path;
+    }
+    
+    public function getWebContext() {
+        return $this->sxe->web;
+    }
+    
+    public function getConfigFile() {
+        return $this->config_file;
+    }
+    
     /**
      * Configuration Example:
      * <code>
@@ -142,32 +177,6 @@
         return ucfirst((string)trim($this->sxe->logger->formatter) . 'Formatter');
     }
 
-    /** @see IConfigurator::getProperty() */
-    public function getProperty($name) {
-        foreach($this->sxe->property as  $properties ) {
-            if($properties['name'] != $name)
-                continue;
-            $_query= (string)trim($properties['value']);
-            if(
-                ($_query=='') ||
-                (strtolower($_query) == 'false') ||
-                (strtolower($_query)=='off') ||
-                ($_query == '0')
-            ) {
-                return FALSE;
-            } elseif(
-                (strtolower($_query)=='true') ||
-                (strtolower($_query)=='on') ||
-                ($_query == '1')
-            ) {
-                return TRUE;
-            } else {
-                return (string)$_query;
-            }
-        }
-        throw new ConfiguratorException('Property ' . $name . ' not found!');
-    }
-
     /**
      * Dinamically sets a proprety on runtime.
      *

Added: trunk/libs/context/ContextManager.php
===================================================================
--- trunk/libs/context/ContextManager.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/context/ContextManager.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -0,0 +1,61 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005,2006 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * 
+ * @package medick.context
+ */
+class ContextManager extends Object {
+
+    static protected $instance= NULL;
+
+    static public function load($stream, $environment) {
+
+        if (ContextManager::$instance === NULL) {
+            ContextManager::$instance= new ContextManager($stream, $environment);
+        }
+        return ContextManager::$instance;
+    }
+
+    private function ContextManager($stream, $environment) {
+        include_once('configurator/XMLConfigurator.php');
+        $this->configurator= new XMLConfigurator($stream, $environment);
+    }
+
+    public function getConfigurator() {
+        return $this->configurator;
+    }
+    
+}
+ 


Property changes on: trunk/libs/context/ContextManager.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/medick/Medick.php
===================================================================
--- trunk/libs/medick/Medick.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/medick/Medick.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -52,7 +52,7 @@
      * @return string the medick version
      */
     public static function getVersion() {
-        return '0.2.0-svn';
+        return '0.2.1';
     }
 
 }

Modified: trunk/libs/medick/Object.php
===================================================================
--- trunk/libs/medick/Object.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/libs/medick/Object.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -55,7 +55,7 @@
      * @throws ReflectionException
      */
     public function getClass() {
-        return new ReflectionClass($this->getClassName());
+        return new MedickClass($this->getClassName());
     }
 
     /**
@@ -91,3 +91,19 @@
 
 }
 
+class MedickClass extends ReflectionClass {
+
+    public function inheritsFrom($parent) {
+        return $this->isSubclassOf(new MedickClass($parent));
+    }
+    
+}
+
+class MedickMethod extends ReflectionMethod {
+
+}
+
+class MedickProperty extends ReflectionProperty {
+
+}
+

Modified: trunk/skel/config/application.xml
===================================================================
--- trunk/skel/config/application.xml	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/skel/config/application.xml	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,45 +1,78 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!--
+<!-- 
  ! $Id$
- -->
+ ! -->
+<application name="${app.name}">
+    <!-- localhost environment -->
+    <environment name="localhost">
+        <!-- general properties -->
+        <properties>
+            <path>${app.path}</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://localhost</server_name>
+            <document_root>/${app.name}</document_root>
+            <rewrite>on</rewrite>
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="${app.path}${ds}log${ds}${app.name}.log" />
+                </outputter>
+                <!-- <outputter name="stdout" level="0" /> -->
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on ${app.name}" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "mysql"
+                 hostspec = "localhost"
+                 database = "${app.name}"
+                 username = "root"
+                 password = "" />
+        </database>
+    </environment>
 
-<application>
-
-    <!--  ====================== -->
-    <!--   General properties    -->
-    <!--  ====================== -->
-    <property name="server_name"      value="http://localhost" />
-    <property name="document_root"    value="/${APP_NAME}" />
-    <property name="rewrite"          value="on" />
-
-    <!--  ====================== -->
-    <!--     Logger System       -->
-    <!--  ====================== -->
-    <logger>
-        <formatter>simple</formatter>
-        <outputters>
-            <outputter name="file" level="0">
-              <property name="path" value="${LOG}" />
-            </outputter>
-            <!-- <outputter name="stdout" level="0" /> -->
-            <outputter name="mail" level="3">
-                <property name="subject" value="Fatality on ${APP_NAME}" />
-                <property name="address" value="user at example.com" />
-            </outputter>
-        </outputters>
-    </logger>
-
-    <!-- ======================= -->
-    <!--   Database(s) Settings  -->
-    <!-- ======================= -->
-    <database default="one">
-        <dsn id = "one"
-             phptype  = "mysql"
-             hostspec = "localhost"
-             database = "${APP_NAME}"
-             username = "root"
-             password = "" />
-    </database>
-
+    <!-- a sample test environment -->
+    <environment name="test">
+        <!-- general properties -->
+        <properties>
+            <path>${app.path}</path>
+        </properties>
+        <!-- web context -->
+        <web>
+            <server_name>http://exemplu.com</server_name>
+            <document_root>/${app.name}</document_root>
+            <rewrite>on</rewrite>
+        </web>
+        <!-- logger system -->
+        <logger>
+            <formatter>simple</formatter>
+            <outputters>
+                <outputter name="file" level="0">
+                    <property name="path" value="${app.path}${ds}log${ds}${app.name}.log" />
+                </outputter>
+                <!-- <outputter name="stdout" level="0" /> -->
+                <outputter name="mail" level="3">
+                    <property name="subject" value="Fatality on Exemplu.com::${app.name}" />
+                    <property name="address" value="user at example.com" />
+                </outputter>
+            </outputters>
+        </logger>
+        <!-- database(s) settings -->
+        <database default="one">
+            <dsn id = "one"
+                 phptype  = "sqlite"
+                 database = "${app.path}${ds}db${ds}${app.name}-sqlite.db" />
+        </database>
+    </environment>
+  
 </application>
-
+  

Modified: trunk/skel/public/default.htaccess
===================================================================
--- trunk/skel/public/default.htaccess	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/skel/public/default.htaccess	2006-03-18 17:36:03 UTC (rev 379)
@@ -6,13 +6,7 @@
 # 1. Apache Section.
 DirectoryIndex index.html index.php
 
-# 2. Medick Related.
-# this will not work for php as cgi
-# and it will be removed in version 0.2
-SetEnv MEDICK_APPLICATION_PATH ${APP_PATH}
-SetEnv MEDICK_APPLICATION_NAME ${APP_NAME}
-
-# 3. PHP Options.
+# 2. PHP Options.
 # this options will not work for php as cgi
 # and it will be removed in version 0.2
 # HINT: move this one to PHPTemplateView class
@@ -31,11 +25,11 @@
 #RewriteRule   ^([^i][^n][^d][^e][^x].*)$  index.php/$1/ [NS,L]
 
 # Set 2.
-RewriteBase /${APP_NAME}
+RewriteBase /${app.name}
 
 # Send requests without parameters to index.php
 # -- disabled since we want to show index.html
-# default index page for medick.
+# -- default index page for medick.
 #RewriteRule ^$ index.php  [L]
 # Send requests for files that exist to those files.
 RewriteCond %{REQUEST_FILENAME} !-f

Modified: trunk/skel/public/index.php
===================================================================
--- trunk/skel/public/index.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/skel/public/index.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,8 +1,19 @@
 <?php
 // $Id$
 
-// Complete path to medick boot.php file.
-include_once( '${CORE}' . DIRECTORY_SEPARATOR . 'boot.php' );
-// Dispatch this request.
-Dispatcher::dispatch();
+// 
+// This file is part of ${app.name} project
+// auto-generated on ${date} with medick version: ${medick.version}
+// 
 
+// complete path to medick boot.php file.
+include_once('${medick.core}${ds}boot.php');
+// complete path to ${app.name}.xml
+// and environment to load
+$d= new Dispatcher(
+          ContextManager::load(
+            '${app.path}${ds}conf${ds}${app.name}.xml',
+            'localhost')
+        );
+$d->dispatch();
+

Modified: trunk/skel/scripts/generator.php
===================================================================
--- trunk/skel/scripts/generator.php	2006-03-14 06:14:25 UTC (rev 378)
+++ trunk/skel/scripts/generator.php	2006-03-18 17:36:03 UTC (rev 379)
@@ -1,25 +1,45 @@
 <?php
 /**
  * Medick generator.
+ * @todo this will be refactored to use the planned IGenerator classes
+ * @package medick.generator
  * $Id$
  */
  
-$type= isset($argv[1]) ? $argv[1] : exit("Use one of controller or model for generator.\n");
+// {{{ main
+$type= isset($argv[1]) ? $argv[1] : exit(main_banner($argv[0]));
 $name= isset($argv[2]) ? strtolower($argv[2]) : exit($argv[0] . " needs a " . $argv[1] . " name.\n");
-
+  
 switch ($type) {
     case "controller":
-        generate_controller($name, "${APP_PATH}");
+        generate_controller($name, '${app.path}');
         break;
     case "model":
-        generate_model($name, "${APP_PATH}");
-         break;
-     default:
-         exit("Use one of controller or model for generator.\n");
-  }
+        generate_model($name, '${app.path}');
+        break;
+    default:
+        exit(main_banner($argv[0]));
+}  
+exit ("\nMedick (\$v: ${medick.version}) [ DONE ].\n");
+// }}}
 
-exit ("\nMedick (\$v: ${MEDICK_V}) [ DONE ].\n");
+// {{{ main_banner
+function main_banner($script_name) {
+    $buffer =<<<EOBANNER
+Medick Generator ${medick.version} 
+(c) 2005-2006 Oancea Aurelian, see LICENSE file for copyright details.
+ 
+     Use one of controller or model:
+ 
+$script_name controller to generate a controller or
+$script_name model to generate a model.
+ 
+EOBANNER;
+     echo $buffer;   
+}
+// }}}
 
+// {{{ generate_controller(string name, string app_location)
 function generate_controller($name, $app_location) {
     $controller_class_name= ucfirst(strtolower($name)) . 'Controller';
     echo "Creating controller class $controller_class_name from $name\n";
@@ -92,16 +112,18 @@
      file_put_contents($controller_location, $controller_class_text);
      echo "$controller_location\n";
   }
+// }}}
 
- function generate_model($name, $app_location) {
-     $model_class_name = ucfirst(strtolower($name));
-     $model_location   = $app_location.DIRECTORY_SEPARATOR.'app'.DIRECTORY_SEPARATOR.'models'.DIRECTORY_SEPARATOR.$name.'.php';
-     echo "Generating model $model_class_name from $name\n";
-     if (file_exists($model_location)) {
-         echo "\texits $model_location\n";
-         return;
-     }
-     $model_class_text =<<<EOCLASS
+// {{{ generate_model(string name, string app_location)
+function generate_model($name, $app_location) {
+    $model_class_name = ucfirst(strtolower($name));
+    $model_location   = $app_location.DIRECTORY_SEPARATOR.'app'.DIRECTORY_SEPARATOR.'models'.DIRECTORY_SEPARATOR.$name.'.php';
+    echo "Generating model $model_class_name from $name\n";
+    if (file_exists($model_location)) {
+        echo "\texits $model_location\n";
+        return;
+    }
+    $model_class_text =<<<EOCLASS
 <?php
 
  /**
@@ -129,6 +151,7 @@
 
     file_put_contents($model_location, $model_class_text);
     echo "\tcreate $model_location\n";
-  }
+}
+// }}}
 
- ?>
+?>



From aurelian at berlios.de  Sat Mar 18 19:59:34 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sat, 18 Mar 2006 19:59:34 +0100
Subject: [Medick-svn] r380 - trunk/skel/scripts
Message-ID: <200603181859.k2IIxYgg001050@sheep.berlios.de>

Author: aurelian
Date: 2006-03-18 19:59:09 +0100 (Sat, 18 Mar 2006)
New Revision: 380

Modified:
   trunk/skel/scripts/generator.php
Log:
 -- fixed php generator error

Modified: trunk/skel/scripts/generator.php
===================================================================
--- trunk/skel/scripts/generator.php	2006-03-18 17:36:03 UTC (rev 379)
+++ trunk/skel/scripts/generator.php	2006-03-18 18:59:09 UTC (rev 380)
@@ -127,9 +127,9 @@
 <?php
 
  /**
-  * This class is part of ${APP_NAME} project
+  * This class is part of ${app.name} project
   *
-  * @package ${APP_NAME}.models
+  * @package ${app.name}.models
   * \$Id$
   */
 class $model_class_name extends ActiveRecord {



From aurelian at berlios.de  Wed Mar 22 19:20:53 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Wed, 22 Mar 2006 19:20:53 +0100
Subject: [Medick-svn] r382 - applications/eltodo/app/controllers applications/eltodo/app/models applications/eltodo/app/views/project trunk/libs/action/controller trunk/libs/action/view trunk/libs/active/record
Message-ID: <200603221820.k2MIKrGh008215@sheep.berlios.de>

Author: aurelian
Date: 2006-03-22 19:20:34 +0100 (Wed, 22 Mar 2006)
New Revision: 382

Modified:
   applications/eltodo/app/controllers/project_controller.php
   applications/eltodo/app/models/project.php
   applications/eltodo/app/views/project/overview.phtml
   trunk/libs/action/controller/Base.php
   trunk/libs/action/view/HTML.php
   trunk/libs/active/record/Base.php
   trunk/libs/active/record/DatabaseRow.php
   trunk/libs/active/record/RowsAggregate.php
   trunk/libs/active/record/Validator.php
Log:
 -- (fixed) FormHelper::check_box
 -- DatabaseRow: do not set more than once the field in field_names array
 -- RowsAggregate: added size method as an alias to count
 -- (fixed) Validator::uniqueness_of when editing a Field
 -- (fixed) ActiveRecordHelper::error_message_on it's working, todo tuned in the near future
 -- eltodo: edit the project name with Ajax.InLineEditor


Modified: applications/eltodo/app/controllers/project_controller.php
===================================================================
--- applications/eltodo/app/controllers/project_controller.php	2006-03-20 19:59:14 UTC (rev 381)
+++ applications/eltodo/app/controllers/project_controller.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -14,50 +14,33 @@
     /** layout to use for this controller */
     protected $use_layout= 'eltodo';
 
-    /*
+    /** afiseaza formularul */
     public function edit() {
-      $project= Project::find($this->params['id']);
-      $project->name= $this->request->getParameter('name');
-      // try {
-      $project->save();
-      $this->render_text($project->name);
-      // }
+        try {
+            $this->project= Project::find($this->request->getParameter('project'));
+        } catch (RecordNotFoundException $rnfEx) {
+            $this->redirect_to('all');
+        }
     }
-*/
 
-  /** afiseaza formularul */
-  public function edit() {
-    try {
-      $this->project= Project::find($this->request->getParameter('project'));
-    } catch (RecordNotFoundException $rnfEx) {
-        $this->redirect_to('all');
-    }
-  }
-
-  /** update */
-    public function update() {
-  
+    /** update */
+    public function update_name() {
         try {
-            $this->project= Project::find($this->request->getParameter('id'));
-            if ($this->request->getParameter('name') != NULL) {
-                $changed= $this->project->name= $this->params['name'];
-            }
-            if ($this->request->getParameter('description') != NULL) {
-                $changed= $this->project->description= $this->params['description'];
-            }
-            // ->attributes($this->request->getParameter('project'));
+            $this->project= Project::find($this->request->getParameter('project'));
+            $name= $this->project->name;
+            $this->project->name= $this->params['name'];
             if ( $this->project->save() === FALSE) {
-                // erori! se afiseaza din view cu ActiveRecordHelper::error_messages_for($project)
-                return $this->redirect_to('all');
+                // render the old name
+                $this->render_text($name);
             } else {
-                $this->render_text($changed);
+                // reder the new name
+                $this->render_text($this->project->name);
             }
         } catch (RecordNotFoundException $rnfEx) {
             $this->logger->warn($rnfEx->getMessage());
-            $this->flash('error', $rnfEx->getMessage());
-            $this->redirect_to('all');
+            $this->render_text($name);
         }
-  }
+    }
     
     /** Creates a new Project */
     public function create() {

Modified: applications/eltodo/app/models/project.php
===================================================================
--- applications/eltodo/app/models/project.php	2006-03-20 19:59:14 UTC (rev 381)
+++ applications/eltodo/app/models/project.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -20,11 +20,14 @@
         return TRUE;
     }
 
+    public static function find_by_id(Request $request) {
+        return Project::find($request->getParameter('id'));
+    }
+    
     public static function find() {
         $args= func_get_args();
         return ActiveRecord::build(new QueryBuilder(__CLASS__,$args));
-        // ActiveRecordBase::initialize(__CLASS__);
-        // return ActiveRecordBase::__find(func_get_args());
     }
 
 }
+

Modified: applications/eltodo/app/views/project/overview.phtml
===================================================================
--- applications/eltodo/app/views/project/overview.phtml	2006-03-20 19:59:14 UTC (rev 381)
+++ applications/eltodo/app/views/project/overview.phtml	2006-03-22 18:20:34 UTC (rev 382)
@@ -1,10 +1,10 @@
 <!-- $Id$ -->
 <h2>Project Overview</h2>
 
-<div id="project_name"><?=$project->name;?></div>
+<div id="project_name" style="font-weight:bold;font-size:1.8em"><?=$project->name;?></div>
 
 <script language="JavaScript">
-    new Ajax.InPlaceEditor('project_name', '/eltodo/project/update',
+    new Ajax.InPlaceEditor('project_name', '/eltodo/project/update_name',
     { callback: function(form, value) { return 'id=<?=$project->id;?>&name=' + value }});
 </script>
 

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/action/controller/Base.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -329,7 +329,7 @@
         // predefined variables:
         // TODO: check if we have a / at the end, if not, add one
         
-        $this->template->assign('__base', $this->config->getWebContext()->document_root .'/');
+        $this->template->assign('__base', $this->config->getWebContext()->document_root);
         $this->template->assign('__server', (string)$this->config->getWebContext()->server_name);
         
         $this->template->assign('__controller', $this->params['controller']);

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/action/view/HTML.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -84,7 +84,16 @@
         // $prepend_text = isset($options['prepend']) ? $options['prepend'] : "";
         // $append_text  = isset($options['append']) ? $options['append'] : "";
         // $css_class    = isset($options['css_class']) ? $options['css_class'] : "formError";
-
+        $field= $object->getRow()->getFieldByName($method);
+        if (!$field or !$field->hasErrors()) {
+            return;
+        }
+        $buff= '<div class="formErrors">';
+        foreach ($field->getErrors() as $error) {
+            $buff .= $error . '<br />';
+        }
+        $buff .= "</div>\n";
+        return $buff;
     }
 
 }
@@ -161,21 +170,27 @@
             $buff .= '<div class="fieldWithErrors">';
             $errors= TRUE;
         }
+        
         $buff .= '<input type="checkbox" id="' . $id . '" name="' . $name . '" ';
+        
         foreach ($options as $key=>$value) {
             $buff .= $key . '="' . $value . '" ';
         }
-        if ((int)$object->$method > 0) {
-            $buff .= 'value="1" checked="checked"';
+
+        $value= $object->$method === NULL ? 0: $object->$method;
+        
+        if ( (int)$value > 0 ) {
+            $buff .= 'checked="checked"';// value="' . $value . '"';
         } else {
-            $buff .= 'value="0"';
+            // $buff .= 'value="0"';
         }
         $buff .= ' />';
         if ($errors) {
             $buff .= '</div>';
         }
-        $buff .= '<input name="' . $name . '" value="' . $object->$method . '" type="hidden" />';
         return $buff;
+        // . '<input name="' . $name . '" value="' . $value . '" type="hidden" />';
+        // return $buff;
     }
 }
 

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/active/record/Base.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -108,7 +108,7 @@
         $this->class_name = $this->getClassName();
         $this->table_name = Inflector::pluralize(strtolower(Inflector::underscore($this->class_name)));
 
-        $table_info   = self::$conn->getDatabaseInfo()->getTable($this->table_name);
+        $table_info   = ActiveRecord::$conn->getDatabaseInfo()->getTable($this->table_name);
         $this->pk     = $table_info->getPrimaryKey()->getName();
 
         $this->row = new DatabaseRow($this->table_name);
@@ -582,6 +582,7 @@
         if ($limit  = $builder->getLimit())  $stmt->setLimit($limit);
         if ($offset = $builder->getOffset()) $stmt->setOffset($offset);
         $rs = $stmt->executeQuery();
+        Registry::get('__logger')->debug(ActiveRecord::$conn->lastQuery);
         if ($builder->getType() == 'first') {
             if ($rs->getRecordCount() == 1) {
                 $rs->next();
@@ -599,7 +600,6 @@
         }
         // release resources.
         $rs->close();$stmt->close();
-        Registry::get('__logger')->debug(ActiveRecord::$conn->lastQuery);
         return $results;
     }
 }

Modified: trunk/libs/active/record/DatabaseRow.php
===================================================================
--- trunk/libs/active/record/DatabaseRow.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/active/record/DatabaseRow.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -36,7 +36,8 @@
 
 /**
  * It represents a Row from the Database
- *
+ * 
+ * @todo this should be refactored to remove dupplicate affected_fields array, it`s not faster.
  * @package medick.active.record
  * @author Oancea Aurelian
  */
@@ -165,7 +166,9 @@
     public function updateStatus(Field $field, $value) {
         $field->setValue($value);
         $field->isAffected = TRUE;
-        $this->field_names[] = $field->getName();
+        if (!in_array($field->getName(), $this->field_names)) {
+            $this->field_names[] = $field->getName();
+        }
         $this->affected_fields[$field->getName()] = $field;
         $this->affected = TRUE;
     }

Modified: trunk/libs/active/record/RowsAggregate.php
===================================================================
--- trunk/libs/active/record/RowsAggregate.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/active/record/RowsAggregate.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -80,8 +80,13 @@
 
     /**
      * Magick php5 __call
+     *
+     * Resolved methods:
+     * <ul><li>size an alias for count</li></ul>
+     *
      */
     public function __call($method, $arguments) {
+        if ($method == 'size') return $this->count();
         trigger_error(sprintf('Call to undefined method: %s->%s(%s).', get_class($this), $method,$arguments), E_USER_ERROR);
     }
 }

Modified: trunk/libs/active/record/Validator.php
===================================================================
--- trunk/libs/active/record/Validator.php	2006-03-20 19:59:14 UTC (rev 381)
+++ trunk/libs/active/record/Validator.php	2006-03-22 18:20:34 UTC (rev 382)
@@ -111,18 +111,29 @@
     /**
      * Check if the given filed is not unique
      *
+     * Executes:
+     * <code>
+     *  SELECT ${FIELD.NAME} FROM ${TABLE} WHERE ${FIELD.NAME}=${FIELD.VALUE} AND ${ROW.PRIMARY_KEY.NAME}!=${ROW.PRIMARY_KEY.VALUE}
+     * </code>
+     * If the result set is empty, we return FALSE, otherwise this Filed is unique and therefore we return TRUE
+     *
+     * @todo this should also work for fields without PK?
+     * 
      * @param Filed field
      * @return bool TRUE if is not unique
      */ 
     private function isNotUnique(Field $field) {
+        $supp= $this->row->getPrimaryKey()->getValue()===NULL ? '' : ' and ' . $this->row->getPrimaryKey()->getName() . '!=?';
         try {
             ActiveRecord::build(
                 new QueryBuilder(
                     Inflector::singularize($this->row->getTable()), 
                     array(
                         'first', 
-                        array('condition'=>$field->getName() . '=?'), 
-                        array($field->getValue()
+                        array('condition'=>$field->getName() . '=?' . $supp,
+                              'columns'=>$field->getName()
+                    ), 
+                        array($field->getValue(), $this->row->getPrimaryKey()->getValue()
                     )
                 )
             ));



From aurelian at berlios.de  Thu Mar 23 21:17:51 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Thu, 23 Mar 2006 21:17:51 +0100
Subject: [Medick-svn] r384 - applications/testor/app/helpers applications/testor/app/views/layouts applications/testor/app/views/main applications/testor/app/views/strone applications/testor/app/views/tone applications/testor/public/stylesheet trunk/libs/action/controller trunk/libs/action/controller/session trunk/libs/active/record
Message-ID: <200603232017.k2NKHpwT016694@sheep.berlios.de>

Author: aurelian
Date: 2006-03-23 21:17:46 +0100 (Thu, 23 Mar 2006)
New Revision: 384

Modified:
   applications/testor/app/helpers/main_helper.php
   applications/testor/app/views/layouts/main.phtml
   applications/testor/app/views/main/index.phtml
   applications/testor/app/views/strone/index.phtml
   applications/testor/app/views/tone/_form.phtml
   applications/testor/app/views/tone/add.phtml
   applications/testor/app/views/tone/edit.phtml
   applications/testor/app/views/tone/index.phtml
   applications/testor/public/stylesheet/testor.css
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/session/Session.php
   trunk/libs/active/record/Base.php
Log:
 -- (fixed) ActiveRecord magick php methods __wakeup and __sleep
 -- session is started on demand, after the first call to put*, get* or has* methods
 -- ID keywords on some testor files


Modified: applications/testor/app/helpers/main_helper.php
===================================================================
--- applications/testor/app/helpers/main_helper.php	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/helpers/main_helper.php	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,5 +1,5 @@
 <?php
-
+/* $Id$ */
 function get_comment(Reflector $reflector) {
     $comments= explode("\n", $reflector->getDocComment());
     foreach ($comments as $line) {

Modified: applications/testor/app/views/layouts/main.phtml
===================================================================
--- applications/testor/app/views/layouts/main.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/layouts/main.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -2,6 +2,7 @@
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
      <head>
+     	 <!-- $Id$ --> 
          <title>main</title>
          <base href="<?=$__server;?><?=$__base;?>/" />
          <link rel="stylesheet" href="stylesheet/medick.css" />

Modified: applications/testor/app/views/main/index.phtml
===================================================================
--- applications/testor/app/views/main/index.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/main/index.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,4 +1,4 @@
-
+<!-- $Id$ --> 
 <div><h5>Testor :: aplicatie ajutatoare pentru rezolvarea problemelor aparute in release 0.2.1 din medick</h5></div>
 
 <hr />

Modified: applications/testor/app/views/strone/index.phtml
===================================================================
--- applications/testor/app/views/strone/index.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/strone/index.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,3 +1,4 @@
+<!-- $Id$ --> 
 <h5>ActiveRecord + Session</h5>
 
 <? if(isset($flash['notice'])):?>

Modified: applications/testor/app/views/tone/_form.phtml
===================================================================
--- applications/testor/app/views/tone/_form.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/tone/_form.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,4 +1,4 @@
-    
+<!-- $Id$ -->    
 <div>
       <label for="tone_name">Name:</label>
       <?=ActiveRecordHelper::error_message_on($tone, 'name');?>

Modified: applications/testor/app/views/tone/add.phtml
===================================================================
--- applications/testor/app/views/tone/add.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/tone/add.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,4 +1,4 @@
-<!-- <h3>ToneController#add</h3> -->
+<!-- $Id$ --> 
 
 <form action="<?=URL::create('tone','create');?>" method="post">
   <fieldset>

Modified: applications/testor/app/views/tone/edit.phtml
===================================================================
--- applications/testor/app/views/tone/edit.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/tone/edit.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,4 +1,4 @@
-<!-- <h3>ToneController#edit</h3> -->
+<!-- $Id$ --> 
 
 <form action="<?=URL::create('tone','update');?>" method="post">
 <input type="hidden" name="id" value="<?=$tone->id;?>" />

Modified: applications/testor/app/views/tone/index.phtml
===================================================================
--- applications/testor/app/views/tone/index.phtml	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/app/views/tone/index.phtml	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,4 +1,4 @@
-
+<!-- $Id$ --> 
 <h5>Lista Tone</h5>
 
 <hr />

Modified: applications/testor/public/stylesheet/testor.css
===================================================================
--- applications/testor/public/stylesheet/testor.css	2006-03-23 20:07:06 UTC (rev 383)
+++ applications/testor/public/stylesheet/testor.css	2006-03-23 20:17:46 UTC (rev 384)
@@ -1,3 +1,4 @@
+/* $Id$ */
 .flash_error, .flash_notice {
   border: solid black 1px;
   margin: 1em 3em;
@@ -67,16 +68,6 @@
   background-color: transparent;
 }
 
-.btn { 
-  border: 1px solid #990000; 
-  color: #990000; 
-  font: bold 11px; 
-}
-a.btn {
-  color: #990000;
-  text-decoration: none;
-}
-
 fieldset {
     border: 1px solid #26a;
     margin: 1em 0em 1em 0em;

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2006-03-23 20:07:06 UTC (rev 383)
+++ trunk/libs/action/controller/Base.php	2006-03-23 20:17:46 UTC (rev 384)
@@ -315,7 +315,7 @@
         $this->request  = $request;
         $this->response = $response;
         $this->session  = $request->getSession();
-        $this->session->start();
+        // $this->session->start();
         $this->params   = $request->getParameters();
 
         $this->logger   = Registry::get('__logger');
@@ -425,6 +425,7 @@
             }
         }
         $this->params['action'] = strtolower($action_name);
+        $this->template->assign('__action', $this->params['action']);
         // $this->logger->debug('Action:: ' . strtolower($action_name));
         // quickly load the common magick method.
         if ($_common= $this->createMethod('__common')) {
@@ -516,4 +517,3 @@
         }
     }
 }
-

Modified: trunk/libs/action/controller/session/Session.php
===================================================================
--- trunk/libs/action/controller/session/Session.php	2006-03-23 20:07:06 UTC (rev 383)
+++ trunk/libs/action/controller/session/Session.php	2006-03-23 20:17:46 UTC (rev 384)
@@ -85,7 +85,6 @@
      * @param string name, the name of the session variable
      * @param mixed value, the value of the variable to set
      * @return void
-     * @throws IllegalStateException if the session is not started
      */
     public function putValue($name, $value) {
         $this->checkState();
@@ -97,7 +96,6 @@
      *
      * @param string name, the name of the session variable
      * @return NULL if the variable is not set, or mixed, the variable value
-     * @throws IllegalStateException if the session is not started
      */
     public function getValue($name) {
         return $this->hasValue($name) ? $_SESSION[$name] : NULL;
@@ -108,7 +106,6 @@
      *
      * @param string name, the name of the session variable
      * @return bool, TRUE if it has
-     * @throws IllegalStateException if the session is not started
      */
     public function hasValue($name) {
         $this->checkState();
@@ -130,7 +127,6 @@
      * It gets the session id
      *
      * @return mixed, the session id
-     * @throws IllegalStateException if the session is not started
      */
     public function getId(){
         $this->checkState();
@@ -161,13 +157,11 @@
      *
      * This method is called internally to ensure that the session is started before using it.
      * @return TRUE if the session is started
-     * @throws IllegalStateException if the session is not started
      */
     protected function checkState() {
         if (!$this->isStarted) {
-            throw new IllegalStateException('Session is not Started!');
+            $this->start();
         }
         return TRUE;
     }
 }
-

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2006-03-23 20:07:06 UTC (rev 383)
+++ trunk/libs/active/record/Base.php	2006-03-23 20:17:46 UTC (rev 384)
@@ -42,6 +42,7 @@
 include_once('active/support/Inflector.php');
 // 3-rd party.
 include_once('creole/Creole.php');
+include_once('creole/CreoleTypes.php');
 
 /**
  * Main ActiveRecord Class
@@ -108,8 +109,8 @@
         $this->class_name = $this->getClassName();
         $this->table_name = Inflector::pluralize(strtolower(Inflector::underscore($this->class_name)));
 
-        $table_info   = ActiveRecord::$conn->getDatabaseInfo()->getTable($this->table_name);
-        $this->pk     = $table_info->getPrimaryKey()->getName();
+        $table_info = ActiveRecord::$conn->getDatabaseInfo()->getTable($this->table_name);
+        $this->pk   = $table_info->getPrimaryKey()->getName();
 
         $this->row = new DatabaseRow($this->table_name);
         foreach( $table_info->getColumns() as $col) {
@@ -131,11 +132,10 @@
             }
             $this->row[] = $field;
         }
-        // $logger= Registry::get('__logger');
-        foreach ($params as $field_name => $field_value) {
-            // $logger->debug('['.__LINE__ . '] Name: ' . $field_name . ' Value: ' . $field_value);
+        // confused?
+        if(!empty($params)) { foreach ($params as $field_name => $field_value) {
             $this->$field_name = $field_value;
-        }
+        }}
     }
 
     // {{{ __magic functions
@@ -201,6 +201,7 @@
      * @param array arguments
      * @throws ActiveRecordException
      */
+     
     public function __call($method, $arguments) {
         if ($method == 'destroy') return $this->delete();
         $know_methods = array('save', 'insert', 'update', 'delete');
@@ -214,11 +215,11 @@
             $this->$method($arguments[0]);
         }
     }
-
+    
     /** returns a string representation of this object */
-    public function __toString() {
+    public function toString() {
         $string = '';
-        foreach ($this->fields->getAffectedFields() as $field) {
+        foreach ($this->row->getAffectedFields() as $field) {
             $string .= "[ " . $field->type . " ] " . $field->getName() . " : " . $field->getValue() . "\n";
         }
         return $string;
@@ -227,15 +228,16 @@
     /** Prepare this Object for serialization */
     public function __sleep() {
         ActiveRecord::close_connection();
-        return array('row', 'pk', 'has_one', 'belongs_to', 'has_many', 'has_and_belongs_to_many');
+        return array('row', 'table_name', 'class_name','has_one', 'belongs_to', 'has_many', 'has_and_belongs_to_many');
     }
 
-    /** restore the Object state after unserialize */
+    /** restore the Object state after unserialize  */
     public function __wakeup() {
         ActiveRecord::establish_connection();
-        for($it = $this->fields->getIterator(); $it->valid(); $it->next()) {
-            $field_name= $it->current()->getName();
-            $this->$field_name = $it->current()->getValue();
+        $it= $this->row->iterator();
+        while($it->hasNext()) {
+            $current= $it->next();
+            $this->__set($current->getName(), $current->getValue());
         }
     }
 
@@ -246,11 +248,11 @@
      *
      * @return DatabaseRow
      */
-    public final function getRow() {
+    public function getRow() {
         return $this->row;
     }
 
-    public final function validates () {
+    protected function validates () {
         return new Validator($this->row);
     }
 
@@ -353,11 +355,7 @@
             $logger->info('Object has Errors!');
             return false;
         }
-/*
-        if ( !$this->before_save() || count($this->row->collectErrors()) > 0) {
-            return FALSE;
-        }
-*/
+
         if ($this->row->getPrimaryKey()->isAffected) {
             return $this->update();
         } else {
@@ -391,11 +389,7 @@
             $logger->info('Object has Errors!');
             return false;
         }
-/*
-        if (!$this->before_insert() || count($this->row->collectErrors()) > 0) {
-            return false;
-        }
-*/
+
         $af_rows = $this->performQuery($this->getInsertSql());
         $id = $this->getNextId();
         $this->after_insert();
@@ -461,16 +455,18 @@
      */
     public final function delete() {
         if (!$this->before_delete() || count($this->row->collectErrors()) > 0) {
-            return FALSE;
+            return false;
         }
-        $whereClause = array();
-        foreach ($this->row->getAffectedFields() as $col) {
-            $whereClause[] = $col->getName() . ' = ? ';
+        
+        if ($this->row->getPrimaryKey() !== NULL && $this->row->getPrimaryKey()->getValue()===NULL) {
+            throw new ActiveRecordException('Refusing to delete everything from ' . $this->table_name . ', Primary Key was NULL');
         }
-        $sql = 'DELETE FROM ' . $this->table_name . ' WHERE ' . implode(' AND ', $whereClause);
-        $af= $this->performQuery($sql);
+        $sql= 'delete from ' . $this->table_name . ' where id=?';
+        $stmt= ActiveRecord::$conn->prepareStatement($sql);
+        $stmt->setInt(1, $this->row->getPrimaryKey()->getValue());
+        $af_rows= $stmt->executeUpdate();
         $this->after_delete();
-        return $af;
+        return $af_rows;
     }
     // }}}
 
@@ -487,7 +483,7 @@
             $this->$_pk = $id;
             return $id;
         } else {
-            return FALSE;
+            return false;
         }
     }
 
@@ -582,7 +578,6 @@
         if ($limit  = $builder->getLimit())  $stmt->setLimit($limit);
         if ($offset = $builder->getOffset()) $stmt->setOffset($offset);
         $rs = $stmt->executeQuery();
-        Registry::get('__logger')->debug(ActiveRecord::$conn->lastQuery);
         if ($builder->getType() == 'first') {
             if ($rs->getRecordCount() == 1) {
                 $rs->next();
@@ -603,4 +598,3 @@
         return $results;
     }
 }
-



From aurelian at berlios.de  Sat Mar 25 18:04:16 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Sat, 25 Mar 2006 18:04:16 +0100
Subject: [Medick-svn] r385 - trunk/libs/active/record
Message-ID: <200603251704.k2PH4Gvp004920@sheep.berlios.de>

Author: aurelian
Date: 2006-03-25 18:04:15 +0100 (Sat, 25 Mar 2006)
New Revision: 385

Modified:
   trunk/libs/active/record/Base.php
   trunk/libs/active/record/Validator.php
Log:
 -- cosmethic changes.

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2006-03-23 20:17:46 UTC (rev 384)
+++ trunk/libs/active/record/Base.php	2006-03-25 17:04:15 UTC (rev 385)
@@ -346,16 +346,9 @@
      * </code>
      */
     public final function save() {
-        $logger= Registry::get('__logger');
-        if ( !$this->before_save() ) {
-            $logger->info('Before Save Failed!');
+        if ( !$this->before_save() or count($this->row->collectErrors()) > 0) {
             return false;
         }
-        if (count($this->row->collectErrors()) > 0) {
-            $logger->info('Object has Errors!');
-            return false;
-        }
-
         if ($this->row->getPrimaryKey()->isAffected) {
             return $this->update();
         } else {
@@ -380,16 +373,9 @@
      * @throws SQLException
      */
     public final function insert() {
-        $logger= Registry::get('__logger');
-        if ( !$this->before_insert() ) {
-            $logger->info('Before Save Failed!');
+        if ( !$this->before_insert() or count($this->row->collectErrors()) > 0) {
             return false;
         }
-        if (count($this->row->collectErrors()) > 0) {
-            $logger->info('Object has Errors!');
-            return false;
-        }
-
         $af_rows = $this->performQuery($this->getInsertSql());
         $id = $this->getNextId();
         $this->after_insert();
@@ -414,15 +400,9 @@
      * @throws SQLException
      */
     public final function update() {
-        $logger= Registry::get('__logger');
-        if ( !$this->before_update() ) {
-            $logger->info('Before Update Failed!');
+        if ( !$this->before_update() or count($this->row->collectErrors()) > 0) {
             return false;
         }
-        if (count($this->row->collectErrors()) > 0) {
-            $logger->info('Object has Errors!');
-            return false;
-        }
         $af= $this->performQuery($this->getUpdateSql());
         $this->after_update();
         return $af;
@@ -457,7 +437,6 @@
         if (!$this->before_delete() || count($this->row->collectErrors()) > 0) {
             return false;
         }
-        
         if ($this->row->getPrimaryKey() !== NULL && $this->row->getPrimaryKey()->getValue()===NULL) {
             throw new ActiveRecordException('Refusing to delete everything from ' . $this->table_name . ', Primary Key was NULL');
         }
@@ -525,7 +504,6 @@
         foreach($this->row->getAffectedFields() as $field) {
             $sql .= $field->getName() . ' = ?, ';
         }
-
         return substr($sql, 0, -2) . $sqlSnippet;
     }
 
@@ -570,7 +548,6 @@
             $class = new ReflectionClass($class_name);
         }
         ActiveRecord::establish_connection();
-        Registry::get('__logger')->debug($builder->compile()->getQueryString());
         $stmt = ActiveRecord::$conn->prepareStatement($builder->compile()->getQueryString());
         $i=1; foreach($builder->getBindings() as $binding) {
             $stmt->set($i++, $binding);
@@ -578,6 +555,7 @@
         if ($limit  = $builder->getLimit())  $stmt->setLimit($limit);
         if ($offset = $builder->getOffset()) $stmt->setOffset($offset);
         $rs = $stmt->executeQuery();
+        Registry::get('__logger')->debug('Query: ' . ActiveRecord::$conn->lastQuery);
         if ($builder->getType() == 'first') {
             if ($rs->getRecordCount() == 1) {
                 $rs->next();

Modified: trunk/libs/active/record/Validator.php
===================================================================
--- trunk/libs/active/record/Validator.php	2006-03-23 20:17:46 UTC (rev 384)
+++ trunk/libs/active/record/Validator.php	2006-03-25 17:04:15 UTC (rev 385)
@@ -35,7 +35,7 @@
 /**
  * Active Record Validator
  *
- * In medick, Validations is performed in ActiveRecord with the help
+ * In medick, validations is performed in ActiveRecord with the help
  * of before_* filters
  * <code>
  *  class Person extends ActiveRecord {
@@ -102,9 +102,9 @@
     private function isEmpty(Field $field) {
         if ($field->getValue() == '') {
             $field->addError('is empty');
-            return TRUE;
+            return true;
         } else {
-            return FALSE;
+            return false;
         }
     }
     
@@ -138,9 +138,9 @@
                 )
             ));
             $field->addError('is not unique');
-            return TRUE;
+            return true;
         } catch (RecordNotFoundException $rnfEx) {
-            return FALSE;
+            return false;
         }
     }
 



From aurelian at berlios.de  Mon Mar 27 21:24:14 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Mon, 27 Mar 2006 21:24:14 +0200
Subject: [Medick-svn] r386 - applications/testor/app/controllers applications/testor/app/views applications/testor/app/views/req applications/testor/conf applications/testor/db trunk trunk/libs/action/controller trunk/libs/action/controller/session trunk/libs/active/record
Message-ID: <200603271924.k2RJOESW031963@sheep.berlios.de>

Author: aurelian
Date: 2006-03-27 21:24:03 +0200 (Mon, 27 Mar 2006)
New Revision: 386

Added:
   applications/testor/app/controllers/req_controller.php
   applications/testor/app/views/req/
   applications/testor/app/views/req/index.phtml
   trunk/libs/action/controller/session/CreoleSessionContainer.php
Modified:
   applications/testor/app/controllers/tone_controller.php
   applications/testor/conf/testor.routes.php
   applications/testor/db/schema.sql
   trunk/boot.php
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/Route.php
   trunk/libs/action/controller/session/ISessionContainer.php
   trunk/libs/action/controller/session/Session.php
   trunk/libs/active/record/Base.php
Log:
 -- added Route Requirements;
 -- initial import of CreoleSessionContainer;
 -- minor changes on testor sample application.


Added: applications/testor/app/controllers/req_controller.php
===================================================================
--- applications/testor/app/controllers/req_controller.php	2006-03-25 17:04:15 UTC (rev 385)
+++ applications/testor/app/controllers/req_controller.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -0,0 +1,21 @@
+<?php
+/**
+ * @desc: Testing Route Requirements 
+ */ 
+class ReqController extends ApplicationController {
+    
+    protected $use_layout= 'main';
+    
+    /**
+     * @desc: see conf/testor.routes.php
+     */ 
+    public function index() {
+        if (!isset($this->params['number'])) {
+            $this->flash('notice', 'redirected');
+            return $this->redirect_to(NULL, 'req', array(rand()));
+        }
+        $this->number= $this->request->getParameter('number');
+    }
+
+}
+


Property changes on: applications/testor/app/controllers/req_controller.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: applications/testor/app/controllers/tone_controller.php
===================================================================
--- applications/testor/app/controllers/tone_controller.php	2006-03-25 17:04:15 UTC (rev 385)
+++ applications/testor/app/controllers/tone_controller.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -30,12 +30,8 @@
      */
     public function create() {
         $this->tone= new Tone($this->request->getParameter('tone'));
-        // status is a check-box
-        if (!isset($this->params['tone']['status'])) {
-          $this->tone->status= 0;
-        } else {
-          $this->tone->status=1;
-        }
+        $this->set_status($this->tone);
+
         if ($this->tone->save() === FALSE) {
             $this->render('add');
         } else {
@@ -61,10 +57,8 @@
      */
     public function update() {
         try {
-            $this->tone= Tone::find($this->request->getParameter('id'));
-            $this->tone->attributes($this->request->getParameter('tone'));
-            if (!isset($this->params['tone']['status'])) $this->tone->status=0;
-            $this->logger->debug($this->request->getParameter('tone'));
+            $this->tone= Tone::find($this->request->getParameter('id'))->attributes($this->request->getParameter('tone'));
+            $this->set_status($this->tone);
             if ($this->tone->save() === FALSE) {
                 $this->render('edit');
             } else {
@@ -78,6 +72,14 @@
         }
     }
 
+    private function set_status($tone) {
+        if (!isset($this->params['tone']['status'])) {
+          $tone->status=0;
+        } else {
+          $tone->status=1;
+        }
+    }
+    
     /**
      * @desc: removes a <em>tone</em>
      */
@@ -85,7 +87,7 @@
         try {
             $tone= Tone::find($this->request->getParameter('id'));
             $tone->delete();
-            $this->flash('notice', $tone->name . ' succesfully removed');
+            $this->flash('notice', '<em>' . $tone->name . '</em> succesfully removed');
             $this->redirect_to('index');
         } catch (ActiveRecordException $arEx) {
             $this->flash('error', $arEx->getMessage());

Added: applications/testor/app/views/req/index.phtml
===================================================================
--- applications/testor/app/views/req/index.phtml	2006-03-25 17:04:15 UTC (rev 385)
+++ applications/testor/app/views/req/index.phtml	2006-03-27 19:24:03 UTC (rev 386)
@@ -0,0 +1,12 @@
+ReqController#index
+
+<? if(isset($flash['notice'])): ?>
+    <div class="flash_notice">
+        <div class="label">Note</div>
+        <div class="content"><?=$flash['notice'];?></div>
+    </div>
+<? endif; ?>
+
+<br />
+Number: <?=$number;?>
+


Property changes on: applications/testor/app/views/req/index.phtml
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: applications/testor/conf/testor.routes.php
===================================================================
--- applications/testor/conf/testor.routes.php	2006-03-25 17:04:15 UTC (rev 385)
+++ applications/testor/conf/testor.routes.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -4,5 +4,12 @@
 // @TODO: write some documentation about this file
 
 $map= Map::getInstance();
+$map->add(new Route('/main/index', Route::WELCOME, array('controller'=>'main', 'action'=>'index')));
+
+$route= new Route(':controller/:number');
+$route->setDefault('action','index');
+$route->setRequirement('number', '/([0-9])/');
+$map->add($route);
+
 $map->add(new Route(':controller/:action/:id'));
 ?>

Modified: applications/testor/db/schema.sql
===================================================================
--- applications/testor/db/schema.sql	2006-03-25 17:04:15 UTC (rev 385)
+++ applications/testor/db/schema.sql	2006-03-27 19:24:03 UTC (rev 386)
@@ -18,3 +18,8 @@
 
 INSERT INTO `strones` (`id`,`inc`) VALUES (1,0);
 
+CREATE TABLE c_session (
+	`session_id` VARCHAR (255) PRIMARY KEY,
+	`session_data` TEXT,
+	`session_lastmodified` DATETIME
+) ENGINE=InnoDB;

Modified: trunk/boot.php
===================================================================
--- trunk/boot.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/boot.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -53,4 +53,3 @@
 include_once('medick/Medick.php');
 set_error_handler(array(new ErrorHandler(), 'raiseError'));
 include_once('action/controller/Dispatcher.php');
-

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/action/controller/Base.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -56,12 +56,14 @@
  * a method named <i>__common</i> is always invoked before the action itself. You can use this
  * method for assing template variables common to all your templates (like a menu with items from database).
  *
- * ActionController also defines some magic medick template variables. We will use <i>__</i> to mark them.
+ * ActionController also defines some magic medick template variables. We will use <b>__</b> to mark them.
  * Predefined medick variables available in templates:
  * <ul>
  *  <li>__base: the document root</li>
  *  <li>__server_name: this server name</li>
  *  <li>__controller: incoming controller</li>
+ *  <li>__action: curent action</li>
+ *  <li>__version: medick version</li>
  * </ul>
  * 
  * Other features:
@@ -315,7 +317,6 @@
         $this->request  = $request;
         $this->response = $response;
         $this->session  = $request->getSession();
-        // $this->session->start();
         $this->params   = $request->getParameters();
 
         $this->logger   = Registry::get('__logger');
@@ -329,11 +330,11 @@
         // predefined variables:
         // TODO: check if we have a / at the end, if not, add one
         
-        $this->template->assign('__base', $this->config->getWebContext()->document_root);
+        $this->template->assign('__base', (string)$this->config->getWebContext()->document_root);
         $this->template->assign('__server', (string)$this->config->getWebContext()->server_name);
-        
         $this->template->assign('__controller', $this->params['controller']);
         $this->template->assign('__version', Medick::getVersion());
+        
         $this->logger->debug($this->request->toString());
     }
 
@@ -367,19 +368,23 @@
      * @param string controller defaults to NULL, the current controller
      * @param array params, additional parameters to pass with this redirect.
      */
-    protected function redirect_to($action, $controller= NULL, $params = array()) {
-        // get the curent controller, if NULL is passed.
-        if (is_null($controller)) {
+    protected function redirect_to($action, $controller= NULL, $params = array(), $ext='html') {
+        if ($controller === NULL) {
             $controller= $this->params['controller'];
         }
+        
+        $rewrite = strtolower($this->config->getWebContext()->rewrite);
+        
         $redirect_to= $this->config->getWebContext()->server_name . $this->config->getWebContext()->document_root . '/';
-        $rewrite = strtolower($this->config->getWebContext()->rewrite);
+        
         if ($rewrite == 'false' || $rewrite == 'off' || $rewrite == '0') {
             $redirect_to .= 'index.php/';
         }
-        $redirect_to .= $controller . '/' . $action;
-        if (count($params)) $redirect_to .= '/' . implode('/', $params);
-        $redirect_to .= '.html';
+        $redirect_to .= $controller;
+        if ($action !== NULL) $redirect_to .= '/' . $action;
+        if (count($params))   $redirect_to .= '/' . implode('/', $params);
+        $redirect_to .= '.' . $ext;
+        
         $this->logger->debug('Redirecting to: ' . $redirect_to);
         $this->response->redirect($redirect_to);
         $this->action_performed = TRUE;

Modified: trunk/libs/action/controller/Route.php
===================================================================
--- trunk/libs/action/controller/Route.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/action/controller/Route.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -116,7 +116,6 @@
  *  $request->getParameter('id'); // => 12
  * </code>
  * @see Map, ActionControllerRouting, Component
- * @todo Route Requirements
  * @todo more docs
  * @package medick.action.controller
  * @subpackage routing
@@ -156,6 +155,10 @@
         a list with default values */
     private $defaults;
 
+    /** @var array
+        a list with this route requirements */
+    private $requirements;
+    
     /** @var bool
         flag to indicate that this route is loaded.
         on initial phase, we will use this flag for knowing 
@@ -184,34 +187,16 @@
      * @param array requirements the route requirements
      */
     public function Route($route_list, $name = '', /*Array*/ $defaults = array(), /*Array*/ $requirements = array()) {
-        $this->components = new Collection();
-        $this->route_list = $route_list;
-        $this->defaults   = $defaults;
-        $this->name       = $name==''?Route::AUTO:$name;
-        $this->isLoaded   = false;
+        $this->components   = new Collection();
+        $this->route_list   = $route_list;
+        $this->defaults     = $defaults;
+        $this->requirements = $requirements;
+        $this->name         = $name=='' ? Route::AUTO : $name;
+        $this->isLoaded     = false;
         $this->loadComponents();
     }
     
     /**
-     * Helper Method for loading the Route Components
-     * 
-     * @return void
-     */ 
-    private function loadComponents() {
-        $parts= explode('/', trim($this->route_list, '/'));
-        foreach ($parts as $key=>$element) {
-            if (preg_match('/:[a-z0-9_\-]+/',$element, $match)) {
-                $c= new Component(substr(trim($match[0]), 1));
-                $c->setDynamic(true);
-            } else {
-                $c= new Component($element);
-                $c->setDynamic(false);
-            }
-            $this->components->add($c);
-        }
-    }
-
-    /**
      * It gets the name of this Route.
      * 
      * @see Route::getNameToHuman
@@ -250,6 +235,25 @@
     }
     
     /**
+     * Sets an array of route requirements
+     * 
+     * @param array the list of requirements
+     */
+    public function setRequirements(/*Array*/ $requirements= array()) {
+        foreach ($requirements as $name=>$value) $this->setRequirement($name, $value);
+    }
+
+    /**
+     * Sets a route requirement
+     * 
+     * @param string
+     * @param string
+     */
+    public function setRequirement($name, $value) {
+        $this->requirements[$name]=$value;
+    }
+    
+    /**
      * Gets this Route List Definition
      *
      * @return string the route list definition
@@ -301,6 +305,12 @@
                 if (isset($parts[$it->key()])) {
                     if (!$component->isDynamic() && $component->getName() != $this->ignoreExtension($parts[$it->key()]) ) {
                         return false;
+                    } elseif (
+                        isset($this->requirements[$component->getName()]) 
+                            && 
+                        !preg_match($this->requirements[$component->getName()], $parts[$it->key()]) )
+                    {
+                        return false;
                     } else {
                         $this->merges[$component->getName()] = $this->ignoreExtension($parts[$it->key()]);
                     }
@@ -313,8 +323,36 @@
         $this->load($request);
         return true;
     }
-
+    
     /**
+     * Creates a Controller Instance
+     * 
+     * @throws RoutingException
+     * @return ActionControllerBase
+     */ 
+    public function createControllerInstance(Request $request) {
+        if (!$this->isLoaded) $this->load($request);
+        try {
+            Registry::get('__logger')->debug($this->toString());
+            return Registry::put(new Injector(), '__injector')->inject('controller', $request->getParameter('controller'));
+        } catch (FileNotFoundException $fnfEx) {
+            throw new RoutingException('Cannot create a controller instance, ' . $fnfEx->getMessage());
+        }
+    }
+    
+    /**
+     * A String representation of this Route
+     *
+     * @return string
+     */ 
+    public function toString() {
+        return sprintf('{%s}-->Name: %s; List: %s;', 
+                        $this->getClassName(), 
+                        $this->getNameToHuman(), 
+                        $this->route_list);
+    }
+    
+    /**
      * Helper method, will remove everithing after . in parts
      * 
      * @param string
@@ -384,29 +422,22 @@
     }
     
     /**
-     * Creates a Controller Instance
+     * Helper Method for loading the Route Components
      * 
-     * @throws RoutingException
-     * @return ActionControllerBase
+     * @return void
      */ 
-    public function createControllerInstance(Request $request) {
-        if (!$this->isLoaded) $this->load($request);
-        try {
-            Registry::get('__logger')->debug($this->toString());
-            return Registry::put(new Injector(), '__injector')->inject('controller', $request->getParameter('controller'));
-        } catch (FileNotFoundException $fnfEx) {
-            throw new RoutingException('Cannot create a controller instance, ' . $fnfEx->getMessage());
+    private function loadComponents() {
+        $parts= explode('/', trim($this->route_list, '/'));
+        foreach ($parts as $key=>$element) {
+            if (preg_match('/:[a-z0-9_\-]+/',$element, $match)) {
+                $c= new Component(substr(trim($match[0]), 1));
+                $c->setDynamic(true);
+            } else {
+                $c= new Component($element);
+                $c->setDynamic(false);
+            }
+            $this->components->add($c);
         }
     }
-    
-    /**
-     * A String representation of this Route
-     *
-     * @return string
-     */ 
-    public function toString() {
-        return sprintf("{%s}-->Name: %s; List: %s;", $this->getClassName(), $this->getNameToHuman(), $this->route_list);
-    }
-    
+
 }
-

Added: trunk/libs/action/controller/session/CreoleSessionContainer.php
===================================================================
--- trunk/libs/action/controller/session/CreoleSessionContainer.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/action/controller/session/CreoleSessionContainer.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -0,0 +1,187 @@
+lo<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('action/controller/session/ISessionContainer.php');
+
+/**
+ * Creole Session Container.
+ * 
+ * It requires a Database table defined like this:
+ * <code>
+ * CREATE TABLE c_session (
+ *	`session_id` VARCHAR (255) PRIMARY KEY,
+ *	`session_data` TEXT,
+ *	`session_lastmodified` DATETIME
+ * );
+ * </code>
+ * 
+ * <b>Warning:</b> this class was tested only with mysql.
+ *  
+ * @package medick.action.controller
+ * @subpackage session
+ * @author Oancea Aurelian 
+ */
+class CreoleSessionContainer extends Object implements ISessionContainer {
+
+	/** @var CreoleConnection */
+	protected $conn=null;
+	
+	/** @var Logger */
+	protected $logger= null;
+	
+	/**
+	 * Constructor
+	 */
+	public function CreoleSessionContainer() {
+		$this->conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
+		$this->logger= Registry::get('__logger');
+	}
+
+	public function open($save_path, $session_name) {
+		$this->gc();
+		return true;
+	}
+	
+	public function close() {
+	    $this->conn->close();
+		return true;
+	}
+
+	public function read($id) {
+        $timeout = time() - ini_get('session.gc_maxlifetime');
+		$stmt = $this->conn->prepareStatement('SELECT session_data FROM c_session   
+											   WHERE session_id = ? AND session_lastmodified > ' . $timeout);
+		$stmt->setString(1, $id);
+
+		try {
+			$rs = $stmt->executeQuery();
+			
+			if($rs->getRecordCount()==0) {
+				return '';
+			}
+			$rs->first();
+			return $rs->get('session_data');
+			
+		} catch (SQLException $sqlEx) {
+            $this->logger->debug($sqlEx->getMessage());
+			return false;
+		}
+	}
+
+
+	public function write($id,$session_data){
+		// 1. select
+		$stmt = $this->conn->prepareStatement('SELECT session_id FROM c_session WHERE session_id=?');
+		$stmt->setString(1,$id);
+		
+		try{
+			$rs = $stmt->executeQuery();
+			// 2. count results:
+			if($rs->getRecordCount()==1) {
+				// 3. update:
+				$stmt = $this->conn->prepareStatement('UPDATE c_session SET session_data=?,' . 
+													  ' session_lastmodified=now() WHERE session_id=?');
+				$stmt->setString(1,$session_data);
+				$stmt->setString(2,$id);
+
+				try{
+					$rs=$stmt->executeUpdate();
+					return true;
+				} catch (SQLException $sqlEx){
+					$this->logger->debug($sqlEx->getMessage());
+					return false;
+				}
+				
+			} else {
+				// 4. insert
+				$stmt = $this->conn->prepareStatement('INSERT INTO c_session (session_id,session_data,session_lastmodified) VALUES (?,?,now())');
+				$stmt->setString(1,$id);
+				$stmt->setString(2,$session_data);
+				try{
+					$rs = $stmt->executeUpdate();
+					return true;
+				} catch (SQLException $sqlEx){
+					$this->logger->debug($sqlEx->getMessage());
+					return false;
+				}
+			}
+		} catch (SQLException $sqlEx){
+			$this->logger->debug($sqlEx->getMessage());
+			return false;
+		}
+		
+
+	}
+
+	public function destroy($id) {
+        $stmt = $this->conn->prepareStatement('DELETE FROM c_session WHERE session_id = ?');
+        $stmt->setString(1,$id);
+        try {
+			$rs = $stmt->executeUpdate();
+			return true;
+		} catch (SQLException $sqlEx) {
+            $this->logger->debug($sqlEx->getMessage());
+			return false;
+		}
+	}
+
+	/**
+	 * Garbage Collection
+	 *
+	 * @param maxlifetime, after that the session will expire
+	 * @return boolean
+	 */
+	public function gc($maxlifetime=300) {
+//		if($maxlifetime==''){
+//			$c = LocknetConfig::singleton();
+//			$maxlifetime = $c->getSessionProperty('sess_time');
+//			if(!$maxlifetime){
+//				$maxlifetime = 0;
+//			}
+//		}
+		
+        $stmt = $this->conn->prepareStatement(
+			'DELETE FROM c_session WHERE `session_lastmodified` < ?');
+		$stmt->setTimestamp(1,time()-$maxlifetime);
+        try {
+			$rs = $stmt->executeUpdate();
+			return true;
+		} catch (SQLException $sqlEx) {
+            $this->logger->debug($sqlEx->getMessage());
+			return false;
+		}
+	}
+	
+	
+}


Property changes on: trunk/libs/action/controller/session/CreoleSessionContainer.php
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:keywords
   + Id

Modified: trunk/libs/action/controller/session/ISessionContainer.php
===================================================================
--- trunk/libs/action/controller/session/ISessionContainer.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/action/controller/session/ISessionContainer.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -71,4 +71,3 @@
      */
     public function gc($maxlifetime=300);
 }
-

Modified: trunk/libs/action/controller/session/Session.php
===================================================================
--- trunk/libs/action/controller/session/Session.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/action/controller/session/Session.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -32,6 +32,8 @@
 //////////////////////////////////////////////////////////////////////////////////
 // }}}
 
+include_once('action/controller/session/CreoleSessionContainer.php');
+
 /**
  * A wrapper around PHP session handling
  *
@@ -71,11 +73,20 @@
         if ($this->isStarted) {
             throw new IllegalStateException('Session already Started!');
         }
+        
         // TODO: more settings
         // session_cache_limiter("nocache");
         // session_write_close();
+        // $container= new CreoleSessionContainer();
+   		// session_set_save_handler(array($container, 'open'),
+        //                     array($container, 'close'),
+        //                     array($container, 'read'),
+        //                     array($container, 'write'),
+        //                     array($container, 'destroy'),
+        //                     array($container, 'gc'));
+                
         session_start();
-        session_regenerate_id(TRUE);
+        //session_regenerate_id(TRUE);
         $this->isStarted= TRUE;
     }
 
@@ -164,4 +175,5 @@
         }
         return TRUE;
     }
+      
 }

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2006-03-25 17:04:15 UTC (rev 385)
+++ trunk/libs/active/record/Base.php	2006-03-27 19:24:03 UTC (rev 386)
@@ -227,7 +227,6 @@
 
     /** Prepare this Object for serialization */
     public function __sleep() {
-        ActiveRecord::close_connection();
         return array('row', 'table_name', 'class_name','has_one', 'belongs_to', 'has_many', 'has_and_belongs_to_many');
     }
 
@@ -574,5 +573,6 @@
         // release resources.
         $rs->close();$stmt->close();
         return $results;
-    }
+    } 
+    
 }



From aurelian at berlios.de  Tue Mar 28 20:40:25 2006
From: aurelian at berlios.de (aurelian at BerliOS)
Date: Tue, 28 Mar 2006 20:40:25 +0200
Subject: [Medick-svn] r387 - applications/testor/app/models trunk trunk/libs/action/controller trunk/libs/action/controller/session trunk/libs/action/view
Message-ID: <200603281840.k2SIePp7023798@sheep.berlios.de>

Author: aurelian
Date: 2006-03-28 20:40:11 +0200 (Tue, 28 Mar 2006)
New Revision: 387

Modified:
   applications/testor/app/models/tone.php
   trunk/boot.php
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/Dispatcher.php
   trunk/libs/action/controller/Route.php
   trunk/libs/action/controller/session/CreoleSessionContainer.php
   trunk/libs/action/controller/session/Session.php
   trunk/libs/action/view/Base.php
Log:
 -- fixed CreoleSessionContainer + some minor changes

Modified: applications/testor/app/models/tone.php
===================================================================
--- applications/testor/app/models/tone.php	2006-03-27 19:24:03 UTC (rev 386)
+++ applications/testor/app/models/tone.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -8,6 +8,7 @@
 class Tone extends ActiveRecord {
 
     protected function before_save() {
+        $this->name= htmlentities($this->name);
         $this->validates()->presence_of('name');
         $this->validates()->uniqueness_of('name');
         return TRUE;
@@ -23,5 +24,5 @@
          $args = func_get_args();
          return ActiveRecord::build(new QueryBuilder(__CLASS__, $args));
     }
+}
 
-}

Modified: trunk/boot.php
===================================================================
--- trunk/boot.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/boot.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -43,7 +43,7 @@
 set_include_path( MEDICK_PATH . 'libs'   . DIRECTORY_SEPARATOR );
 
 // this should depend on environment
-error_reporting(E_ALL|E_STRICT);
+error_reporting( E_ALL | E_STRICT );
 // php 5.1 strict sdandards.
 if (version_compare(PHP_VERSION, '5.1.0') > 0) {
     date_default_timezone_set('Europe/Bucharest');
@@ -53,3 +53,4 @@
 include_once('medick/Medick.php');
 set_error_handler(array(new ErrorHandler(), 'raiseError'));
 include_once('action/controller/Dispatcher.php');
+

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/controller/Base.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -202,7 +202,9 @@
      * @return void
      */
     protected function render($template_name = NULL, $status = NULL) {
-        if (is_null($template_name)) $template_name = $this->params['action'];
+        if ($template_name === NULL) {
+            $template_name = $this->params['action'];
+        }
         $this->render_file($this->template_root . $template_name . '.phtml', $status);
     }
 
@@ -242,7 +244,7 @@
                 return $this->render_without_layout($template_file, $status);
             } else {
                 $this->template->content_for_layout= $this->template->render_file($template_file);
-                $this->logger->debug('...done.');
+                // $this->logger->debug('...done.');
                 return $this->render_text($this->template->render_file($layout_file), $status);
             }
         } else {
@@ -250,11 +252,20 @@
         }
     }
 
+    /**
+     * Renders a partial
+     *
+     * @param string
+     * @param string
+     * @param HTTPResponse::SC_*
+     */ 
     protected function render_partial($partial, $controller=NULL, $status=NULL) {
         $this->register_flash();
-        if (is_null($controller)) $location = $this->template_root;
-        else $location = $this->injector->getPath('views') . $controller . DIRECTORY_SEPARATOR;
-        // $this->logger->debug('Partial: ' . $location . '_' . $partial . '.phtml');
+        if ($controller === NULL) {
+            $location = $this->template_root;
+        } else {
+            $location = $this->injector->getPath('views') . $controller . DIRECTORY_SEPARATOR;
+        }
         return $this->render_without_layout($location . '_' . $partial . '.phtml', $status);
     }
 
@@ -352,7 +363,7 @@
     // XXX: not-done!
     protected function sendFile($location, $options = array()) {
         if(!is_file($location)) {
-            throw new MedickException("File not found...");
+            throw new MedickException('File not found...');
         }
         // $options['length'] =   File::size($location);
         // $options['filename'] = File::basename($location);
@@ -381,8 +392,12 @@
             $redirect_to .= 'index.php/';
         }
         $redirect_to .= $controller;
-        if ($action !== NULL) $redirect_to .= '/' . $action;
-        if (count($params))   $redirect_to .= '/' . implode('/', $params);
+        if ($action !== NULL) {
+            $redirect_to .= '/' . $action;
+        }
+        if (count($params)) {
+            $redirect_to .= '/' . implode('/', $params);
+        }
         $redirect_to .= '.' . $ext;
         
         $this->logger->debug('Redirecting to: ' . $redirect_to);
@@ -392,10 +407,14 @@
 
     // XXX: not done.
     // redirects to a know path (eg. /images/pic.jpg)
-    protected function redirect_to_path($path) {   }
+    protected function redirect_to_path($path) {
+        throw new MedickException('Method: ' . __METHOD__ . ' not implemented!');
+    }
 
     // XXX: not done.
-    protected function redirect($url, $message = '', $timeout = 0, $template = NULL) {     }
+    protected function redirect($url, $message = '', $timeout = 0, $template = NULL) {
+        throw new MedickException('Method: ' . __METHOD__ . ' not implemented!');
+    }
 
     // }}}
 
@@ -483,7 +502,7 @@
                     'Your filter,``'. $filter_name . '" is declared as a
                         public method of class ``' . $this->getClassName() .'" !');
             }
-            // can we use invoke?
+            // we cannot use invoke since the filter is not public
             $this->$filter_name();
         }
     }

Modified: trunk/libs/action/controller/Dispatcher.php
===================================================================
--- trunk/libs/action/controller/Dispatcher.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/controller/Dispatcher.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -64,7 +64,6 @@
     public function dispatch() {
         $request  = new HTTPRequest();
         $response = new HTTPResponse();
-        
         try {
             $configurator= $this->manager->getConfigurator();
             Registry::put($configurator, '__configurator');

Modified: trunk/libs/action/controller/Route.php
===================================================================
--- trunk/libs/action/controller/Route.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/controller/Route.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -346,6 +346,7 @@
      * @return string
      */ 
     public function toString() {
+	return '';
         return sprintf('{%s}-->Name: %s; List: %s;', 
                         $this->getClassName(), 
                         $this->getNameToHuman(), 

Modified: trunk/libs/action/controller/session/CreoleSessionContainer.php
===================================================================
--- trunk/libs/action/controller/session/CreoleSessionContainer.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/controller/session/CreoleSessionContainer.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -1,187 +1,138 @@
-lo<?php
-// {{{ License
-//////////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice,
-//   this list of conditions and the following disclaimer.
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation
-//   and/or other materials provided with the distribution.
-//   * Neither the name of Oancea Aurelian nor the names of his contributors may
-//   be used to endorse or promote products derived from this software without
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//
-// $Id$
-//
-//////////////////////////////////////////////////////////////////////////////////
-// }}}
-
-include_once('action/controller/session/ISessionContainer.php');
-
-/**
- * Creole Session Container.
- * 
- * It requires a Database table defined like this:
- * <code>
- * CREATE TABLE c_session (
- *	`session_id` VARCHAR (255) PRIMARY KEY,
- *	`session_data` TEXT,
- *	`session_lastmodified` DATETIME
- * );
- * </code>
- * 
- * <b>Warning:</b> this class was tested only with mysql.
- *  
- * @package medick.action.controller
- * @subpackage session
- * @author Oancea Aurelian 
- */
-class CreoleSessionContainer extends Object implements ISessionContainer {
-
-	/** @var CreoleConnection */
-	protected $conn=null;
-	
-	/** @var Logger */
-	protected $logger= null;
-	
-	/**
-	 * Constructor
-	 */
-	public function CreoleSessionContainer() {
-		$this->conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
-		$this->logger= Registry::get('__logger');
-	}
-
-	public function open($save_path, $session_name) {
-		$this->gc();
-		return true;
-	}
-	
-	public function close() {
-	    $this->conn->close();
-		return true;
-	}
-
-	public function read($id) {
-        $timeout = time() - ini_get('session.gc_maxlifetime');
-		$stmt = $this->conn->prepareStatement('SELECT session_data FROM c_session   
-											   WHERE session_id = ? AND session_lastmodified > ' . $timeout);
-		$stmt->setString(1, $id);
-
-		try {
-			$rs = $stmt->executeQuery();
-			
-			if($rs->getRecordCount()==0) {
-				return '';
-			}
-			$rs->first();
-			return $rs->get('session_data');
-			
-		} catch (SQLException $sqlEx) {
-            $this->logger->debug($sqlEx->getMessage());
-			return false;
-		}
-	}
-
-
-	public function write($id,$session_data){
-		// 1. select
-		$stmt = $this->conn->prepareStatement('SELECT session_id FROM c_session WHERE session_id=?');
-		$stmt->setString(1,$id);
-		
-		try{
-			$rs = $stmt->executeQuery();
-			// 2. count results:
-			if($rs->getRecordCount()==1) {
-				// 3. update:
-				$stmt = $this->conn->prepareStatement('UPDATE c_session SET session_data=?,' . 
-													  ' session_lastmodified=now() WHERE session_id=?');
-				$stmt->setString(1,$session_data);
-				$stmt->setString(2,$id);
-
-				try{
-					$rs=$stmt->executeUpdate();
-					return true;
-				} catch (SQLException $sqlEx){
-					$this->logger->debug($sqlEx->getMessage());
-					return false;
-				}
-				
-			} else {
-				// 4. insert
-				$stmt = $this->conn->prepareStatement('INSERT INTO c_session (session_id,session_data,session_lastmodified) VALUES (?,?,now())');
-				$stmt->setString(1,$id);
-				$stmt->setString(2,$session_data);
-				try{
-					$rs = $stmt->executeUpdate();
-					return true;
-				} catch (SQLException $sqlEx){
-					$this->logger->debug($sqlEx->getMessage());
-					return false;
-				}
-			}
-		} catch (SQLException $sqlEx){
-			$this->logger->debug($sqlEx->getMessage());
-			return false;
-		}
-		
-
-	}
-
-	public function destroy($id) {
-        $stmt = $this->conn->prepareStatement('DELETE FROM c_session WHERE session_id = ?');
-        $stmt->setString(1,$id);
-        try {
-			$rs = $stmt->executeUpdate();
-			return true;
-		} catch (SQLException $sqlEx) {
-            $this->logger->debug($sqlEx->getMessage());
-			return false;
-		}
-	}
-
-	/**
-	 * Garbage Collection
-	 *
-	 * @param maxlifetime, after that the session will expire
-	 * @return boolean
-	 */
-	public function gc($maxlifetime=300) {
-//		if($maxlifetime==''){
-//			$c = LocknetConfig::singleton();
-//			$maxlifetime = $c->getSessionProperty('sess_time');
-//			if(!$maxlifetime){
-//				$maxlifetime = 0;
-//			}
-//		}
-		
-        $stmt = $this->conn->prepareStatement(
-			'DELETE FROM c_session WHERE `session_lastmodified` < ?');
-		$stmt->setTimestamp(1,time()-$maxlifetime);
-        try {
-			$rs = $stmt->executeUpdate();
-			return true;
-		} catch (SQLException $sqlEx) {
-            $this->logger->debug($sqlEx->getMessage());
-			return false;
-		}
-	}
-	
-	
-}
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005, 2006 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of Oancea Aurelian nor the names of his contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+ 
+include_once('action/controller/session/ISessionContainer.php');
+ 
+/**
+ * Creole Session Container.
+ * 
+ * It requires a Database table defined like this:
+ * <code>
+ * CREATE TABLE c_sessions (
+ *   `session_id`   VARCHAR (255) PRIMARY KEY,
+ *   `session_data` TEXT,
+ *   `session_lastmodified` DATETIME
+ * );
+ * </code>
+ * 
+ * <b>Warning:</b> this class was tested only with mysql.
+ *  
+ * @package medick.action.controller
+ * @subpackage session
+ * @author Oancea Aurelian 
+ */
+class CreoleSessionContainer extends Object implements ISessionContainer {
+ 
+    /** @var CreoleConnection */
+    protected $conn=null;
+ 
+    /** @var int
+        session default maxlifetime */
+    static private $lifetime;
+ 
+    /**
+     * Constructor
+     */
+    public function CreoleSessionContainer() {
+        $this->conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
+        CreoleSessionContainer::$lifetime= ini_get('session.gc_maxlifetime');
+    }
+ 
+    public function open($save_path, $session_name) {
+        $this->gc();
+        return true;
+    }
+ 
+    public function close() {
+        $this->conn->close();
+        return true;
+    }
+ 
+    public function read($id) {
+        $timeout = time() - self::$lifetime;
+        $stmt = $this->conn->prepareStatement('SELECT session_data FROM c_sessions   
+                                       WHERE session_id = ? AND session_lastmodified > ' . $timeout);
+        $stmt->setString(1, $id);
+        $rs = $stmt->executeQuery();
+        if($rs->getRecordCount() == 0) return '';
+        $rs->first();
+        return $rs->get('session_data');
+    }
+ 
+    public function write($id, $session_data) {
+        // 1. select
+        $stmt = $this->conn->prepareStatement('SELECT session_id FROM c_sessions WHERE session_id=?');
+        $stmt->setString(1,$id);
+        $rs = $stmt->executeQuery();
+        // 2. count results:
+        if($rs->getRecordCount()==1) {
+            // 3. update:
+            $stmt = $this->conn->prepareStatement('UPDATE c_sessions SET session_data=?,' . 
+                                                  ' session_lastmodified=now() WHERE session_id=?');
+            $stmt->setString(1,$session_data);
+            $stmt->setString(2,$id);
+            $stmt->executeUpdate();
+            return true;
+        } else {
+            // 4. insert
+            $stmt = $this->conn->prepareStatement('INSERT INTO c_sessions 
+                                    (session_id,session_data,session_lastmodified) VALUES (?,?,now())');
+            $stmt->setString(1,$id);
+            $stmt->setString(2,$session_data);
+            $rs = $stmt->executeUpdate();
+            return true;
+        }
+    }
+ 
+    public function destroy($id) {
+        $stmt = $this->conn->prepareStatement('DELETE FROM c_sessions WHERE session_id = ?');
+        $stmt->setString(1,$id);
+        $stmt->executeUpdate();
+        return true;
+    }
+ 
+    /**
+     * Garbage Collection, removes all the expired sessions
+     *
+     * @param int maxlifetime, after that the session will expire
+     * @return boolean
+     */
+    public function gc($maxlifetime=300) {
+        $stmt = $this->conn->prepareStatement('DELETE FROM c_sessions WHERE `session_lastmodified` < ?');
+        $stmt->setTimestamp(1,time()-$maxlifetime);
+        $stmt->executeUpdate();
+        return true;
+    }
+}
+ 


Property changes on: trunk/libs/action/controller/session/CreoleSessionContainer.php
___________________________________________________________________
Name: svn:executable
   - *

Modified: trunk/libs/action/controller/session/Session.php
===================================================================
--- trunk/libs/action/controller/session/Session.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/controller/session/Session.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -32,7 +32,7 @@
 //////////////////////////////////////////////////////////////////////////////////
 // }}}
 
-include_once('action/controller/session/CreoleSessionContainer.php');
+// include_once('action/controller/session/CreoleSessionContainer.php');
 
 /**
  * A wrapper around PHP session handling

Modified: trunk/libs/action/view/Base.php
===================================================================
--- trunk/libs/action/view/Base.php	2006-03-27 19:24:03 UTC (rev 386)
+++ trunk/libs/action/view/Base.php	2006-03-28 18:40:11 UTC (rev 387)
@@ -53,7 +53,8 @@
 class ActionView extends Object {
 
     public static function factory($engine) {
-        return new PHPTemplateEngine();
+        $clazz= strtoupper($engine) . 'TemplateEngine';
+        return new $clazz;
     }
 
     /**
@@ -64,7 +65,8 @@
      * @param mixed value, the value on witch we strip slashes.
      *                  It can be array/string or object.
      */
-    public static function stripslashes_deep($value) {
+     
+    /* public static function stripslashes_deep($value) {
         if (is_array($value)) {
             array_map(array('ActionView','stripslashes_deep'), $value);
         } elseif (is_object($value)) {
@@ -73,7 +75,7 @@
             stripslashes($value);
         }
         return $value;
-     }
+     } */ 
 }
 
 /**
@@ -131,7 +133,7 @@
             throw new FileNotFoundException ('Cannot Find Template: ' . $file);
         }
         if (!empty($this->vars)) {
-            if(!get_magic_quotes_gpc()) $this->vars = ActionView::stripslashes_deep($this->vars);
+            // if(!get_magic_quotes_gpc()) $this->vars = ActionView::stripslashes_deep($this->vars);
             extract($this->vars,EXTR_SKIP);
         }
         ob_start();



