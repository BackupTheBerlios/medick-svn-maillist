From aurelian at berlios.de  Thu Oct 13 21:14:43 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Thu, 13 Oct 2005 21:14:43 +0200
Subject: [Medick-svn] r196 - in trunk/libs/action: controller view
Message-ID: <200510131914.j9DJEhpO027871@sheep.berlios.de>

Author: aurelian
Date: 2005-10-13 21:14:43 +0200 (Thu, 13 Oct 2005)
New Revision: 196

Modified:
   trunk/libs/action/controller/Base.php
   trunk/libs/action/view/HTML.php
Log:
 - [ ACBase, AVHTML ] reading the application document root from the configuration file
# with this patch we can install medick anyware under the web server DocumentRoot


Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2005-10-12 05:25:54 UTC (rev 195)
+++ trunk/libs/action/controller/Base.php	2005-10-13 19:14:43 UTC (rev 196)
@@ -233,7 +233,7 @@
         
         if ($this->config->getProperty('rewrite')) {
             $this->response->redirect(
-                $this->config->getProperty('server_name') . $this->config->getProperty('document_root') . 
+                $this->config->getProperty('server_name') . $this->config->getProperty('document_root') . '/' .
                 $controller . '/' . $action . '.html');
         } else {
             // rewrite-off

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2005-10-12 05:25:54 UTC (rev 195)
+++ trunk/libs/action/view/HTML.php	2005-10-13 19:14:43 UTC (rev 196)
@@ -45,7 +45,7 @@
     public static function create($controller, $action, $params=array()) {
         if (!Registry::get('__configurator')->getProperty('rewrite')) {
             // rewrite-off:
-            $buff = 'index.php?controller=' . $controller . '&amp;action=' . $action;
+            $buff = Registry::get('__configurator')->getProperty('document_root') . '/index.php?controller=' . $controller . '&amp;action=' . $action;
             if (!empty($params)) {
                 foreach ($params AS $key=>$value) {
                     $buff .= '&amp;' . $key . '=' . $value;
@@ -54,7 +54,7 @@
             return $buff;
         } else {
             // rewrite-on:
-            $buff= '/' . $controller . '/' . $action;
+            $buff= Registry::get('__configurator')->getProperty('document_root') . '/' . $controller . '/' . $action;
             if (!empty($params)) {
                 foreach ($params AS $key=>$value) {
                     $buff .= '/' . $value;



From aurelian at berlios.de  Thu Oct 13 21:57:02 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Thu, 13 Oct 2005 21:57:02 +0200
Subject: [Medick-svn] r197 - branches/route.190
Message-ID: <200510131957.j9DJv2NI031370@sheep.berlios.de>

Author: aurelian
Date: 2005-10-13 21:57:01 +0200 (Thu, 13 Oct 2005)
New Revision: 197

Removed:
   branches/route.190/Injector.php
   branches/route.190/Request.php
   branches/route.190/Response.php
   branches/route.190/cli/
   branches/route.190/http/
   branches/route.190/session/
Log:
 - removed unused files.

Deleted: branches/route.190/Injector.php
===================================================================
--- branches/route.190/Injector.php	2005-10-13 19:14:43 UTC (rev 196)
+++ branches/route.190/Injector.php	2005-10-13 19:57:01 UTC (rev 197)
@@ -1,80 +0,0 @@
-<?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice, 
-//   this list of conditions and the following disclaimer. 
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation 
-//   and/or other materials provided with the distribution. 
-//   * Neither the name of locknet.ro nor the names of its contributors may 
-//   be used to endorse or promote products derived from this software without 
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-// $Id$
-// 
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
-
-include_once('active/record/Base.php');
-
-/** 
- * Model Injector.
- * Injects the model name into Active Record Base Class.
- * @package locknet7.action.controller
- */
-
-class Injector extends Object {
-
-    /**
-     * Tasks:
-     * 1) include the model file
-     * 2) investigate the Model class
-     * 3) set ActiveRecordBase::$__klass, aka the table name.
-     * @TODO: can we hook a Registry here?
-     */
-    public static function inject($model) {
-        $logger = Registry::get('__logger');
-        $model_location = Registry::get('__configurator')->getProperty('application_path') . 
-            DIRECTORY_SEPARATOR . 'models' . DIRECTORY_SEPARATOR . $model . '.php';
-        $logger->debug('Model Location:: ' . $model_location);
-        // FIXME: a custom error.
-        if (!is_file($model_location)) throw new MedickException ('No such file or directory!');
-        
-        include_once($model_location);
-
-        $model_name = ucfirst($model);
-        
-        $logger->debug('Model Name:: ' .$model_name);
-        
-        $model_object = new ReflectionClass($model_name);
-
-        if ($model_object->getParentClass()->name != 'ActiveRecordBase') {
-            throw new MedickException ('Wrong Definition of your Model, ' . $model_name . ' must extend ActiveRecordBase object!');
-        }
-        $logger->debug('Table:: ' .$model);
-        ActiveRecordBase::setTable($model);
-    }
-
-    /** prepare static members for our model */
-    public static function prepareARBase() {
-        return ActiveRecordBase::establish_connection();
-    }
-}
-

Deleted: branches/route.190/Request.php
===================================================================
--- branches/route.190/Request.php	2005-10-13 19:14:43 UTC (rev 196)
+++ branches/route.190/Request.php	2005-10-13 19:57:01 UTC (rev 197)
@@ -1,103 +0,0 @@
-<?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice, 
-//   this list of conditions and the following disclaimer. 
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation 
-//   and/or other materials provided with the distribution. 
-//   * Neither the name of locknet.ro nor the names of its contributors may 
-//   be used to endorse or promote products derived from this software without 
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-// $Id$
-// 
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
-
-if (php_sapi_name() == 'cli') {
-    include_once('action/controller/cli/CLIRequest.php');   
-} else {
-    include_once('action/controller/http/HTTPRequest.php');
-}
-
-/** 
- * @package locknet7.action.controller.request
- */
-abstract class Request extends Object {
-    
-    /** @var array
-        current request parameters */
-    protected $params = array();
-    
-    /** @var Route current request Route */ // XXX. is this used anymore?
-    protected $route;
-    
-    /**
-     * It gets the param
-     * @param mixed, param, the paremeter name
-     * @return the param value of NULL if this param was not passed with this Resuest
-     */
-    public function getParam($param) {
-        return isset($this->params[$param]) ? $this->params[$param] : NULL;
-    }    
-    
-    /**
-     * Check if the current Request has the parameter with the specified name
-     * @param string param_name the parameter name
-     * @return bool TRUE if the parameter_name is included in this request, FALSE otherwise
-     */
-    public function hasParam($param_name) {
-        return isset($this->params[$param_name]);
-    }
-    
-    /** 
-     * It gets all the parameters of this Request 
-     * @return array this request parameters.
-     */
-    public function getParams() {
-        return $this->params;   
-    }
-    
-    /**
-     * It sets a param.
-     * @param string, name, the name of the param to set
-     * @param mixed, value, value of the param
-     * @return void
-     */
-    public function setParam($name, $value) {
-        $this->params[$name] = $value;
-    }    
-    
-    /** XXX. is this used anymore?
-     * It sets the Request Route
-     * @param Route route, the route to set on this Request
-     * @return void
-     */
-    public function setRoute(IRoute $route) {
-        $this->route = $route;
-    }    
-    
-    /** It gets the Route */
-    public function getRoute() {
-        return $this->route;
-    }
-}
-

Deleted: branches/route.190/Response.php
===================================================================
--- branches/route.190/Response.php	2005-10-13 19:14:43 UTC (rev 196)
+++ branches/route.190/Response.php	2005-10-13 19:57:01 UTC (rev 197)
@@ -1,105 +0,0 @@
-<?php
-// {{{ License
-// ///////////////////////////////////////////////////////////////////////////////
-//
-// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//   * Redistributions of source code must retain the above copyright notice, 
-//   this list of conditions and the following disclaimer. 
-//   * Redistributions in binary form must reproduce the above copyright notice,
-//   this list of conditions and the following disclaimer in the documentation 
-//   and/or other materials provided with the distribution. 
-//   * Neither the name of locknet.ro nor the names of its contributors may 
-//   be used to endorse or promote products derived from this software without 
-//   specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// 
-// $Id$
-// 
-// ///////////////////////////////////////////////////////////////////////////////
-// }}}
-
-if (php_sapi_name() == 'cli') {
-    include_once('action/controller/cli/CLIResponse.php');   
-} else {
-    include_once('action/controller/http/HTTPResponse.php');
-}
-
-/**
- * @package locknet7.action.controller.response
- */
-abstract class Response extends Object {
-
-    /** Status code (200) indicating the request succeeded normally. */
-    const SC_OK = 200;
-
-    /** Status code (304) indicating that a conditional GET
-        operation found that the resource was available and not modified. */
-    const SC_NOT_MODIFIED = 304;
-
-    /** Status code (400) indicating the request sent by the
-        client was syntactically incorrect. */
-    const SC_BAD_REQUEST = 400;
-
-    /** Status code (403) indicating the server
-        understood the request but refused to fulfill it. */
-    const SC_FORBIDDEN = 403;
-
-    /** Status code (404) indicating that the requested
-        resource is not available. */
-    const SC_NOT_FOUND = 404;
-
-    /** Status code (500) indicating an error inside
-        the HTTP server which prevented it from fulfilling the request. */
-    const SC_INTERNAL_SERVER_ERROR = 500;
-
-    /** Status code (503) indicating that the HTTP server
-        is temporarily overloaded, and unable to handle the request. */
-    const SC_SERVICE_UNAVAILABLE = 503;
-    
-    protected $content;
-    
-    /**
-     * Set the content 
-     * @param mixed content, the content
-     */
-    public function setContent($content) {
-        $this->content = $content;
-    }
-    
-    /** Appends some content */
-    public function append($content) {
-        $this->content .= $content;
-    } 
-    
-    /** It gets the content */
-    public function getContent() {
-        return $this->content;
-    }
-    
-    /** echo`s the content */
-    public function dump() {
-        echo $this->content;
-    }
-    
-    /** 
-     * Sets the status of this response
-     * @param Response::SC_*, status, the status of this response
-     */
-    abstract function setStatus($status);
-
-}
-



From aurelian at berlios.de  Fri Oct 14 20:03:38 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:03:38 +0200
Subject: [Medick-svn] r198 - trunk/test
Message-ID: <200510141803.j9EI3cK1020521@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:03:36 +0200 (Fri, 14 Oct 2005)
New Revision: 198

Modified:
   trunk/test/testrunner.php
Log:
 -[ test/runner.php ] removed bloated class

Modified: trunk/test/testrunner.php
===================================================================
--- trunk/test/testrunner.php	2005-10-13 19:57:01 UTC (rev 197)
+++ trunk/test/testrunner.php	2005-10-14 18:03:36 UTC (rev 198)
@@ -11,12 +11,12 @@
 
 set_include_path( TOP_LOCATION . 'libs' . DIRECTORY_SEPARATOR . PATH_SEPARATOR .
                   TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . 
-                  TOP_LOCATION . 'app'  . DIRECTORY_SEPARATOR . 'models' . DIRECTORY_SEPARATOR . PATH_SEPARATOR .
                   dirname(__FILE__) 
                 );
 
 error_reporting(E_ALL);
 set_time_limit(0);
+ini_set('display_errors', 1);
 
 include_once('medick/Object.php');
 include_once('medick/Exception.php');
@@ -27,53 +27,34 @@
 include_once('simpletest/unit_tester.php');
 include_once('simpletest/reporter.php');
 
+if (is_file('test.db')) unlink('test.db');
 
-// {{{ RecursiveTestLoader
-// loads the test
-// TODO: refactor.
-class RecursiveTestLoader extends RecursiveIteratorIterator {
+$query=<<<__
+    CREATE TABLE todos (
+        id INTEGER PRIMARY KEY,
+        description VARCHAR(100),
+        done INTEGER(1)
+    );
+__;
+sqlite_query(sqlite_open('test.db'), $query);
 
-    private static $test;
-	
-    /** Constructor */
-	function __construct() {
-		parent::__construct(
-		  new CachingRecursiveIterator(
-		      new RecursiveDirectoryIterator(
-		          dirname(__FILE__)
-		      ), 
-		      CIT_CALL_TOSTRING|CIT_CATCH_GET_CHILD
-		  ),
-		1);   
-		self::$test= new GroupTest('====== Routes :: Medick Framework Unit Tests =====');
-        }
+include_once('mock/MockConfigurator.php');
+Registry::put(new MockConfigurator(), '__configurator');
+include_once('logger/Logger.php');
+Registry::put(new Logger(), '__logger');
 
-	/** @return the current element valid element */
-	function current() {
-		$tree = '';
-		for ($l=0; $l < $this->getDepth(); $l++) {
-			$tree .= $this->getSubIterator($l)->hasNext() ? '| ' : '  ';
-		}
-        if (preg_match("/Test.php/i", $this->key()) && is_file($this->key()) && !preg_match("/.svn/i", $this->key())) {
-            self::$test->addTestFile($this->key());
-        }
-	}
+$test= new GroupTest('====== Medick Framework Unit Tests =====');
 
-	/** Aggregates the inner iterator */
-	function __call($func, $params) {
-		return call_user_func_array(array($this->getSubIterator(), $func), $params);
-	}
-	
-	public static function getTest() {
-	   return self::$test;
-	}
-	
+$it = new DirectoryIterator(dirname(__FILE__));
+foreach($it as $file) {
+    if ($file->isDir()) continue;
+    if (preg_match("/Test.php/i", $file->getFileName())) $test->addTestFile($file->getFileName());
 }
 
-foreach(new RecursiveTestLoader() as $test) { }
+$test->run(new TextReporter());
 
-RecursiveTestLoader::getTest()->run(new TextReporter());
-
 $time_end = microtime(true);
 echo "Done in " . ($time_end - $time_start) . " seconds\n";
 
+unlink('test.db');
+



From aurelian at berlios.de  Fri Oct 14 20:04:54 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:04:54 +0200
Subject: [Medick-svn] r199 - in trunk/test: . dummy dummy/models mock
Message-ID: <200510141804.j9EI4sG1023680@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:04:52 +0200 (Fri, 14 Oct 2005)
New Revision: 199

Added:
   trunk/test/ARBaseBasicsTest.php
   trunk/test/dummy/
   trunk/test/dummy/models/
   trunk/test/dummy/models/todo.php
   trunk/test/mock/MockConfigurator.php
Log:
 - [ test* ] added a basic test for ARBase

Added: trunk/test/ARBaseBasicsTest.php
===================================================================
--- trunk/test/ARBaseBasicsTest.php	2005-10-14 18:03:36 UTC (rev 198)
+++ trunk/test/ARBaseBasicsTest.php	2005-10-14 18:04:52 UTC (rev 199)
@@ -0,0 +1,44 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/todo.php');
+
+/** Tests insert, update, save (insert/update), delete. */
+class ARBaseBasicsTest extends UnitTestCase {
+
+    /** <tt>save && delete test</tt> */
+    public function testSave() {
+        $item= new Todo();
+        $item->description= 'A new Todo';
+        $this->assertEqual($item->save(), $item->id);
+        $this->assertEqual($item->delete(), 1);
+    }
+
+    /** <tt>save && delete test</tt> */
+    public function testDelete() {
+        $item = new Todo();
+        $item->description = 'Brr';
+        $item->save();
+        $this->assertEqual($item->delete(), 1);
+        $this->assertEqual($item->delete(), 0);
+    }
+    
+    /** <tt>insert</tt> */
+    public function testInsert() {
+        $item = new Todo();
+        $item->description = 'Inserting...';
+        $this->assertEqual($item->insert(), $item->id);
+        $item->delete();
+    }
+    /** <tt>update test</tt> */
+    public function testUpdate() {
+        $item = new Todo();
+        $item->description = 'Foo...';
+        $this->assertEqual($item->insert(), $item->id);
+        $item->description = 'Bar...';
+        $this->assertEqual($item->update(), 1);
+        $this->assertEqual($item->delete(), 1);
+    }
+}
+


Property changes on: trunk/test/ARBaseBasicsTest.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/dummy/models/todo.php
===================================================================
--- trunk/test/dummy/models/todo.php	2005-10-14 18:03:36 UTC (rev 198)
+++ trunk/test/dummy/models/todo.php	2005-10-14 18:04:52 UTC (rev 199)
@@ -0,0 +1,8 @@
+<?php
+
+// $Id$    
+
+include_once('active/record/Base.php');
+
+class Todo extends ActiveRecordBase {   }
+


Property changes on: trunk/test/dummy/models/todo.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/mock/MockConfigurator.php
===================================================================
--- trunk/test/mock/MockConfigurator.php	2005-10-14 18:03:36 UTC (rev 198)
+++ trunk/test/mock/MockConfigurator.php	2005-10-14 18:04:52 UTC (rev 199)
@@ -0,0 +1,23 @@
+<?php
+
+// $Id$
+    
+class MockConfigurator extends Object {
+
+    public function getLoggerOutputters() {
+        return array();    
+    }
+
+    public function getLoggerFormatter() {
+        return FALSE;
+    }
+
+    public function getDatabaseDsn() {
+        return array(
+             'phptype'  => 'sqlite',
+             'database' => 'test.db');
+    }
+
+}
+
+?>


Property changes on: trunk/test/mock/MockConfigurator.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Fri Oct 14 20:17:11 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:17:11 +0200
Subject: [Medick-svn] r200 - trunk/libs/logger
Message-ID: <200510141817.j9EIHBEo019915@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:17:10 +0200 (Fri, 14 Oct 2005)
New Revision: 200

Modified:
   trunk/libs/logger/Logger.php
Log:
 - [ logger ] Logger will work even if we dont configure the outputters or the formatter without breaking the script execution

Modified: trunk/libs/logger/Logger.php
===================================================================
--- trunk/libs/logger/Logger.php	2005-10-14 18:04:52 UTC (rev 199)
+++ trunk/libs/logger/Logger.php	2005-10-14 18:17:10 UTC (rev 200)
@@ -71,31 +71,23 @@
     
     /**
      * Constructor.
-     * It reads the config file and setup the logging system 
+     * It reads the config file and setup the logging system
      */
     public function __construct() {
-    
         $configurator = Registry::get('__configurator');
         $outputters   = $configurator->getLoggerOutputters();
-
-        for ($outputters->rewind(); $outputters->valid(); $outputters->next()) {   
-            foreach($outputters->getChildren() as $outputter) {
-                try {
-                    $class_name= ucfirst((string)trim($outputter['name'])) . 'Outputter';
-                    $class_file= 'logger' . DIRECTORY_SEPARATOR . 'outputter' . DIRECTORY_SEPARATOR . $class_name . '.php';
-                    include_once($class_file);
-                    $class= new ReflectionClass($class_name);
-                    $this->attach( 
-                        $class->newInstance( (string)trim($outputter['level']), (string)trim($outputter['value']) ));
-                } catch (ReflectionException $rEx) {
-                    $this->warn($rEx->getMessage());
-                }
-            }
+        
+        if (sizeof($outputters) != 0) {
+            $this->load($outputters);
         }
-        $this->setLevel(Logger::DEBUG);
-        $_klazz = $configurator->getLoggerFormatter();
-        include_once('logger' . DIRECTORY_SEPARATOR . 'formatter' . DIRECTORY_SEPARATOR . $_klazz . '.php');
-        $this->formatter= new $_klazz;
+        
+        $this->setLevel(Logger::DEBUG); // TODO: check this line again please.
+        
+        if ($_klazz = $configurator->getLoggerFormatter()) {
+            include_once('logger' . DIRECTORY_SEPARATOR . 'formatter' . DIRECTORY_SEPARATOR . $_klazz . '.php');
+            $this->formatter= new $_klazz;
+        }
+        
         $this->debug('Logger ready');
     }
 
@@ -162,6 +154,28 @@
     }
     
     /**
+     * Loads the Outputters.
+     * TODO: why do we need 2 iterations?
+     * @param Iterator outputters collection
+     */
+    public function load(Iterator $outputters) {
+        for ($outputters->rewind(); $outputters->valid(); $outputters->next()) {
+            foreach($outputters->getChildren() as $outputter) {
+                try {
+                    $class_name= ucfirst((string)trim($outputter['name'])) . 'Outputter';
+                    $class_file= 'logger' . DIRECTORY_SEPARATOR . 'outputter' . DIRECTORY_SEPARATOR . $class_name . '.php';
+                    include_once($class_file);
+                    $class= new ReflectionClass($class_name);
+                    $this->attach( 
+                        $class->newInstance( (string)trim($outputter['level']), (string)trim($outputter['value']) ));
+                } catch (ReflectionException $rEx) {
+                    $this->warn($rEx->getMessage());
+                }
+            }
+        }    
+    } 
+    
+    /**
      * It gets the list with attached outputters
      * @return IOutputter[]
      */ 



From aurelian at berlios.de  Fri Oct 14 20:17:42 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:17:42 +0200
Subject: [Medick-svn] r201 - trunk/libs/medick
Message-ID: <200510141817.j9EIHg1n020044@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:17:42 +0200 (Fri, 14 Oct 2005)
New Revision: 201

Modified:
   trunk/libs/medick/Collection.php
Log:
 - [ MCollection ] mior typo.

Modified: trunk/libs/medick/Collection.php
===================================================================
--- trunk/libs/medick/Collection.php	2005-10-14 18:17:10 UTC (rev 200)
+++ trunk/libs/medick/Collection.php	2005-10-14 18:17:42 UTC (rev 201)
@@ -136,7 +136,7 @@
      * @param ICollection
      * @return void
      */
-    public function addAll(ICollection $ic) {
+    public function addAll(Collection $ic) {
         for($it = $ic->getIterator(); $it->valid(); $it->next()) {
             $this->add($it->current());
         }



From aurelian at berlios.de  Fri Oct 14 20:18:32 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:18:32 +0200
Subject: [Medick-svn] r202 - trunk
Message-ID: <200510141818.j9EIIWOq020116@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:18:32 +0200 (Fri, 14 Oct 2005)
New Revision: 202

Modified:
   trunk/VERSION
Log:
 - updated the VERSION 

Modified: trunk/VERSION
===================================================================
--- trunk/VERSION	2005-10-14 18:17:42 UTC (rev 201)
+++ trunk/VERSION	2005-10-14 18:18:32 UTC (rev 202)
@@ -1 +1 @@
-0.0.1
+0.0.2-svn



From aurelian at berlios.de  Fri Oct 14 20:46:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:46:39 +0200
Subject: [Medick-svn] r203 - trunk
Message-ID: <200510141846.j9EIkdqk021327@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:46:39 +0200 (Fri, 14 Oct 2005)
New Revision: 203

Modified:
   trunk/CHANGELOG
Log:
 - CHANGELOG

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2005-10-14 18:18:32 UTC (rev 202)
+++ trunk/CHANGELOG	2005-10-14 18:46:39 UTC (rev 203)
@@ -1,14 +1,16 @@
 $Id$
 * work in progress.
+^ small wish-list
 
+0.0.3(*)
+    - Unit test ActiveRecordBase (*)
 
-0.0.2(*)
-    - session
-    - added Mapping concept.
-    - added core classes (Object, Registry, Collection etc.)
-    - class organization (^)
-    - implement the Registry system to hold our classes instances
-    - Model is capable of getting values by foreign keys. Eg.: $todo->project->name
+0.0.2 (14.Oct.2005)
+    - initial import of Session
+    - added core classes (Object, Registry, Collection and Exception) and Mapping concept: Map->Route->Params->Validators-->Headers;
+    - implement the Registry system to hold our classes instances;
+    - Model is capable of getting values by foreign keys. Eg.: $todo->project->name;
+    - many minor fixes.
 
 0.0.1 (6.Jul.2005)
     - minimal functional version



From aurelian at berlios.de  Fri Oct 14 20:48:17 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 20:48:17 +0200
Subject: [Medick-svn] r204 - trunk
Message-ID: <200510141848.j9EImH09021444@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 20:48:17 +0200 (Fri, 14 Oct 2005)
New Revision: 204

Modified:
   trunk/TODO
Log:
 - update TODO

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2005-10-14 18:46:39 UTC (rev 203)
+++ trunk/TODO	2005-10-14 18:48:17 UTC (rev 204)
@@ -11,6 +11,9 @@
 (!) highest priority
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
+0.0.3 WishList:
+Implement Session management
+Fix && Clean-up Routing System
 
 1. Routing Mechanism.
     ! Must choose between some kind of RoR implementation or ivent a new and magick Routing system



From aurelian at berlios.de  Fri Oct 14 21:14:44 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 14 Oct 2005 21:14:44 +0200
Subject: [Medick-svn] r205 - trunk/docs/patches
Message-ID: <200510141914.j9EJEh5n022651@sheep.berlios.de>

Author: aurelian
Date: 2005-10-14 21:14:43 +0200 (Fri, 14 Oct 2005)
New Revision: 205

Added:
   trunk/docs/patches/creole.sqlite.patch
Log:
 - [ patches ] Added SQLite Creole patch, in case this changes are not commited in the creole cvs

Added: trunk/docs/patches/creole.sqlite.patch
===================================================================
--- trunk/docs/patches/creole.sqlite.patch	2005-10-14 18:48:17 UTC (rev 204)
+++ trunk/docs/patches/creole.sqlite.patch	2005-10-14 19:14:43 UTC (rev 205)
@@ -0,0 +1,58 @@
+? LICENSE
+? creole.patch
+Index: drivers/sqlite/SQLiteConnection.php
+===================================================================
+RCS file: /cvs/creole/creole/classes/creole/drivers/sqlite/SQLiteConnection.php,v
+retrieving revision 1.12
+diff -u -r1.12 SQLiteConnection.php
+--- drivers/sqlite/SQLiteConnection.php	1 Sep 2004 14:00:29 -0000	1.12
++++ drivers/sqlite/SQLiteConnection.php	14 Oct 2005 19:12:08 -0000
+@@ -165,9 +165,10 @@
+     public function executeQuery($sql, $fetchmode = null)
+     {    
+         ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
+-        $result = @sqlite_query($this->dblink, $sql);
++        $this->lastQuery = $sql;
++        $result = @sqlite_query($this->dblink, $this->lastQuery);
+         if (!$result) {
+-            throw new SQLException('Could not execute query', $php_errormsg, $sql); //sqlite_error_string(sqlite_last_error($this->dblink))
++            throw new SQLException('Could not execute query', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
+         }
+         require_once 'creole/drivers/sqlite/SQLiteResultSet.php';
+         return new SQLiteResultSet($this, $result, $fetchmode);    
+@@ -178,9 +179,10 @@
+      */
+     function executeUpdate($sql)
+     {
+-        $result = @sqlite_query($this->dblink, $sql);
++        $this->lastQuery = $sql;
++        $result = @sqlite_query($this->dblink, $this->lastQuery);
+         if (!$result) {            
+-            throw new SQLException('Could not execute update', $php_errormsg, $sql); //sqlite_error_string(sqlite_last_error($this->dblink))
++            throw new SQLException('Could not execute update', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
+         }
+         return (int) @sqlite_changes($this->dblink);
+     }
+@@ -235,4 +237,4 @@
+         return (int) @sqlite_changes($this->dblink);
+     }
+     
+-}
+\ No newline at end of file
++}
+Index: drivers/sqlite/metadata/SQLiteTableInfo.php
+===================================================================
+RCS file: /cvs/creole/creole/classes/creole/drivers/sqlite/metadata/SQLiteTableInfo.php,v
+retrieving revision 1.7
+diff -u -r1.7 SQLiteTableInfo.php
+--- drivers/sqlite/metadata/SQLiteTableInfo.php	29 Nov 2004 13:40:12 -0000	1.7
++++ drivers/sqlite/metadata/SQLiteTableInfo.php	14 Oct 2005 19:12:10 -0000
+@@ -72,7 +72,7 @@
+             
+             $this->columns[$name] = new ColumnInfo($this, $name, SQLiteTypes::getType($type), $type, $size, $scale, $is_nullable, $default_val);
+             
+-            if (strtolower($type) == 'integer primary key') {
++            if (($row['pk'] == 1) or (strtolower($type) == 'integer primary key')) {
+                 if ($this->primaryKey === null) {
+                     $this->primaryKey = new PrimaryKeyInfo($name);
+                 }



From aurelian at berlios.de  Sat Oct 15 14:08:00 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 14:08:00 +0200
Subject: [Medick-svn] r206 - trunk/libs/action/controller
Message-ID: <200510151208.j9FC80Es003713@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 14:07:52 +0200 (Sat, 15 Oct 2005)
New Revision: 206

Modified:
   trunk/libs/action/controller/Base.php
Log:
 - [ ACBase ] provide magick  variable to templates

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2005-10-14 19:14:43 UTC (rev 205)
+++ trunk/libs/action/controller/Base.php	2005-10-15 12:07:52 UTC (rev 206)
@@ -74,15 +74,15 @@
     
     /** @var string 
         Default location for template files*/
-	protected $template_root;
+    protected $template_root;
     
-	/** @var string 
+    /** @var string
         application path*/
-	protected $app_path;
+    protected $app_path;
     
     /** @var ActiveViewBase 
         Template Engine */
-	protected $template;
+    protected $template;
     
     /** @var bool 
         Flag to indicate that the current action was performed.*/
@@ -106,7 +106,7 @@
         return $response;
     }
 
-	// {{{ renders.
+    // {{{ renders.
 
     /**
      * It renders the template name witch can be the name of the curent action.
@@ -126,10 +126,10 @@
      * @return void
      */
     protected function render($template_name = NULL, $status = NULL) {
-		if (is_null($template_name)) $template_name = $this->params['action'];
-		$this->render_file($this->template_root . $template_name . '.phtml', $status);
-	}
-	
+        if (is_null($template_name)) $template_name = $this->params['action'];
+        $this->render_file($this->template_root . $template_name . '.phtml', $status);
+    }
+    
     /**
      * It renders the template file.
      * 
@@ -168,10 +168,10 @@
                 $this->params['controller'] . DIRECTORY_SEPARATOR . $this->params['action'] . '.phtml';
             $this->render_text($this->template->render_file($_layout), $status);
         } else {
-    	   $this->render_text($this->template->render_file($template_file), $status);
+           $this->render_text($this->template->render_file($template_file), $status);
         }
-	}
-	
+    }
+    
     /**
      * Will render some text.
      * Is the _base_ method for render_file
@@ -189,12 +189,12 @@
             return;
         }
         if (is_null($status)) $status = Response::SC_OK;
-		$this->response->setStatus($status);
+        $this->response->setStatus($status);
         $this->response->setContent($text);
         $this->action_performed = TRUE;
-	}
-	
-	// }}}
+    }
+    
+    // }}}
 
     /**
      * Act as an internal constructor.
@@ -212,7 +212,8 @@
         $this->app_path = $this->config->getProperty('application_path') . DIRECTORY_SEPARATOR;
         $this->template_root = 
             $this->app_path . 'views' . DIRECTORY_SEPARATOR . $this->params['controller'] . DIRECTORY_SEPARATOR;
-		$this->template = ActionViewBase::factory();
+        $this->template = ActionViewBase::factory();
+        $this->template->__base= $this->config->getProperty('document_root');
     }
 
     // XXX: not-done!
@@ -320,11 +321,11 @@
         }
     }
 
-	/**
-	 * Injects model names into ActiveRecordBase by using the ModelInjector.
-	 * TODO: table inheritance ?
+    /**
+     * Injects model names into ActiveRecordBase by using the ModelInjector.
+     * TODO: table inheritance ?
      * TODO: can we hook a Registry here?
-	 */
+     */
     private function add_models() {
         if (isset($this->model)) {
             $this->logger->debug("We have Models...");
@@ -344,7 +345,7 @@
      * and also when we perform the action
      * TODO: can we move this to the Object class?
      * @param string method_name, the method.
-     * 							  NOTE: We force the name to be on lower case.
+     *                            NOTE: We force the name to be on lower case.
      * @return RelfectionMethod or FALSE in case of failure. 
      */ 
     private function createMethod($method_name) {



From aurelian at berlios.de  Sat Oct 15 14:38:10 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 14:38:10 +0200
Subject: [Medick-svn] r207 - trunk/libs/configurator
Message-ID: <200510151238.j9FCcAiT028723@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 14:38:09 +0200 (Sat, 15 Oct 2005)
New Revision: 207

Modified:
   trunk/libs/configurator/IConfigurator.php
   trunk/libs/configurator/XMLConfigurator.php
Log:
 - [ configurator/IConfigurator ] removed unused methods: getSectionProperty and getDefaultRoute
 - [ configurator/XMLConfigurator ] removed unused methods
 - [ configurator/XMLConfigurator ] fix: when the value of a property is off,false or 0, getProperty should return false, this fix solves the rewrite on/off setting.


Modified: trunk/libs/configurator/IConfigurator.php
===================================================================
--- trunk/libs/configurator/IConfigurator.php	2005-10-15 12:07:52 UTC (rev 206)
+++ trunk/libs/configurator/IConfigurator.php	2005-10-15 12:38:09 UTC (rev 207)
@@ -39,13 +39,6 @@
  * @package locknet7.config
  */
 interface IConfigurator {
-    /**
-     * It gets the section property
-     * @param string, section, the section
-     * @param string, property, the property
-     * @return string, the section property
-     */
-    function getSectionProperty($section, $property);
     
     /**
      * It gets the logger outputters.
@@ -68,12 +61,6 @@
     function getProperty($name);
     
     /**
-     * It gets the default application route.
-     * @return Object, so we can access properties as members.
-     */
-    function getDefaultRoute();
-    
-    /**
      * Based on id we return the dsn array
      * <code>
      *      // for Creole this dsn format will do the job:
@@ -85,4 +72,3 @@
      */
     function getDatabaseDsn($id = FALSE);
 }
-

Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2005-10-15 12:07:52 UTC (rev 206)
+++ trunk/libs/configurator/XMLConfigurator.php	2005-10-15 12:38:09 UTC (rev 207)
@@ -55,22 +55,6 @@
         else $this->sxe = simplexml_load_string($xml, 'SimpleXMLIterator');
         if ($this->sxe===false) throw new ConfiguratorException('Cannot read ' . $xml . '\n<br /> Bad Format!');
     }
-
-    /** @see Configurator::getSectionProperty() */
-    public function getSectionProperty($section, $property) {
-        if(!$this->sxe->$section) {
-            throw new ConfiguratorException('Cannot find ' . $section . ' section in your Configuration!');
-        }
-        $_sys   = $this->sxe->$section->$property;
-        $_query = (string)trim($_sys['value']);
-        if( ($_query=='') OR ($_query=='false') OR ($_query=='off') OR ($_query == 0) ){
-            return false;
-        } elseif( ($_query=='true') OR ($_query=='on') OR ($_query == 1) ) {
-            return true;
-        } else {
-            return (string)$_query;
-        }
-    }
     
     /** 
      * Configuration Example:
@@ -142,9 +126,15 @@
     /** @see Configurator::getProperty */
     public function getProperty($name) {
         foreach($this->sxe->property as  $properties ) {
-            if($properties['name']==$name) {
-                return (string)trim($properties['value']);
-            }
+            if($properties['name'] != $name)
+                continue;
+            $_query= (string)trim($properties['value']);
+            if( ($_query=='') OR ($_query=='false') OR ($_query=='off') OR ($_query == '0') )
+                return (bool)false;
+            elseif( ($_query=='true') OR ($_query=='on') OR ($_query == '1') ) 
+                return (bool)true;
+            else 
+                return (string)$_query;
         }
         throw new ConfiguratorException('Property ' . $name . ' not found!');
     }
@@ -175,30 +165,10 @@
         $this->sxe = simplexml_import_dom($dom, 'SimpleXMLIterator');
     }
     
-    /** 
-     * Configuration Example:
-     * <code>
-     *      <route name="default">
-     *          <controller>foo</controller>
-     *          <action>someaction</action>
-     *      </route>
-     * </code>
-     * or, to use the default medick action (index):
-     * <code>
-     *      <route><controller>foo</controller></route>
-     * </code>
-     * @see Configurator::getDefaultRoute() */
-    public function getDefaultRoute() {
-        return $this->sxe->route[0];
-    }
- 
-    /** sets the default route */
-    public function setDefaultRoute($controller, $action = 'index') {
-        $this->sxe->route[0]->controller = $controller;
-        $this->sxe->route[0]->action     = $action;
-    }
-    
-    /** */
+    /**
+     * Convert this document from SXE to DOM
+     * @return DomDocument
+     */
     public function toDom() {
         $dom_sxe = dom_import_simplexml($this->sxe);
         $dom = new DomDocument();
@@ -213,4 +183,3 @@
     }
     
 }
-



From aurelian at berlios.de  Sat Oct 15 20:10:14 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:10:14 +0200
Subject: [Medick-svn] r208 - trunk/config
Message-ID: <200510151810.j9FIAEGY004803@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:10:13 +0200 (Sat, 15 Oct 2005)
New Revision: 208

Modified:
   trunk/config/application.bootstrap.php
Log:
 - [ config/application.bootstrap.php ] removed not so useful (yet) php 6 check.

Modified: trunk/config/application.bootstrap.php
===================================================================
--- trunk/config/application.bootstrap.php	2005-10-15 12:38:09 UTC (rev 207)
+++ trunk/config/application.bootstrap.php	2005-10-15 18:10:13 UTC (rev 208)
@@ -56,12 +56,6 @@
                   TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR
                 );
 
-// XXX, strict standards for php >= 5.1
-if (phpversion()=='6.0.0-dev') {
-     // strict sdandards.
-     date_default_timezone_set("Europe/Bucharest");
-}
-
 // load core classes.
 include_once('medick/Object.php');
 include_once('medick/Exception.php');
@@ -77,9 +71,12 @@
 $map= Registry::put(new Map(), '__map');
 
 include_once('logger/Logger.php');
-Registry::put(new Logger(), '__logger');
+$logger= new Logger();
+$logger->debug('Incoming request for medick-' . trim(@file_get_contents(TOP_LOCATION . 'VERSION')));
+Registry::put($logger, '__logger');
 
 // load application map.
 include_once(TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . APP_NAME . '.routes.php');
 
+$logger->debug('Routes Loaded. Application Ready.');
 ?>



From aurelian at berlios.de  Sat Oct 15 20:26:04 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:26:04 +0200
Subject: [Medick-svn] r209 - trunk/config
Message-ID: <200510151826.j9FIQ4gi005847@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:26:04 +0200 (Sat, 15 Oct 2005)
New Revision: 209

Modified:
   trunk/config/application.bootstrap.php
Log:
 - [ config/application.bootstrap.php] XMLConfigurator requires an xml string/file in the constructor

Modified: trunk/config/application.bootstrap.php
===================================================================
--- trunk/config/application.bootstrap.php	2005-10-15 18:10:13 UTC (rev 208)
+++ trunk/config/application.bootstrap.php	2005-10-15 18:26:04 UTC (rev 209)
@@ -34,7 +34,7 @@
 
 /**
  * Sample __APPLICATION__NAME__.bootsrap.php file
- * Will bootstrap the application by setting it`s propreties.
+ * Will bootstrap the application by setting it`s properties.
  * Required files for start-up are included here
  * @package locknet7.start
  */
@@ -64,7 +64,7 @@
 
 // hook a Configurator into Registry.
 include_once('configurator/XMLConfigurator.php');
-Registry::put(new XMLConfigurator(), '__configurator');
+Registry::put(new XMLConfigurator(TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . APP_NAME . '.xml'), '__configurator');
 
 // get some orientation.
 include_once('action/controller/Map.php');



From aurelian at berlios.de  Sat Oct 15 20:28:14 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:28:14 +0200
Subject: [Medick-svn] r210 - trunk/libs/configurator
Message-ID: <200510151828.j9FISEj4006062@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:28:14 +0200 (Sat, 15 Oct 2005)
New Revision: 210

Modified:
   trunk/libs/configurator/XMLConfigurator.php
Log:
 - [ configurator/XMLConfigurator.php ] Constructor requires an xml string/file parameter, this way we can ease our work when unittest. Fixed comments. Reorganize the class layout

Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2005-10-15 18:26:04 UTC (rev 209)
+++ trunk/libs/configurator/XMLConfigurator.php	2005-10-15 18:28:14 UTC (rev 210)
@@ -47,10 +47,9 @@
 
     /**
      * Constructor.
-     * @param string, xml, configuration file/string
+     * @param string/file xml
      */
-    public function __construct() {
-        $xml= TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . APP_NAME . '.xml';
+    public function __construct($xml) {
         if (is_file($xml)) $this->sxe = simplexml_load_file($xml, 'SimpleXMLIterator');
         else $this->sxe = simplexml_load_string($xml, 'SimpleXMLIterator');
         if ($this->sxe===false) throw new ConfiguratorException('Cannot read ' . $xml . '\n<br /> Bad Format!');
@@ -74,7 +73,7 @@
      *               password ="x-creeme" />
      *      </database>
      * </code>
-     * @see Configurator::getDatabaseDsn() 
+     * @see IConfigurator::getDatabaseDsn() 
      */
     public function getDatabaseDsn($id = FALSE) {
         if (!$id) $id = $this->sxe->database['default'];
@@ -103,27 +102,19 @@
      *          </outputters>
      *      </logger>
      * </code>
-     * @see Configurator::getLoggerOutputters
+     * @see IConfigurator::getLoggerOutputters
      * @return SimpleXMLIterator
      */
     public function getLoggerOutputters() {
         return $this->sxe->logger->outputters;
     }
     
-    /** @see Configurator::getLoggerFormatter */
+    /** @see IConfigurator::getLoggerFormatter */
     public function getLoggerFormatter() {
         return ucfirst((string)trim($this->sxe->logger->formatter) . 'Formatter');
     }
     
-    /**
-     * Dinamically sets the logger formatter
-     * @param string, formatter, the formatter to use for logger
-     */
-    public function setLoggerFormatter($formatter) {
-        $this->sxe->logger->formatter = $formatter;
-    }
-    
-    /** @see Configurator::getProperty */
+    /** @see IConfigurator::getProperty */
     public function getProperty($name) {
         foreach($this->sxe->property as  $properties ) {
             if($properties['name'] != $name)
@@ -149,6 +140,8 @@
      * <code>
      *      $config->setProperty('application_path', 'C:\\Fast\\www\\medick\\app');
      * </code>
+     *
+     * Note: This method is used only in unittests.
      * @param string, name, the name of the property.
      * @param string, value, the value of the property.
      * @throws ConfiguratorException if the property that we want to set don't exists in the xml file/string
@@ -164,8 +157,18 @@
         // save the new xml tree 
         $this->sxe = simplexml_import_dom($dom, 'SimpleXMLIterator');
     }
-    
+
     /**
+     * Dinamically sets the logger formatter
+     *
+     * Note: this method is used only in unittests.
+     * @param string, formatter, the formatter to use for logger
+     */
+    public function setLoggerFormatter($formatter) {
+        $this->sxe->logger->formatter = $formatter;
+    }
+
+    /**
      * Convert this document from SXE to DOM
      * @return DomDocument
      */



From aurelian at berlios.de  Sat Oct 15 20:29:09 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:29:09 +0200
Subject: [Medick-svn] r211 - trunk/libs/action/controller
Message-ID: <200510151829.j9FIT9xI006188@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:29:09 +0200 (Sat, 15 Oct 2005)
New Revision: 211

Modified:
   trunk/libs/action/controller/Routing.php
Log:
 [ ACRouting ] more verbose.

Modified: trunk/libs/action/controller/Routing.php
===================================================================
--- trunk/libs/action/controller/Routing.php	2005-10-15 18:28:14 UTC (rev 210)
+++ trunk/libs/action/controller/Routing.php	2005-10-15 18:29:09 UTC (rev 211)
@@ -43,17 +43,20 @@
      * Check if the application Map contains the current Route.
      */
     public static function recognize(Request $request) {
-        $map= Registry::get('__map');
+        $map   = Registry::get('__map');
+        $logger= Registry::get('__logger');
         // do we know this Route?
         if ($route= $map->contains(new Route($request->getParam('controller'), $request->getParam('action')))) {
+            $logger->debug('Route Recognized:' . $route->getName());
             $is_failure= FALSE;
             $params= $route->getParams();
             // {{{ loop throught the Route Parameters
             foreach ($params AS $param) {
-                
+                $logger->debug('Validating Route Parameter:' . $param->getName());
                 // {{{ if this Request has the current parameter, try to validate him.
                 if (!$request->hasParam($param->getName()) OR ($request->getParam($param->getName()) =='')) {
                     // XXX. load failure due to missing parameters.
+                    $logger->debug('Validation failed.');
                     $is_failure= TRUE;
                     
                     // XXX. failure message.
@@ -77,12 +80,17 @@
                 $route->addFromArray($params);
             }
         } else {
+            $logger->debug('Unknown Route! Loading default...');
             $route= $map->getRouteByName('default');
         }
 
         // overwrite incoming core parameters.
         $request->setParam('controller', $route->getController());
         $request->setParam('action', $route->getAction());
+        $logger->debug(
+            'Running on Route: ' . $route->getName() .
+            ' with controller: ' . $route->getController() .
+            ' and action: ' . $route->getAction());
         $map->setCurrentRoute($route);
         return self::createController($route);
     }
@@ -113,7 +121,7 @@
         {
             return $controller_class->newInstance();
         }
-        throw new RouteException ('Cannot create Controller...');
+        throw new RouteException ('Cannot create a Controller instance...');
     }
 }
 



From aurelian at berlios.de  Sat Oct 15 20:31:28 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:31:28 +0200
Subject: [Medick-svn] r212 - trunk/libs/action/view
Message-ID: <200510151831.j9FIVSqe006465@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:31:28 +0200 (Sat, 15 Oct 2005)
New Revision: 212

Modified:
   trunk/libs/action/view/HTML.php
Log:
 - [ AVHTML ] Added a new parameter on URL::create witch solves a problem when sending the resulting (X)HTML string to javascript. In URL::create: some code-clean-up

Modified: trunk/libs/action/view/HTML.php
===================================================================
--- trunk/libs/action/view/HTML.php	2005-10-15 18:29:09 UTC (rev 211)
+++ trunk/libs/action/view/HTML.php	2005-10-15 18:31:28 UTC (rev 212)
@@ -33,7 +33,7 @@
 // }}}
 
 /**
- * This package will be deprecated soon and replaced by a modern view.
+ * This package will be deprecated at one point and replaced with a modern view.
  * @package locknet7.action.view.HTML
  */
 
@@ -42,23 +42,19 @@
 }
 
 class URL extends Object {
-    public static function create($controller, $action, $params=array()) {
-        if (!Registry::get('__configurator')->getProperty('rewrite')) {
-            // rewrite-off:
-            $buff = Registry::get('__configurator')->getProperty('document_root') . '/index.php?controller=' . $controller . '&amp;action=' . $action;
-            if (!empty($params)) {
-                foreach ($params AS $key=>$value) {
-                    $buff .= '&amp;' . $key . '=' . $value;
-                }
+    public static function create($controller, $action, $params=array(), $separator='&amp;') {
+        $config = Registry::get('__configurator');
+        $base   = $config->getProperty('document_root');
+        if (!$config->getProperty('rewrite')) {
+            $buff = $base . '/index.php?controller=' . $controller . $separator . 'action=' . $action;
+            foreach ($params AS $key=>$value) {
+                $buff .= $separator . $key . '=' . $value;
             }
             return $buff;
         } else {
-            // rewrite-on:
-            $buff= Registry::get('__configurator')->getProperty('document_root') . '/' . $controller . '/' . $action;
-            if (!empty($params)) {
-                foreach ($params AS $key=>$value) {
-                    $buff .= '/' . $value;
-                }
+            $buff = $base . '/' . $controller . '/' . $action;
+            foreach ($params AS $key=>$value) {
+                $buff .= '/' . $value;
             }
             return $buff . '.html';
         }
@@ -92,8 +88,7 @@
         }
         $buff .= '>';
         if (!is_null($value)) $buff .= $value;
-        $buff .= '</textarea>';
-        return $buff;
+        return $buff . '</textarea>';
     }
     
     public static function checkbox($name, $checked = false, $attr = '') {



From aurelian at berlios.de  Sat Oct 15 20:51:49 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:51:49 +0200
Subject: [Medick-svn] r213 - trunk/libs/action/controller
Message-ID: <200510151851.j9FIpnhs007461@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:51:48 +0200 (Sat, 15 Oct 2005)
New Revision: 213

Modified:
   trunk/libs/action/controller/Base.php
Log:
 - [ ACBase ] renamed magick  with 

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2005-10-15 18:31:28 UTC (rev 212)
+++ trunk/libs/action/controller/Base.php	2005-10-15 18:51:48 UTC (rev 213)
@@ -164,7 +164,7 @@
         
         if (is_file($_layout=$this->app_path . 'views' . DIRECTORY_SEPARATOR .  '__layout.phtml')) {
             $this->logger->debug('Found magick __layout description file...');
-            $this->template->__content= 
+            $this->template->__page= 
                 $this->params['controller'] . DIRECTORY_SEPARATOR . $this->params['action'] . '.phtml';
             $this->render_text($this->template->render_file($_layout), $status);
         } else {
@@ -192,6 +192,7 @@
         $this->response->setStatus($status);
         $this->response->setContent($text);
         $this->action_performed = TRUE;
+        $this->logger->debug('Action performed.');
     }
     
     // }}}



From aurelian at berlios.de  Sat Oct 15 20:55:32 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:55:32 +0200
Subject: [Medick-svn] r214 - trunk/test/dummy/models
Message-ID: <200510151855.j9FItWWr007619@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:55:31 +0200 (Sat, 15 Oct 2005)
New Revision: 214

Added:
   trunk/test/dummy/models/author.php
Log:
 - renamed dummy/model/todo to author.

Copied: trunk/test/dummy/models/author.php (from rev 199, trunk/test/dummy/models/todo.php)
===================================================================
--- trunk/test/dummy/models/todo.php	2005-10-14 18:04:52 UTC (rev 199)
+++ trunk/test/dummy/models/author.php	2005-10-15 18:55:31 UTC (rev 214)
@@ -0,0 +1,8 @@
+<?php
+
+// $Id$    
+
+include_once('active/record/Base.php');
+
+class Author extends ActiveRecordBase {   }
+



From aurelian at berlios.de  Sat Oct 15 20:56:00 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 20:56:00 +0200
Subject: [Medick-svn] r215 - trunk/test/dummy/models
Message-ID: <200510151856.j9FIu02b007677@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 20:56:00 +0200 (Sat, 15 Oct 2005)
New Revision: 215

Removed:
   trunk/test/dummy/models/todo.php
Log:
 - removed dummy/model/todo.

Deleted: trunk/test/dummy/models/todo.php
===================================================================
--- trunk/test/dummy/models/todo.php	2005-10-15 18:55:31 UTC (rev 214)
+++ trunk/test/dummy/models/todo.php	2005-10-15 18:56:00 UTC (rev 215)
@@ -1,8 +0,0 @@
-<?php
-
-// $Id$    
-
-include_once('active/record/Base.php');
-
-class Todo extends ActiveRecordBase {   }
-



From aurelian at berlios.de  Sat Oct 15 21:00:22 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 21:00:22 +0200
Subject: [Medick-svn] r216 - trunk/test
Message-ID: <200510151900.j9FJ0Mke008113@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 21:00:22 +0200 (Sat, 15 Oct 2005)
New Revision: 216

Modified:
   trunk/test/ARBaseBasicsTest.php
   trunk/test/testrunner.php
Log:
 take care of the renaming of Todo to Author.

Modified: trunk/test/ARBaseBasicsTest.php
===================================================================
--- trunk/test/ARBaseBasicsTest.php	2005-10-15 18:56:00 UTC (rev 215)
+++ trunk/test/ARBaseBasicsTest.php	2005-10-15 19:00:22 UTC (rev 216)
@@ -2,23 +2,23 @@
 
 // $Id$
     
-include_once('dummy/models/todo.php');
+include_once('dummy/models/author.php');
 
 /** Tests insert, update, save (insert/update), delete. */
 class ARBaseBasicsTest extends UnitTestCase {
 
     /** <tt>save && delete test</tt> */
     public function testSave() {
-        $item= new Todo();
-        $item->description= 'A new Todo';
+        $item= new Author();
+        $item->name= 'Andrei Cristescu';
         $this->assertEqual($item->save(), $item->id);
         $this->assertEqual($item->delete(), 1);
     }
 
     /** <tt>save && delete test</tt> */
     public function testDelete() {
-        $item = new Todo();
-        $item->description = 'Brr';
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
         $item->save();
         $this->assertEqual($item->delete(), 1);
         $this->assertEqual($item->delete(), 0);
@@ -26,17 +26,17 @@
     
     /** <tt>insert</tt> */
     public function testInsert() {
-        $item = new Todo();
-        $item->description = 'Inserting...';
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
         $this->assertEqual($item->insert(), $item->id);
         $item->delete();
     }
     /** <tt>update test</tt> */
     public function testUpdate() {
-        $item = new Todo();
-        $item->description = 'Foo...';
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
         $this->assertEqual($item->insert(), $item->id);
-        $item->description = 'Bar...';
+        $item->email = 'cristescu at yahoo.com';
         $this->assertEqual($item->update(), 1);
         $this->assertEqual($item->delete(), 1);
     }

Modified: trunk/test/testrunner.php
===================================================================
--- trunk/test/testrunner.php	2005-10-15 18:56:00 UTC (rev 215)
+++ trunk/test/testrunner.php	2005-10-15 19:00:22 UTC (rev 216)
@@ -30,10 +30,10 @@
 if (is_file('test.db')) unlink('test.db');
 
 $query=<<<__
-    CREATE TABLE todos (
+    CREATE TABLE authors (
         id INTEGER PRIMARY KEY,
-        description VARCHAR(100),
-        done INTEGER(1)
+        name VARCHAR(100),
+        email VARCHAR(150)
     );
 __;
 sqlite_query(sqlite_open('test.db'), $query);



From aurelian at berlios.de  Sat Oct 15 22:16:09 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 22:16:09 +0200
Subject: [Medick-svn] r217 - in trunk/test: . dummy
Message-ID: <200510152016.j9FKG9PT012967@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 22:16:08 +0200 (Sat, 15 Oct 2005)
New Revision: 217

Added:
   trunk/test/XMLConfiguratorTest.php
   trunk/test/dummy/dummy.xml
Log:
 - initial import of XMLConfigurator UnitTests.

Added: trunk/test/XMLConfiguratorTest.php
===================================================================
--- trunk/test/XMLConfiguratorTest.php	2005-10-15 19:00:22 UTC (rev 216)
+++ trunk/test/XMLConfiguratorTest.php	2005-10-15 20:16:08 UTC (rev 217)
@@ -0,0 +1,99 @@
+<?php
+
+// $Id$
+
+include_once('configurator/XMLConfigurator.php');
+
+class XMLConfiguratorTest extends UnitTestCase {
+
+    public function testCreation() {
+        $this->assertNotNull(new XMLConfigurator('dummy/dummy.xml'));
+        $this->assertNotNull(new XMLConfigurator('<?xml version="1.0" encoding="UTF-8"?><application></application>'));
+        try {
+            new XMLConfigurator('non_existant_file.xml');
+            $this->fail('ConfiguratorException should be thrown!');
+        } catch (Exception $e) {
+            $this->assertIsA($e, 'ConfiguratorException');
+        }
+    }
+
+    public function testDatabaseDsn() {
+        $xml='<?xml version="1.0" encoding="UTF-8"?><application>
+                <database default="two">
+                    <dsn id="one"
+                        phptype  = "mysql"
+                        hostspec = "localhost"
+                        database = "todo"
+                        username = "root"
+                        password = "zzz" />
+                    <dsn id = "two"
+                        phptype  = "pgsql"
+                        hostspec = "192.18.1.1"
+                        database ="test"
+                        username ="antonescu"
+                        password ="x-creeme" />
+                </database>
+            </application>';
+        $config= new XMLConfigurator($xml);
+        try {
+            $config->getDatabaseDsn('foo');
+            $this->fail('ConfiguratorException should be thrown!');
+        } catch (MedickException $cEx) {
+            $this->assertIsA($cEx, 'ConfiguratorException');
+        }
+        $dsn= $config->getDatabaseDsn();
+        $this->assertEqual('pgsql', $dsn['phptype']);
+        $dsn= $config->getDatabaseDsn('one');
+        $this->assertEqual('mysql', $dsn['phptype']);
+    }
+
+    public function testLoggerOutputters() {
+        $xml='<?xml version="1.0" encoding="UTF-8"?><application>
+                <logger>
+                    <outputters>
+                        <outputter name="file"    level="0" value="/wwwroot/htdocs/locknet7/log/locknet7.log" />
+                        <outputter name="stdout"  level="0" />
+                    </outputters>
+                </logger>
+            </application>';
+        $config= new XMLConfigurator($xml);
+        $this->assertIsA($config->getLoggerOutputters(), 'SimpleXMLIterator');
+        $xml='<?xml version="1.0" encoding="UTF-8"?><application><outputter name="stdout"  level="0" /></application>';
+        $config= new XMLConfigurator($xml);
+        $this->assertNull($config->getLoggerOutputters());
+    }
+
+    public function testLoggerFormatter() {
+        $xml='<?xml version="1.0" encoding="UTF-8"?><application><logger><formatter>simple</formatter></logger></application>';
+        $config= new XMLConfigurator($xml);
+        $this->assertEqual('SimpleFormatter', $config->getLoggerFormatter());
+    }
+
+    public function testProperty() {
+       $xml='<?xml version="1.0" encoding="UTF-8"?><application>
+                <property name="one"    value="/wwwroot" />
+                <property name="two"    value="on" />
+                <property name="three"  value="1" />
+                <property name="four"   value="TRUE" />
+                <property name="five"   value="off" />
+                <property name="six"    value="0" />
+                <property name="seven"  value="false" />
+            </application>';
+        $config= new XMLConfigurator($xml);
+        $this->assertEqual('/wwwroot', $config->getProperty('one'));
+        $this->assertTrue($config->getProperty('two'));
+        $this->assertTrue($config->getProperty('three'));
+        $this->assertTrue($config->getProperty('four'));
+        $this->assertFalse($config->getProperty('five'));
+        $this->assertFalse($config->getProperty('six'));
+        $this->assertFalse($config->getProperty('seven'));
+        try {
+            $config->getProperty('foo');
+            $this->fail('ConfiguratorException should be thrown!');
+        } catch (Exception $cEx) {
+            $this->assertIsA($cEx, 'ConfiguratorException');
+        }
+    }
+
+}
+


Property changes on: trunk/test/XMLConfiguratorTest.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/dummy/dummy.xml
===================================================================
--- trunk/test/dummy/dummy.xml	2005-10-15 19:00:22 UTC (rev 216)
+++ trunk/test/dummy/dummy.xml	2005-10-15 20:16:08 UTC (rev 217)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- $Id$  -->
+<application></application>
+


Property changes on: trunk/test/dummy/dummy.xml
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sat Oct 15 22:22:08 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 15 Oct 2005 22:22:08 +0200
Subject: [Medick-svn] r218 - trunk/libs/configurator
Message-ID: <200510152022.j9FKM8Ac013264@sheep.berlios.de>

Author: aurelian
Date: 2005-10-15 22:22:08 +0200 (Sat, 15 Oct 2005)
New Revision: 218

Modified:
   trunk/libs/configurator/XMLConfigurator.php
Log:
 - [ configurator/XMLConfigurator ] suppress php errors if the string is not a valid xml document, the ConfiguratorException will be thrown on the next line.
 - [ configurator/XMLConfigurator ] in getProperty method, convert the query result to lower case.


Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2005-10-15 20:16:08 UTC (rev 217)
+++ trunk/libs/configurator/XMLConfigurator.php	2005-10-15 20:22:08 UTC (rev 218)
@@ -51,8 +51,8 @@
      */
     public function __construct($xml) {
         if (is_file($xml)) $this->sxe = simplexml_load_file($xml, 'SimpleXMLIterator');
-        else $this->sxe = simplexml_load_string($xml, 'SimpleXMLIterator');
-        if ($this->sxe===false) throw new ConfiguratorException('Cannot read ' . $xml . '\n<br /> Bad Format!');
+        else $this->sxe = @simplexml_load_string($xml, 'SimpleXMLIterator');
+        if ($this->sxe===false) throw new ConfiguratorException("Cannot read\n<br />" . $xml . "\n<br />Bad Format!");
     }
     
     /** 
@@ -120,9 +120,9 @@
             if($properties['name'] != $name)
                 continue;
             $_query= (string)trim($properties['value']);
-            if( ($_query=='') OR ($_query=='false') OR ($_query=='off') OR ($_query == '0') )
+            if( ($_query=='') OR (strtolower($_query) == 'false') OR (strtolower($_query)=='off') OR ($_query == '0') )
                 return (bool)false;
-            elseif( ($_query=='true') OR ($_query=='on') OR ($_query == '1') ) 
+            elseif( (strtolower($_query)=='true') OR (strtolower($_query)=='on') OR ($_query == '1') )
                 return (bool)true;
             else 
                 return (string)$_query;



From aurelian at berlios.de  Sun Oct 16 18:44:28 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 16 Oct 2005 18:44:28 +0200
Subject: [Medick-svn] r219 - trunk/test
Message-ID: <200510161644.j9GGiSSL008563@sheep.berlios.de>

Author: aurelian
Date: 2005-10-16 18:44:22 +0200 (Sun, 16 Oct 2005)
New Revision: 219

Modified:
   trunk/test/testrunner.php
Log:
 - [ testrunnrer ] changed my php binary path 

Modified: trunk/test/testrunner.php
===================================================================
--- trunk/test/testrunner.php	2005-10-15 20:22:08 UTC (rev 218)
+++ trunk/test/testrunner.php	2005-10-16 16:44:22 UTC (rev 219)
@@ -1,4 +1,4 @@
-#!/usr/local/bin/php -q
+#!/wwwroot/bin/php -q
 <?php
 
 // $Id$
@@ -57,4 +57,3 @@
 echo "Done in " . ($time_end - $time_start) . " seconds\n";
 
 unlink('test.db');
-



From aurelian at berlios.de  Sun Oct 16 18:48:59 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 16 Oct 2005 18:48:59 +0200
Subject: [Medick-svn] r220 - trunk/test
Message-ID: <200510161648.j9GGmx9m011238@sheep.berlios.de>

Author: aurelian
Date: 2005-10-16 18:48:58 +0200 (Sun, 16 Oct 2005)
New Revision: 220

Added:
   trunk/test/ARBaseFindTest.php
Log:
 - [ test ] added ARBaseFindTest

Added: trunk/test/ARBaseFindTest.php
===================================================================
--- trunk/test/ARBaseFindTest.php	2005-10-16 16:44:22 UTC (rev 219)
+++ trunk/test/ARBaseFindTest.php	2005-10-16 16:48:58 UTC (rev 220)
@@ -0,0 +1,79 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/author.php');
+
+/** Tests find */
+class ARBaseFindTest extends UnitTestCase {
+
+    /** our authors container */
+    private $authors= array();
+
+    /** set up this test case, we insert 3 fileds in DB table */
+    public function setUp() {
+        $author= new Author();
+        $author->name= "Andrei Cristescu";
+        $author->email= "andrei.cristescu at foo-factory.info";
+        $this->authors[]= $author;
+        $author->insert();
+        $author= new Author();
+        $author->name= "Cristescu";
+        $this->authors[]= $author;
+        $author->insert();
+        $author= new Author();
+        $author->name= "Andrei";
+        $this->authors[]= $author;
+        $author->insert();
+    }
+
+    /** remove all the fields from DB */
+    public function tearDown() {
+        foreach ($this->authors as $author) {
+            $author->delete();
+        }
+    }
+
+    /** find all syntax. */
+    public function testFindAll() {
+        $this->assertEqual(Author::find()->count(), Author::find('all')->count());
+    }
+
+    /** id field is not selected, should be NULL */
+    public function testFindAllArrayInclude() {
+        $authors= Author::find('all', array('include'=>'name, email'));
+        foreach ($authors as $author) {
+            $this->assertNull($author->id);
+        }
+    }
+
+    /** select by condition */
+    public function testFindAllArrayCondition() {
+        $authors= Author::find('all', array('condition'=>'name="Andrei Cristescu"'));
+        $this->assertEqual($authors->count(), 1);
+        foreach ($authors as $author) {
+            $this->assertEqual('andrei.cristescu at foo-factory.info', $author->email);
+        }
+    }
+
+    /** limit syntax. */
+    public function testFindAllArrayLimit() {
+        $authors= Author::find('all', array('limit'=>2));
+        $this->assertEqual($authors->count(), 2);
+    }
+
+    /** order syntax. */
+    public function testFindAllArrayOrder() {
+        $authors= Author::find('all', array('order'=>'id DESC'));
+        $i=4; foreach ($authors as $author) {
+            $this->assertEqual(--$i, $author->id);
+        }
+    }
+
+    /** offset syntax. */
+    public function testFindAllArrayOffset() {
+        $authors= Author::find('all', array('offset'=>2));
+        $this->assertEqual($authors->count(), 1);
+    }
+
+}


Property changes on: trunk/test/ARBaseFindTest.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sun Oct 16 18:56:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 16 Oct 2005 18:56:39 +0200
Subject: [Medick-svn] r221 - trunk/docs/patches
Message-ID: <200510161656.j9GGudDB016502@sheep.berlios.de>

Author: aurelian
Date: 2005-10-16 18:56:38 +0200 (Sun, 16 Oct 2005)
New Revision: 221

Modified:
   trunk/docs/patches/creole.sqlite.patch
Log:
 - [docs/patches/creole.sqlite ] workaround php bug http://bugs.php.net/bug.php?id=34884

Modified: trunk/docs/patches/creole.sqlite.patch
===================================================================
--- trunk/docs/patches/creole.sqlite.patch	2005-10-16 16:48:58 UTC (rev 220)
+++ trunk/docs/patches/creole.sqlite.patch	2005-10-16 16:56:38 UTC (rev 221)
@@ -1,17 +1,18 @@
 ? LICENSE
-? creole.patch
 Index: drivers/sqlite/SQLiteConnection.php
 ===================================================================
 RCS file: /cvs/creole/creole/classes/creole/drivers/sqlite/SQLiteConnection.php,v
 retrieving revision 1.12
 diff -u -r1.12 SQLiteConnection.php
 --- drivers/sqlite/SQLiteConnection.php	1 Sep 2004 14:00:29 -0000	1.12
-+++ drivers/sqlite/SQLiteConnection.php	14 Oct 2005 19:12:08 -0000
-@@ -165,9 +165,10 @@
++++ drivers/sqlite/SQLiteConnection.php	16 Oct 2005 16:55:00 -0000
+@@ -164,10 +164,11 @@
+      */
      public function executeQuery($sql, $fetchmode = null)
      {    
-         ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
+-        ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
 -        $result = @sqlite_query($this->dblink, $sql);
++        // ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
 +        $this->lastQuery = $sql;
 +        $result = @sqlite_query($this->dblink, $this->lastQuery);
          if (!$result) {
@@ -46,7 +47,7 @@
 retrieving revision 1.7
 diff -u -r1.7 SQLiteTableInfo.php
 --- drivers/sqlite/metadata/SQLiteTableInfo.php	29 Nov 2004 13:40:12 -0000	1.7
-+++ drivers/sqlite/metadata/SQLiteTableInfo.php	14 Oct 2005 19:12:10 -0000
++++ drivers/sqlite/metadata/SQLiteTableInfo.php	16 Oct 2005 16:55:02 -0000
 @@ -72,7 +72,7 @@
              
              $this->columns[$name] = new ColumnInfo($this, $name, SQLiteTypes::getType($type), $type, $size, $scale, $is_nullable, $default_val);



From aurelian at berlios.de  Mon Oct 17 22:56:27 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Mon, 17 Oct 2005 22:56:27 +0200
Subject: [Medick-svn] r222 - trunk/config
Message-ID: <200510172056.j9HKuRDL032350@sheep.berlios.de>

Author: aurelian
Date: 2005-10-17 22:56:26 +0200 (Mon, 17 Oct 2005)
New Revision: 222

Modified:
   trunk/config/application.bootstrap.php
Log:
 [ config ] fix php 5.1 strict standards complain

Modified: trunk/config/application.bootstrap.php
===================================================================
--- trunk/config/application.bootstrap.php	2005-10-16 16:56:38 UTC (rev 221)
+++ trunk/config/application.bootstrap.php	2005-10-17 20:56:26 UTC (rev 222)
@@ -42,6 +42,10 @@
 // error reporting level, turn this off in production!
 error_reporting(E_ALL|E_STRICT);
 
+if (version_compare(PHP_VERSION, '5.1.0') <= 0) {
+    date_default_timezone_set('Europe/Bucharest');
+}
+
 $pathinfo = pathinfo(__FILE__);
 $file     = explode('.',$pathinfo['basename']);
 



From aurelian at berlios.de  Mon Oct 17 23:06:53 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Mon, 17 Oct 2005 23:06:53 +0200
Subject: [Medick-svn] r223 - trunk/libs/logger
Message-ID: <200510172106.j9HL6rnh000255@sheep.berlios.de>

Author: aurelian
Date: 2005-10-17 23:06:52 +0200 (Mon, 17 Oct 2005)
New Revision: 223

Modified:
   trunk/libs/logger/Logger.php
Log:
 [ logger ] Logger::load() accepts an array now, this should bring more flexibility. Duplicate loop removed.

Modified: trunk/libs/logger/Logger.php
===================================================================
--- trunk/libs/logger/Logger.php	2005-10-17 20:56:26 UTC (rev 222)
+++ trunk/libs/logger/Logger.php	2005-10-17 21:06:52 UTC (rev 223)
@@ -141,6 +141,7 @@
     
     /**
      * check to see if the list outputters contains the given outputter.
+     * @TODO: we have a base Object now, can we remove the call to getId?
      * @param IObserver $observer a observer
      * @return bool
      */
@@ -155,24 +156,20 @@
     
     /**
      * Loads the Outputters.
-     * TODO: why do we need 2 iterations?
-     * @param Iterator outputters collection
+     * @param array outputters
      */
-    public function load(Iterator $outputters) {
-        for ($outputters->rewind(); $outputters->valid(); $outputters->next()) {
-            foreach($outputters->getChildren() as $outputter) {
-                try {
-                    $class_name= ucfirst((string)trim($outputter['name'])) . 'Outputter';
-                    $class_file= 'logger' . DIRECTORY_SEPARATOR . 'outputter' . DIRECTORY_SEPARATOR . $class_name . '.php';
-                    include_once($class_file);
-                    $class= new ReflectionClass($class_name);
-                    $this->attach( 
-                        $class->newInstance( (string)trim($outputter['level']), (string)trim($outputter['value']) ));
-                } catch (ReflectionException $rEx) {
-                    $this->warn($rEx->getMessage());
-                }
+    public function load(/*Array*/ $outputters) {
+        foreach ($outputters as $outputter) {
+            $class_name= ucfirst($outputter['name']) . 'Outputter';
+            $class_file= 'logger' . DIRECTORY_SEPARATOR . 'outputter' . DIRECTORY_SEPARATOR . $class_name . '.php';
+            @include_once($class_file);
+            try {
+                $class= new ReflectionClass($class_name);
+                $this->attach($class->newInstance($outputter['level'],$outputter['value']));
+            } catch (ReflectionException $rEx) {
+                $this->warn($rEx->getMessage());
             }
-        }    
+        }
     } 
     
     /**
@@ -233,4 +230,3 @@
         return $this->level;
     }
 }
-



From aurelian at berlios.de  Mon Oct 17 23:07:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Mon, 17 Oct 2005 23:07:39 +0200
Subject: [Medick-svn] r224 - trunk/libs/configurator
Message-ID: <200510172107.j9HL7dES000367@sheep.berlios.de>

Author: aurelian
Date: 2005-10-17 23:07:39 +0200 (Mon, 17 Oct 2005)
New Revision: 224

Modified:
   trunk/libs/configurator/IConfigurator.php
Log:
 [ configurator/IConfigurator ] Update API doc

Modified: trunk/libs/configurator/IConfigurator.php
===================================================================
--- trunk/libs/configurator/IConfigurator.php	2005-10-17 21:06:52 UTC (rev 223)
+++ trunk/libs/configurator/IConfigurator.php	2005-10-17 21:07:39 UTC (rev 224)
@@ -42,7 +42,7 @@
     
     /**
      * It gets the logger outputters.
-     * @return Iterator
+     * @return array
      */
     function getLoggerOutputters();
     



From aurelian at berlios.de  Mon Oct 17 23:08:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Mon, 17 Oct 2005 23:08:39 +0200
Subject: [Medick-svn] r225 - trunk/libs/configurator
Message-ID: <200510172108.j9HL8d1n000498@sheep.berlios.de>

Author: aurelian
Date: 2005-10-17 23:08:39 +0200 (Mon, 17 Oct 2005)
New Revision: 225

Modified:
   trunk/libs/configurator/XMLConfigurator.php
Log:
 [ configurator/XMLConfigurator ] XMLConfigurator::getLoggerOutputters returns an array

Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2005-10-17 21:07:39 UTC (rev 224)
+++ trunk/libs/configurator/XMLConfigurator.php	2005-10-17 21:08:39 UTC (rev 225)
@@ -103,10 +103,17 @@
      *      </logger>
      * </code>
      * @see IConfigurator::getLoggerOutputters
-     * @return SimpleXMLIterator
+     * @return array
      */
     public function getLoggerOutputters() {
-        return $this->sxe->logger->outputters;
+        $i=0; $ret= array();
+        $outputters = $this->sxe->logger->outputters;
+        for ($outputters->rewind(); $outputters->valid(); $outputters->next()) {
+            $ret[$i]['name'] = (string)trim($outputters->current()->outputter['name']);
+            $ret[$i]['level'] = (string)trim($outputters->current()->outputter['level']);
+            $ret[$i++]['value'] = (string)trim($outputters->current()->outputter['value']);
+        }
+        return $ret;
     }
     
     /** @see IConfigurator::getLoggerFormatter */



From aurelian at berlios.de  Tue Oct 18 20:48:50 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Tue, 18 Oct 2005 20:48:50 +0200
Subject: [Medick-svn] r226 - in trunk: libs/configurator test
Message-ID: <200510181848.j9IImodt002533@sheep.berlios.de>

Author: aurelian
Date: 2005-10-18 20:48:49 +0200 (Tue, 18 Oct 2005)
New Revision: 226

Modified:
   trunk/libs/configurator/XMLConfigurator.php
   trunk/test/XMLConfiguratorTest.php
Log:
 - [ configurator/XMLConfigurator ] using spl's RecursiveIteratorIterator to iterate over the sxe object. Fixed broken test

Modified: trunk/libs/configurator/XMLConfigurator.php
===================================================================
--- trunk/libs/configurator/XMLConfigurator.php	2005-10-17 21:08:39 UTC (rev 225)
+++ trunk/libs/configurator/XMLConfigurator.php	2005-10-18 18:48:49 UTC (rev 226)
@@ -107,11 +107,11 @@
      */
     public function getLoggerOutputters() {
         $i=0; $ret= array();
-        $outputters = $this->sxe->logger->outputters;
-        for ($outputters->rewind(); $outputters->valid(); $outputters->next()) {
-            $ret[$i]['name'] = (string)trim($outputters->current()->outputter['name']);
-            $ret[$i]['level'] = (string)trim($outputters->current()->outputter['level']);
-            $ret[$i++]['value'] = (string)trim($outputters->current()->outputter['value']);
+        if (is_null($this->sxe->logger->outputters)) return $ret;
+        foreach(new RecursiveIteratorIterator($this->sxe->logger->outputters) as $outputter) {
+            $ret[$i]['name']    = (string)trim($outputter['name']);
+            $ret[$i]['level']   = (string)trim($outputter['level']);
+            $ret[$i++]['value'] = (string)trim($outputter['value']);
         }
         return $ret;
     }

Modified: trunk/test/XMLConfiguratorTest.php
===================================================================
--- trunk/test/XMLConfiguratorTest.php	2005-10-17 21:08:39 UTC (rev 225)
+++ trunk/test/XMLConfiguratorTest.php	2005-10-18 18:48:49 UTC (rev 226)
@@ -57,10 +57,10 @@
                 </logger>
             </application>';
         $config= new XMLConfigurator($xml);
-        $this->assertIsA($config->getLoggerOutputters(), 'SimpleXMLIterator');
+        $this->assertEqual(2, sizeof($config->getLoggerOutputters()));
         $xml='<?xml version="1.0" encoding="UTF-8"?><application><outputter name="stdout"  level="0" /></application>';
         $config= new XMLConfigurator($xml);
-        $this->assertNull($config->getLoggerOutputters());
+        $this->assertEqual(0, sizeof($config->getLoggerOutputters()));
     }
 
     public function testLoggerFormatter() {



From aurelian at berlios.de  Thu Oct 20 20:54:28 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Thu, 20 Oct 2005 20:54:28 +0200
Subject: [Medick-svn] r227 - in trunk: libs/active/record libs/medick test test/dummy test/dummy/controllers test/mock
Message-ID: <200510201854.j9KIsSfw002270@sheep.berlios.de>

Author: aurelian
Date: 2005-10-20 20:54:26 +0200 (Thu, 20 Oct 2005)
New Revision: 227

Added:
   trunk/libs/medick/InvalidOffsetException.php
   trunk/test/dummy/controllers/
   trunk/test/dummy/controllers/application.php
   trunk/test/dummy/controllers/foo_controller.php
Modified:
   trunk/libs/active/record/Base.php
   trunk/libs/medick/Registry.php
   trunk/test/ARBaseBasicsTest.php
   trunk/test/ARBaseFindTest.php
   trunk/test/RegistryTest.php
   trunk/test/mock/MockConfigurator.php
   trunk/test/testrunner.php
Log:
 -> Registry: added two more methods, this way we can test better:
# Registry::close() witch removes all the database contents
# Registry::remove($key) removes the Object identified by the $key
# InvalidOffsetException is thrown if the requested Object is not found

 -> ActiveRecordBase:
# Added close() method, to force closing the database connection.
# Some API docs.

 -> Tests: A test should not depend on another one nor on the order the tests are run
# Closer clean-up for Registry and ActiveRecordBase
# Moved Prequsites from the testrunner to UnitTests constructors

 -> Files added:
# medick/InvalidOffsetException, the Registry Exception
# dummy/controllers/*, some place holders for Routing Test Case (not in SNV yet)


Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/libs/active/record/Base.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -44,26 +44,43 @@
  */
 class ActiveRecordBase extends Object {
 
-    /** DB Table Fields */
+    /** @var FieldsAggregate
+        DB Table Fields */
     protected $fields;
 
-    /** pk. name! */
+    /** @var string
+        primary key name! */
     private $pk;
 
     // {{{ static members
-    /** database connection*/
+    
+    /** @var Connection
+        database connection*/
     protected static $conn;
-    /** table name */
+    
+    /** @var string 
+        current table name */
     protected static $table_name;
+    
     // }}}
 
+    /**
+     * Establish A Database Connection
+     */
     public static function establish_connection () {
         if (self::$conn === NULL) {
             self::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn());
         }
     }
-
+    
     /**
+     * Force a closing of the database connection
+     */
+    public static function close() {
+        self::$conn = Creole::getConnection(Registry::get('__configurator')->getDatabaseDsn())->close();
+    }
+    
+    /**
      * Constructor
      *
      * Is final, because there is no reason to overwrite in parent classes.

Added: trunk/libs/medick/InvalidOffsetException.php
===================================================================
--- trunk/libs/medick/InvalidOffsetException.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/libs/medick/InvalidOffsetException.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -0,0 +1,38 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.medick
+ */
+class InvalidOffsetException extends MedickException { }


Property changes on: trunk/libs/medick/InvalidOffsetException.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/medick/Registry.php
===================================================================
--- trunk/libs/medick/Registry.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/libs/medick/Registry.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -32,6 +32,8 @@
 // ///////////////////////////////////////////////////////////////////////////////
 // }}}
 
+include_once('medick/InvalidOffsetException.php');
+
 /**
  * @package locknet7.medick
  */
@@ -62,12 +64,35 @@
      * It gets an Object from the registry database
      * @param string key, the object identifier
      * @return Object
+     * @throws NullPointerException
      */
     public static function get($key) {
-        return self::$registry[$key];
+        if (isset(self::$registry[$key])) {
+            return self::$registry[$key];
+        }
+        throw new InvalidOffsetException('Cannot access the object identified by key: `' . $key . '` from Registry Database!');
     }
     
     /**
+     * Removes an Object from the Registry Database
+     * @param string key, object identifier
+     * @return Object, the object removed.
+     * @throws NullPointerException
+     */
+    public static function remove($key) {
+        $obj= self::get($key);
+        unset(self::$registry[$key]);
+        return $obj;
+    }
+    
+    /**
+     * Closes and clean-up the registry database
+     */
+    public static function close() {
+        return self::$registry= array();
+    }
+    
+    /**
      * It gets the Registry instance
      * @return Registry
      */
@@ -79,4 +104,3 @@
     }
     // }}}
 }
-

Modified: trunk/test/ARBaseBasicsTest.php
===================================================================
--- trunk/test/ARBaseBasicsTest.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/ARBaseBasicsTest.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -3,10 +3,40 @@
 // $Id$
     
 include_once('dummy/models/author.php');
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
 
 /** Tests insert, update, save (insert/update), delete. */
 class ARBaseBasicsTest extends UnitTestCase {
 
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB
+     */
+    public function __construct() {
+        if (is_file('test.db')) unlink('test.db');
+        $query='
+            CREATE TABLE authors (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            );
+        ';
+        sqlite_query(sqlite_open('test.db'), $query);
+    }
+
+    /** set up */
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
+    }
+    
+    /** tearDown */
+    public function tearDown() {
+        Registry::close();
+    }
+
     /** <tt>save && delete test</tt> */
     public function testSave() {
         $item= new Author();
@@ -41,4 +71,3 @@
         $this->assertEqual($item->delete(), 1);
     }
 }
-

Modified: trunk/test/ARBaseFindTest.php
===================================================================
--- trunk/test/ARBaseFindTest.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/ARBaseFindTest.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -3,15 +3,36 @@
 // $Id$
     
 include_once('dummy/models/author.php');
-
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
+  
 /** Tests find */
 class ARBaseFindTest extends UnitTestCase {
-
+  
     /** our authors container */
     private $authors= array();
-
-    /** set up this test case, we insert 3 fileds in DB table */
-    public function setUp() {
+     
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB
+     */
+    public function __construct() {
+        if (is_file('test.db')) unlink('test.db');
+        $query='
+            CREATE TABLE authors (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            );
+        ';
+        sqlite_query(sqlite_open('test.db'), $query);
+     }
+  
+     /** set up this test case, we insert 3 fileds in DB table */
+     public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
         $author= new Author();
         $author->name= "Andrei Cristescu";
         $author->email= "andrei.cristescu at foo-factory.info";
@@ -27,11 +48,12 @@
         $author->insert();
     }
 
-    /** remove all the fields from DB */
+    /** remove all the fields from DB, clean-up the Registry */
     public function tearDown() {
         foreach ($this->authors as $author) {
             $author->delete();
         }
+        Registry::close();
     }
 
     /** find all syntax. */
@@ -75,5 +97,4 @@
         $authors= Author::find('all', array('offset'=>2));
         $this->assertEqual($authors->count(), 1);
     }
-
 }

Modified: trunk/test/RegistryTest.php
===================================================================
--- trunk/test/RegistryTest.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/RegistryTest.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -4,6 +4,8 @@
     
 include_once('mock/MockObject.php');
 
+
+
 class RegistryTest extends UnitTestCase {
 
     private $registry = NULL;
@@ -22,5 +24,15 @@
     function testRegistry() {
         $this->assertEqual($this->obj->getClassName(), Registry::get('mock')->getClassName());
     }
+    
+    function testDispose() {
+        Registry::remove('mock');
+        try {
+            Registry::get('mock');
+            $this->fail('InvalidOffsetException should be thrown!');
+        } catch (Exception $nEx) {
+            $this->assertIsA($nEx, 'InvalidOffsetException');
+        }
+    }
 
 }

Added: trunk/test/dummy/controllers/application.php
===================================================================
--- trunk/test/dummy/controllers/application.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/dummy/controllers/application.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -0,0 +1,4 @@
+<?php
+    // $Id$
+    class ApplicationController extends ActionControllerBase{   }
+    


Property changes on: trunk/test/dummy/controllers/application.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/dummy/controllers/foo_controller.php
===================================================================
--- trunk/test/dummy/controllers/foo_controller.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/dummy/controllers/foo_controller.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -0,0 +1,4 @@
+<?php
+    // $Id$
+    class FooController extends ApplicationController {     }
+


Property changes on: trunk/test/dummy/controllers/foo_controller.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/test/mock/MockConfigurator.php
===================================================================
--- trunk/test/mock/MockConfigurator.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/mock/MockConfigurator.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -2,22 +2,30 @@
 
 // $Id$
     
-class MockConfigurator extends Object {
-
+include_once('configurator/IConfigurator.php');
+ 
+class MockConfigurator extends Object implements IConfigurator {
+ 
     public function getLoggerOutputters() {
-        return array();    
+        return array();
     }
-
+  
     public function getLoggerFormatter() {
         return FALSE;
     }
-
-    public function getDatabaseDsn() {
-        return array(
-             'phptype'  => 'sqlite',
-             'database' => 'test.db');
+  
+    public function getProperty($name) {
+        switch ($name) {
+            case 'application_path':
+                return 'dummy' . DIRECTORY_SEPARATOR;
+            default:
+                throw new ConfiguratorException(__CLASS__ . ' Property `' . $name . '` not implemented!');
+         }
+     }
+ 
+     public function getDatabaseDsn($id=FALSE) {
+         return array(
+               'phptype'  => 'sqlite',
+               'database' => 'test.db');
     }
-
 }
-
-?>

Modified: trunk/test/testrunner.php
===================================================================
--- trunk/test/testrunner.php	2005-10-18 18:48:49 UTC (rev 226)
+++ trunk/test/testrunner.php	2005-10-20 18:54:26 UTC (rev 227)
@@ -27,22 +27,6 @@
 include_once('simpletest/unit_tester.php');
 include_once('simpletest/reporter.php');
 
-if (is_file('test.db')) unlink('test.db');
-
-$query=<<<__
-    CREATE TABLE authors (
-        id INTEGER PRIMARY KEY,
-        name VARCHAR(100),
-        email VARCHAR(150)
-    );
-__;
-sqlite_query(sqlite_open('test.db'), $query);
-
-include_once('mock/MockConfigurator.php');
-Registry::put(new MockConfigurator(), '__configurator');
-include_once('logger/Logger.php');
-Registry::put(new Logger(), '__logger');
-
 $test= new GroupTest('====== Medick Framework Unit Tests =====');
 
 $it = new DirectoryIterator(dirname(__FILE__));



From aurelian at berlios.de  Fri Oct 21 20:35:27 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Fri, 21 Oct 2005 20:35:27 +0200
Subject: [Medick-svn] r228 - in trunk/test: . dummy/models mock
Message-ID: <200510211835.j9LIZRL4019995@sheep.berlios.de>

Author: aurelian
Date: 2005-10-21 20:35:26 +0200 (Fri, 21 Oct 2005)
New Revision: 228

Added:
   trunk/test/ARBaseAssocHas_OneTest.php
   trunk/test/RoutingTest.php
   trunk/test/dummy/models/book.php
   trunk/test/mock/MockRequest.php
Log:
 [ tests ] initial import of ARBaseAssocHas_OneTest, RoutingTest and additional mock/dummy files.

Added: trunk/test/ARBaseAssocHas_OneTest.php
===================================================================
--- trunk/test/ARBaseAssocHas_OneTest.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/ARBaseAssocHas_OneTest.php	2005-10-21 18:35:26 UTC (rev 228)
@@ -0,0 +1,71 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/author.php');
+include_once('dummy/models/book.php');
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
+
+/** Test Has_One Association */
+class ARBaseAssocHas_OneTest extends UnitTestCase {
+
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB with 2 tables and a foreign key.
+     */
+    public function __construct() {
+        if (is_file('test.db')) unlink('test.db');
+        $tbd= sqlite_open('test.db');
+        $query='
+            CREATE TABLE AUTHORS (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            )';
+        $ex= sqlite_query($tbd, $query);
+        $_query='    
+            CREATE TABLE BOOKS (
+                id INTEGER PRIMARY KEY,
+                title VARCHAR(100),
+                author_id INTEGER NOT NULL CONSTRAINT fk_author_id REFERENCES AUTHORS(id) ON DELETE CASCADE
+            )';
+        $exp= sqlite_query($tbd, $_query);
+    }
+
+    /** set up */
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
+        
+        $author= new Author();
+        $author->name= 'Andrei Cristescu';
+        $author->email= 'andrei at foocompany.com';
+        
+        $id= $author->save();
+        
+        $book = new Book();
+        $book->author_id= $id;
+        $book->title= 'The End is NEAR!';
+        $book->save();
+    }
+    
+    /** tearDown */
+    public function tearDown() {
+        Registry::close();
+    }
+
+    /** */
+    public function testHasOne() {
+        $books= Book::find();
+        foreach($books as $book) {
+            $this->assertIsA($book->author, 'Author');
+            $this->assertIsA($book, 'Book');
+        }
+        $this->assertEqual($book->author->name, 'Andrei Cristescu');
+        // TBD. This is not supported right now!
+        // $book->author->delete();
+        // $this->assertEqual(sizeof(Book::find()), 0);
+    }
+}


Property changes on: trunk/test/ARBaseAssocHas_OneTest.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/RoutingTest.php
===================================================================
--- trunk/test/RoutingTest.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/RoutingTest.php	2005-10-21 18:35:26 UTC (rev 228)
@@ -0,0 +1,38 @@
+<?php
+
+// $Id$
+
+include_once('medick/Registry.php');
+include_once('logger/Logger.php');
+
+include_once('mock/MockConfigurator.php');
+include_once('mock/MockRequest.php');
+
+include_once('action/controller/Route.php');
+include_once('action/controller/Map.php');
+include_once('action/controller/Routing.php');
+include_once('action/controller/Base.php');
+
+class RoutingTest extends UnitTestCase {
+
+    private $map;
+
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        $this->map= Registry::put(new Map(), '__map');
+    }
+    
+    public function tearDown() {
+        Registry::close();
+    }
+    
+    public function testRec() {
+        $route= new Route('foo', 'bar');
+        $request= new MockRequest();
+        $request->setParam('controller', 'foo');
+        $request->setParam('action', 'bar');
+        $this->map->add($route);
+        $this->assertIsA(ActionControllerRouting::recognize($request), 'ActionControllerBase');
+    }
+}


Property changes on: trunk/test/RoutingTest.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/dummy/models/book.php
===================================================================
--- trunk/test/dummy/models/book.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/dummy/models/book.php	2005-10-21 18:35:26 UTC (rev 228)
@@ -0,0 +1,11 @@
+<?php
+
+// $Id$    
+
+include_once('active/record/Base.php');
+
+class Book extends ActiveRecordBase {
+
+    protected $has_one= array('author');
+
+}


Property changes on: trunk/test/dummy/models/book.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/mock/MockRequest.php
===================================================================
--- trunk/test/mock/MockRequest.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/mock/MockRequest.php	2005-10-21 18:35:26 UTC (rev 228)
@@ -0,0 +1,7 @@
+<?php
+
+// $Id$
+
+include_once('action/controller/Request.php');
+
+class MockRequest extends Request {  }


Property changes on: trunk/test/mock/MockRequest.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sat Oct 22 19:10:58 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 22 Oct 2005 19:10:58 +0200
Subject: [Medick-svn] r229 - trunk/docs/patches
Message-ID: <200510221710.j9MHAw9M019133@sheep.berlios.de>

Author: aurelian
Date: 2005-10-22 19:10:57 +0200 (Sat, 22 Oct 2005)
New Revision: 229

Removed:
   trunk/docs/patches/creole.sqlite.patch
   trunk/docs/patches/patch-006.diff
   trunk/docs/patches/patch-007.diff
   trunk/docs/patches/patch-008.diff
Log:
 - removed old patchs + creole patch (changes where added into creole cvs tree)

Deleted: trunk/docs/patches/creole.sqlite.patch
===================================================================
--- trunk/docs/patches/creole.sqlite.patch	2005-10-21 18:35:26 UTC (rev 228)
+++ trunk/docs/patches/creole.sqlite.patch	2005-10-22 17:10:57 UTC (rev 229)
@@ -1,59 +0,0 @@
-? LICENSE
-Index: drivers/sqlite/SQLiteConnection.php
-===================================================================
-RCS file: /cvs/creole/creole/classes/creole/drivers/sqlite/SQLiteConnection.php,v
-retrieving revision 1.12
-diff -u -r1.12 SQLiteConnection.php
---- drivers/sqlite/SQLiteConnection.php	1 Sep 2004 14:00:29 -0000	1.12
-+++ drivers/sqlite/SQLiteConnection.php	16 Oct 2005 16:55:00 -0000
-@@ -164,10 +164,11 @@
-      */
-     public function executeQuery($sql, $fetchmode = null)
-     {    
--        ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
--        $result = @sqlite_query($this->dblink, $sql);
-+        // ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
-+        $this->lastQuery = $sql;
-+        $result = @sqlite_query($this->dblink, $this->lastQuery);
-         if (!$result) {
--            throw new SQLException('Could not execute query', $php_errormsg, $sql); //sqlite_error_string(sqlite_last_error($this->dblink))
-+            throw new SQLException('Could not execute query', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
-         }
-         require_once 'creole/drivers/sqlite/SQLiteResultSet.php';
-         return new SQLiteResultSet($this, $result, $fetchmode);    
-@@ -178,9 +179,10 @@
-      */
-     function executeUpdate($sql)
-     {
--        $result = @sqlite_query($this->dblink, $sql);
-+        $this->lastQuery = $sql;
-+        $result = @sqlite_query($this->dblink, $this->lastQuery);
-         if (!$result) {            
--            throw new SQLException('Could not execute update', $php_errormsg, $sql); //sqlite_error_string(sqlite_last_error($this->dblink))
-+            throw new SQLException('Could not execute update', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
-         }
-         return (int) @sqlite_changes($this->dblink);
-     }
-@@ -235,4 +237,4 @@
-         return (int) @sqlite_changes($this->dblink);
-     }
-     
--}
-\ No newline at end of file
-+}
-Index: drivers/sqlite/metadata/SQLiteTableInfo.php
-===================================================================
-RCS file: /cvs/creole/creole/classes/creole/drivers/sqlite/metadata/SQLiteTableInfo.php,v
-retrieving revision 1.7
-diff -u -r1.7 SQLiteTableInfo.php
---- drivers/sqlite/metadata/SQLiteTableInfo.php	29 Nov 2004 13:40:12 -0000	1.7
-+++ drivers/sqlite/metadata/SQLiteTableInfo.php	16 Oct 2005 16:55:02 -0000
-@@ -72,7 +72,7 @@
-             
-             $this->columns[$name] = new ColumnInfo($this, $name, SQLiteTypes::getType($type), $type, $size, $scale, $is_nullable, $default_val);
-             
--            if (strtolower($type) == 'integer primary key') {
-+            if (($row['pk'] == 1) or (strtolower($type) == 'integer primary key')) {
-                 if ($this->primaryKey === null) {
-                     $this->primaryKey = new PrimaryKeyInfo($name);
-                 }

Deleted: trunk/docs/patches/patch-006.diff
===================================================================
--- trunk/docs/patches/patch-006.diff	2005-10-21 18:35:26 UTC (rev 228)
+++ trunk/docs/patches/patch-006.diff	2005-10-22 17:10:57 UTC (rev 229)
@@ -1,257 +0,0 @@
-Index: public_html/default.htaccess
-===================================================================
---- public_html/default.htaccess	(revision 98)
-+++ public_html/default.htaccess	(working copy)
-@@ -1,3 +1,17 @@
- # default.htaccess file for Medick framework.
- # rename-it to .htaccess
- # $Id$
-+
-+RewriteEngine on
-+
-+RewriteCond    %{REQUEST_FILENAME}  -d
-+RewriteRule    ^(.+[^/])$           $1/  [R]
-+
-+RewriteRule ^([A-Za-z]+)/?([A-Za-z]+)/?\.html$ index.php?controller=$1&action=$2 [NS]
-+RewriteRule ^([A-Za-z]+)/([A-Za-z]+)/([0-9]+)\.html?$ index.php?controller=$1&action=$2&id=$3 [L]
-+
-+# ##
-+#RewriteRule ^todo/edit/(.*)$ /index.php?controller=todo&action=edit&id=$1 [NE,L]
-+#RewriteRule ^todo/(.*)$ /index.php?controller=todo&action=$1 [NE,L]
-+# ##
-+
-Index: config/application.xml
-===================================================================
---- config/application.xml	(revision 98)
-+++ config/application.xml	(working copy)
-@@ -8,9 +8,10 @@
-     <!--  ====================== -->
-     <!--   General properties    -->
-     <!--  ====================== -->
--    <property name="server_name"      value="http://localhost" />
--    <property name="document_root"    value="/locknet7/public_html" />
-+    <property name="server_name"      value="http://morgan:8091" />
-+    <property name="document_root"    value="/" />
-     <property name="application_path" value="/wwwroot/htdocs/locknet7/app" />
-+    <property name="rewrite"          value="on" />
-      
-     <!--  ====================== -->
-     <!--     Logger System       -->
-@@ -39,9 +40,9 @@
-         <dsn id = "one"
-              phptype  = "mysql"
-              hostspec = "localhost"
--             database = "todo2"
-+             database = "todo"
-              username = "root"
--             password = "virus" />
-+             password = "sacosica" />
-         <dsn id = "two"
-              phptype  = "pgsql"
-              hostspec = "192.18.1.1"
-Index: VERSION
-===================================================================
---- VERSION	(revision 0)
-+++ VERSION	(revision 0)
-@@ -0,0 +1 @@
-+0.0.1
-Index: scripts/generator.php
-===================================================================
---- scripts/generator.php	(revision 98)
-+++ scripts/generator.php	(working copy)
-@@ -206,8 +206,8 @@
-             case 'INTEGER':
-             case 'VARCHAR':
-             default:
--                $buff .= ucfirst($name) . 
--                    ': <?= Form::text(\'' . $name . '\', NULL, array(\'size\'=>' . $size . ')); ?><br />';
-+                $buff .= '<label>' . ucfirst($name) . ': </label>' .
-+            '<?= Form::text(\'' . $name . '\', NULL, array(\'maxlength\'=>' . $size . ',\'size\'=>' . $size . ')); ?><br />';
-                 break;
-         }
-     }
-@@ -248,8 +248,8 @@
-             case 'INTEGER':
-             case 'VARCHAR':
-             default:
--                $buff .= ucfirst($name) . 
--                    ': <?= Form::text(\'' . $name . '\', $${model}->' . $name . ', array(\'size\'=>' . $size . ')); ?><br />';
-+                $buff .= '<label>' . ucfirst($name) . ': </label>' . 
-+            '<?= Form::text(\'' . $name . '\', $${model}->' . $name . ', array(\'maxlength\'=>' . $size . ',\'size\'=>' . $size . ')); ?><br />';
-                 break;
-         }
-     }
-Index: libs/action/controller/Base.php
-===================================================================
---- libs/action/controller/Base.php	(revision 98)
-+++ libs/action/controller/Base.php	(working copy)
-@@ -181,11 +181,19 @@
-     protected function redirect_to($action, $params = array(), $controller = NULL) {
-         // get the curent controller, if NULL is passed.
-         if (is_null($controller)) $controller= $this->params['controller'];
--        $this->response->redirect(
-+        
-+        if ($this->config->getProperty('rewrite')) {
-+            $this->response->redirect(
-+                $this->config->getProperty('server_name') . $this->config->getProperty('document_root') . 
-+                $controller . '/' . $action);
-+        } else {
-+            // rewrite-off
-+            $this->response->redirect(
-                 $this->config->getProperty('server_name') . 
-                 $this->config->getProperty('document_root') . 
-                 '/index.php?controller=' . $controller . '&action=' . $action
-             );
-+        }
-         $this->action_performed = TRUE;
-     }
-     
-Index: libs/action/view/HTML.php
-===================================================================
---- libs/action/view/HTML.php	(revision 98)
-+++ libs/action/view/HTML.php	(working copy)
-@@ -40,19 +40,34 @@
- class HTMLElement {
-     public function __construct() {     }
- }
-+
- // NLT!
- class URL {
-     public static function create($controller, $action, $params=array()) {
--        $buff = 'index.php?controller=' . $controller . '&amp;action=' . $action;
--        if (!empty($params)) {
--            foreach ($params AS $key=>$value) {
--                $buff .= '&amp;' . $key . '=' . $value;
-+        if (!Configurator::getInstance()->getProperty('rewrite')) {
-+            // rewrite-off:
-+            $buff = 'index.php?controller=' . $controller . '&amp;action=' . $action;
-+            if (!empty($params)) {
-+                foreach ($params AS $key=>$value) {
-+                    $buff .= '&amp;' . $key . '=' . $value;
-+                }
-             }
-+            return $buff;
-+        } else {
-+            // rewrite-on:
-+            $buff= '/' . $controller . '/' . $action;
-+            if (!empty($params)) {
-+                foreach ($params AS $key=>$value) {
-+                    $buff .= '/' . $value;
-+                }
-+                $buff .= '.html';
-+            }
-+            return $buff;
-         }
--        return $buff;
-     }
- }
- 
-+
- class Form {
-     
-     public function __construct($action, $method) {  }
-@@ -89,7 +104,7 @@
-         $buff = '';
-         if (is_array($attr)) {
-             foreach ($attr AS $atribute=>$val) {
--                $buff .= '"' . $atribute . '"="' . $val . '" ';
-+                $buff .= $atribute . '="' . $val . '" ';
-             }
-         } elseif($attr != '') {
-             $buff .= $attr;
-Index: README
-===================================================================
---- README	(revision 98)
-+++ README	(working copy)
-@@ -0,0 +1,91 @@
-+============================
-+Medick :: One PHP Framework
-+$Id:$
-+============================
-+
-+ABOUT:
-+------
-+    Medick is a free software licensed under BSD License, see LICENSE file for details.
-+    Medick is a PHP Framework and the main task is to ease the work of programmers 
-+    by providing a ground for rapid and clean development.
-+
-+    At this point, the project is on pre-alpha stage.
-+    The stable version will require at least php 5.1.0 and it will be released around 1.february.2006
-+
-+REQUIREMENTS:
-+-------------
-+    1. php 5.0.3 or higher (http://php.net/downloads).
-+        The fallowing PHP extensions are required: simplexml and spl.
-+        For changing application settings on runtime you will also need domxml.
-+        This extensions are enbled by default on every php installation.
-+        
-+    2. for web application you will need, of course a web server, Apache is recommended.
-+    
-+    3. Apache recomanded settings: 
-+            3.1 AllowOverride directive from httpd.conf must be set to All, to allow .htaccess files
-+                and of course, mod_access must be turned on.
-+            3.2 for nice URL`s mod_rewrite should be installed and turnded on.
-+            Usualy, all Web Hosters provide this settings.
-+            
-+    3. to use a Database Engine you need to install one of the RDBMS suported by Creole:
-+        - MySQL, SQLite, PostgreSQL or MS SQL Server
-+
-+INSTALL:
-+--------
-+    1. checkout Medick sources from svn:
-+    
-+        $ svn checkout svn://svn.berlios.de/medick/trunk medick
-+
-+    this will create the medick folder and will download the source code from svn.
-+    The folder layout after the checkout (ignoring .svn folders and the content of docs and libs):
-+    
-+        medick/
-+            config/
-+                application.xml
-+                bootstrap.php
-+            docs/
-+                ...............
-+            scripts/
-+                updater.sh
-+                generator.php
-+            public_html/
-+                images/
-+                javascript/
-+                stylesheet/
-+                index.php
-+                default.htaccess
-+            libs/
-+                .................
-+            README
-+            LICENSE
-+            VERSION
-+
-+    2. Install Medick dependencies:
-+    
-+        $ cd medick/
-+        $ scripts/updater.sh
-+
-+        This script will checkout Creole (database abstraction layer for PHP5) and SimpleTest (PHP Test Framework)
-+    from their CVS repositories into the vendor folder:
-+    
-+        medick/
-+            vendor/
-+                creole/
-+                    ..........
-+                simpletest/
-+                    ..........
-+
-+    More details about creole and simpletest:
-+    simpletest: http://www.lastcraft.com/simple_test.php
-+    creole:     http://creole.phpdb.org/wiki
-+    
-+    3. There is no step 3, just start to code.
-+
-+GETTING STARTED.
-+----------------
-+  To be Done
-+  
-+CONTACT:
-+--------
-+    aurelian [ AT ] locknet [ DOT ] ro
-+

Deleted: trunk/docs/patches/patch-007.diff
===================================================================
--- trunk/docs/patches/patch-007.diff	2005-10-21 18:35:26 UTC (rev 228)
+++ trunk/docs/patches/patch-007.diff	2005-10-22 17:10:57 UTC (rev 229)
@@ -1,120 +0,0 @@
-Index: scripts/templates/controller.txt
-===================================================================
---- scripts/templates/controller.txt	(revision 101)
-+++ scripts/templates/controller.txt	(working copy)
-@@ -3,9 +3,9 @@
- /** This file was autogenerated on ${__DATE__} by ${__USER__} */
- 
- class ${Model}Controller extends ApplicationController {
-+    
-+    protected $model = array('${model}');
- 
--	protected $model = array('${model}');
--
-     /** List all items */
-     public function all() {
-         $this->template->${models} = ${Model}::find('all');
-@@ -31,14 +31,13 @@
- 
-     /** Print the form for adding editing the ${model} */
-     public function edit() {
--    	$this->template->${model} = ${Model}::find($this->params['${__PK__}']);
-+        $this->template->${model} = ${Model}::find($this->params['${__PK__}']);
-     }
- 
--	/** Process the edit form */
--	public function update() {
--	    $${model} = new ${Model}(array('${__PK__}'=>$this->params['${__PK__}']));
-+	  /** Process the edit form */
-+  	public function update() {
-+	      $${model} = new ${Model}(array('${__PK__}'=>$this->params['${__PK__}']));
-         ${__FIELDS__}
--        // $item->description=$this->params['description'];
-         // $${model}->author_id  = 1;
-         try {
-             $${model}->save();
-@@ -47,7 +46,7 @@
-             $this->logger->warn('SQLException caught!' . $sqlEx->getMessage());
-             $this->render_text('Cannot Save!');
-         }
--	}
-+	  }
- 
-     /** removes an item from the DB */
-     public function delete() {
-@@ -60,5 +59,5 @@
-             $this->render_text('Cannot Delete!');
-         }
-     }
--
- }
-+
-Index: scripts/templates/all.txt
-===================================================================
---- scripts/templates/all.txt	(revision 101)
-+++ scripts/templates/all.txt	(working copy)
-@@ -11,13 +11,11 @@
- 
-   <body>
-   	<h2>All ${models}</h2>
--    <div>
--	  <a href="<?= URL::create('${model}', 'anew');?>">Add a new ${Model}</a>
--    </div>
-+    <div><a href="<?= URL::create('${model}', 'anew');?>">Add a new ${Model}</a></div>
-     <hr />
-     
-     <? foreach ($${models} AS $${model}): ?>
--	  <p>
-+	    <p>
-         <a href="<?= URL::create('${model}', 'edit', array('id'=>$${model}->${__PK__}));?>">Edit</a>
-         <a href="<?= URL::create('${model}', 'delete', array('id'=>$${model}->${__PK__}));?>">Distroy</a>
-         ${__BUFFER__}
-@@ -31,3 +29,4 @@
-     
-   </body>
- </html>
-+
-Index: scripts/templates/anew.txt
-===================================================================
---- scripts/templates/anew.txt	(revision 101)
-+++ scripts/templates/anew.txt	(working copy)
-@@ -13,9 +13,10 @@
-     <h2>Add a new ${model}</h2>
-   	<form action="<?= URL::create('${model}','create');?>" method="post">
-   		<p>
--  		${__BUFFER__}
--  		<?= Form::submit('submit', 'Add New ${Model}') ?>
-+  		  ${__BUFFER__}
-+  		  <?= Form::submit('submit', 'Add New ${Model}') ?>
-   		</p>
- 	</form>
-   </body>  
--</html>
-\ No newline at end of file
-+</html>
-+
-Index: scripts/templates/helper.txt
-===================================================================
---- scripts/templates/helper.txt	(revision 101)
-+++ scripts/templates/helper.txt	(working copy)
-@@ -3,3 +3,4 @@
- /** This file was autogenerated on ${__DATE__} by ${__USER__} */
- 
- // ${model}_helper.php
-+
-Index: libs/active/record/Base.php
-===================================================================
---- libs/active/record/Base.php	(revision 101)
-+++ libs/active/record/Base.php	(working copy)
-@@ -254,9 +254,9 @@
-         }
-         $sql = 'UPDATE ' . self::$table_name . ' SET ';
-         foreach($this->fields->getAffectedFields() as $field) {
--            $sql .= $field->getName() . ' = ?,';
-+            $sql .= $field->getName() . ' = ?, ';
-         }
--        return substr($sql, 0, -1) . $sqlSnippet;
-+        return substr($sql, 0, -2) . $sqlSnippet;
-         
-     }
- 

Deleted: trunk/docs/patches/patch-008.diff
===================================================================
--- trunk/docs/patches/patch-008.diff	2005-10-21 18:35:26 UTC (rev 228)
+++ trunk/docs/patches/patch-008.diff	2005-10-22 17:10:57 UTC (rev 229)
@@ -1,113 +0,0 @@
-Index: config/bootstrap.php
-===================================================================
---- config/bootstrap.php	(revision 107)
-+++ config/bootstrap.php	(working copy)
-@@ -40,20 +40,15 @@
-  */
- 
- error_reporting(E_ALL);
--
- // main TOP_LOCATION.
- define('TOP_LOCATION', dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR);
--
- // include_path, rewrite the existing one
- set_include_path( TOP_LOCATION . 'libs'   . DIRECTORY_SEPARATOR . PATH_SEPARATOR . 
-                   TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR
-                 );
--
- include_once('MedickException.php');
-+include_once('configurator/XMLConfigurator.php');
- 
--include_once('configurator/Configurator.php');
--
--Configurator::factory('XML', TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . 'application.xml');
--
-+Configurator::factory();
- include_once('logger/Logger.php');
- include_once('Dispatcher.php');
-Index: libs/logger/Logger.php
-===================================================================
---- libs/logger/Logger.php	(revision 107)
-+++ libs/logger/Logger.php	(working copy)
-@@ -78,7 +78,8 @@
-             foreach($outputters->getChildren() as $outputter) {
-                 try {
-                     $class= new ReflectionClass(ucfirst((string)trim($outputter['name'])) . 'Outputter');
--                    $this->attach( $class->newInstance( (string)trim($outputter['level']), (string)trim($outputter['value']) ));
-+                    $this->attach( 
-+                        $class->newInstance( (string)trim($outputter['level']), (string)trim($outputter['value']) ));
-                 } catch (ReflectionException $rEx) {
-                     $this->warn($rEx->getMessage());
-                 }
-Index: libs/configurator/ConfiguratorException.php
-===================================================================
---- libs/configurator/ConfiguratorException.php	(revision 107)
-+++ libs/configurator/ConfiguratorException.php	(working copy)
-@@ -32,7 +32,6 @@
- // ///////////////////////////////////////////////////////////////////////////////
- // }}}
- 
--
- /**
-  * Cofigurator Exception
-  * @package locknet7.config
-Index: libs/configurator/Configurator.php
-===================================================================
---- libs/configurator/Configurator.php	(revision 107)
-+++ libs/configurator/Configurator.php	(working copy)
-@@ -46,18 +46,16 @@
-     /** A factory witch builds configurator object 
-      * TODO: this is just to pass the tests
-      */
--    public static function factory($type, $file) {
-+    public static function factory($type) {
-         if (!is_null(self::$instance)) return self::$instance;
-         $_klazz = $type . 'Configurator';
--        include_once('configurator/' . $_klazz . '.php');
--        self::$instance = new $_klazz($file);
-+        self::$instance = new $_klazz();
-         return self::$instance;
-     }
-     
-     public static function getInstance($type = 'XML') {
-         if (self::$instance === NULL) {
--            self::$instance = self::factory($type, 
--                TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . 'application.xml');
-+            self::$instance = self::factory($type);
-         }
-         return self::$instance;
-     }
-Index: libs/configurator/XMLConfigurator.php
-===================================================================
---- libs/configurator/XMLConfigurator.php	(revision 107)
-+++ libs/configurator/XMLConfigurator.php	(working copy)
-@@ -32,6 +32,9 @@
- // ///////////////////////////////////////////////////////////////////////////////
- // }}}
- 
-+
-+include_once('configurator/Configurator.php');
-+
- /**
-  * xml file-based Configurator.
-  * @package locknet7.config
-@@ -45,7 +48,7 @@
-      * Constructor.
-      * @param string, xml, configuration file/string
-      */
--    public function __construct($xml) {
-+    public function __construct($xml= TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . 'application.xml') {
-         if (is_file($xml)) $this->sxe = simplexml_load_file($xml, 'SimpleXMLIterator');
-         else $this->sxe = simplexml_load_string($xml, 'SimpleXMLIterator');
-         if ($this->sxe===false) throw new ConfiguratorException('Cannot read ' . $xml . '\n<br /> Bad Format!');
-@@ -53,7 +56,9 @@
- 
-     /** @see Configurator::getSectionProperty() */
-     public function getSectionProperty($section, $property) {
--        if(!$this->sxe->$section) throw new ConfiguratorException('Cannot find ' . $section . ' section in your Configuration!');
-+        if(!$this->sxe->$section) {
-+            throw new ConfiguratorException('Cannot find ' . $section . ' section in your Configuration!');
-+        }
-         $_sys   = $this->sxe->$section->$property;
-         $_query = (string)trim($_sys['value']);
-         if( ($_query=='') OR ($_query=='false') OR ($_query=='off') OR ($_query == 0) ){



From aurelian at berlios.de  Sun Oct 23 10:53:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 10:53:39 +0200
Subject: [Medick-svn] r230 - trunk/scripts
Message-ID: <200510230853.j9N8rdeu018331@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 10:53:39 +0200 (Sun, 23 Oct 2005)
New Revision: 230

Added:
   trunk/scripts/mktar.sh
Log:
 - scripts: mktar.sh a script that builds a tar file from our svn tree

Added: trunk/scripts/mktar.sh
===================================================================
--- trunk/scripts/mktar.sh	2005-10-22 17:10:57 UTC (rev 229)
+++ trunk/scripts/mktar.sh	2005-10-23 08:53:39 UTC (rev 230)
@@ -0,0 +1,46 @@
+#!/bin/bash
+
+# mktar.sh - create a tar file from a subversion working copy
+# Based on http://svnpkg.tigris.org/source/browse/*checkout*/svnpkg/trunk/mktar/usr/lib/svnpkg/mktar.sh?content-type=text%2Fplain&rev=2
+# Original Copyright 2004-2005 Dick Marinus <dick.marinus at etos.nl>
+# $Id$
+
+echo 'MkTAR, create a tar file from a SVN working copy'
+PW=`pwd`
+C_DATE=`date +%F`
+mkdir -p ~/tmp/medick
+cd ~/tmp/medick
+echo 'Checking out trunk/medick...'
+svn checkout -q svn://svn.berlios.de/medick/trunk medick
+echo 'Done.'
+TARNAME=medick
+TMPDIR=~/tmp/mktar-$(id -un)-$$/
+TMPFILE=~/tmp/mktar-$(id -un)-$$-file
+# cleanup
+rm -rf "${TMPDIR}" "${TMPFILE}"
+mkdir -p ${TMPDIR}/${TARNAME}
+cd medick
+echo 'Removing .svn folders...'
+# concat workingcopies together
+find . ! -regex '.*/\.svn.*' -exec sh -c "
+    if [ -d "{}" ] ; then
+        mkdir -p "${TMPDIR}/${TARNAME}/{}"
+    else
+        DIRNAME=$(dirname {})
+        mkdir -p "${TMPDIR}/${TARNAME}/${DIRNAME}"
+        cat "${TMPDIR}/${TARNAME}/{}" "{}" > $TMPFILE 2>/dev/null
+        mv "${TMPFILE}" "${TMPDIR}/${TARNAME}/{}"
+    fi
+" \;
+cd - > /dev/null
+echo 'Done.'
+echo "Creating tar.gz file: ${TARNAME}-latest.tar.gz"
+tar czf ${TARNAME}.tar.gz -C "${TMPDIR}/" ${TARNAME}
+mv ${TARNAME}.tar.gz ${PW}/${TARNAME}-latest.tar.gz
+cd $PW
+echo 'Done.'
+echo 'Cleaning-up...'
+#clean up
+rm -rf "${TMPDIR}" "${TMPFILE}"
+rm -rf ~/tmp/medick
+echo 'MkTAR Done.'


Property changes on: trunk/scripts/mktar.sh
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sun Oct 23 10:55:25 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 10:55:25 +0200
Subject: [Medick-svn] r231 - trunk/scripts
Message-ID: <200510230855.j9N8tPPp018872@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 10:55:23 +0200 (Sun, 23 Oct 2005)
New Revision: 231

Modified:
   trunk/scripts/mktar.sh
Log:
 - utilities: mktar changed latest suffix with the current date

Modified: trunk/scripts/mktar.sh
===================================================================
--- trunk/scripts/mktar.sh	2005-10-23 08:53:39 UTC (rev 230)
+++ trunk/scripts/mktar.sh	2005-10-23 08:55:23 UTC (rev 231)
@@ -34,9 +34,9 @@
 " \;
 cd - > /dev/null
 echo 'Done.'
-echo "Creating tar.gz file: ${TARNAME}-latest.tar.gz"
+echo "Creating tar.gz file: ${TARNAME}-${C_DATE}.tar.gz"
 tar czf ${TARNAME}.tar.gz -C "${TMPDIR}/" ${TARNAME}
-mv ${TARNAME}.tar.gz ${PW}/${TARNAME}-latest.tar.gz
+mv ${TARNAME}.tar.gz ${PW}/${TARNAME}-${C_DATE}.tar.gz
 cd $PW
 echo 'Done.'
 echo 'Cleaning-up...'



From aurelian at berlios.de  Sun Oct 23 10:59:00 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 10:59:00 +0200
Subject: [Medick-svn] r232 - trunk
Message-ID: <200510230859.j9N8x0JX020132@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 10:58:59 +0200 (Sun, 23 Oct 2005)
New Revision: 232

Modified:
   trunk/VERSION
Log:
 VERSION should be incresed by one

Modified: trunk/VERSION
===================================================================
--- trunk/VERSION	2005-10-23 08:55:23 UTC (rev 231)
+++ trunk/VERSION	2005-10-23 08:58:59 UTC (rev 232)
@@ -1 +1 @@
-0.0.2-svn
+0.0.3-svn



From aurelian at berlios.de  Sun Oct 23 11:16:24 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 11:16:24 +0200
Subject: [Medick-svn] r233 - trunk
Message-ID: <200510230916.j9N9GO7H021255@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 11:16:24 +0200 (Sun, 23 Oct 2005)
New Revision: 233

Modified:
   trunk/TODO
Log:
 TODO clean-up + more todos added.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2005-10-23 08:58:59 UTC (rev 232)
+++ trunk/TODO	2005-10-23 09:16:24 UTC (rev 233)
@@ -12,27 +12,45 @@
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 0.0.3 WishList:
-Implement Session management
-Fix && Clean-up Routing System
+~~~~~~~~~~~~~~~
+A. !! Fix Model by forcing the user to write a dummy static find method.
 
+B. !! Using magick __layout or __common shold be optional.
+    Think about AJAX who needs to render some plain text or some complex XML document.
+
+C. Implement Session management
+D. Fix && Clean-up Routing System
+E. Clean-up test/* folder
+
+General TODO list:
+~~~~~~~~~~~~~~~~~~
 1. Routing Mechanism.
     ! Must choose between some kind of RoR implementation or ivent a new and magick Routing system
     ! On setFailure use a Route as a parameter?
     ! Connect two Routes (a Failure Route and a Route) this way, the Route will know what to expect from Failure.
     
-2. Validators.
-    2.1 Error messages.
+2. Validators + Error messages.
+    This task is related with task 1
     
-3.^ Auth.
-
-4.^ Caching system.
+3. Auth.
+    This task is related with task 1.
+    
+4. Caching system.
     This could be done using some sort of isRouteWalked methods.
+    this task is related with task 1.
     
-5.^ A new naming convention, so we can use __autoload function.
+5. A new naming convention, so we can use __autoload function.
     Will result in long class names, yet this feature is on hold probably until we will have  namespaces in php.
 
-6.^ XML template engine (?)
+6. XML template engine (?)
     Not so hard, must be without XSLT since there are a lot  of hosts that don't install this extension.
 
 7. Flash thing.
-    
+
+8. Add a configurator alternative so we can remove (or provide an alternative) the simplexml dependency (XMLConfigurator)
+    This way, we will also have to try to avoid the spl crap.
+    The work on INIConfigurator is on progress.
+
+9. Generator scripts, for applications, for generating Models/Controllers/Views (fix the old one).
+
+



From aurelian at berlios.de  Sun Oct 23 13:20:23 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 13:20:23 +0200
Subject: [Medick-svn] r234 - in trunk: libs/active/record libs/medick test/dummy/models
Message-ID: <200510231120.j9NBKNtP027800@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 13:20:20 +0200 (Sun, 23 Oct 2005)
New Revision: 234

Added:
   trunk/libs/active/record/Association.php
Modified:
   trunk/libs/active/record/Base.php
   trunk/libs/active/record/FieldsAggregate.php
   trunk/libs/active/record/QueryBuilder.php
   trunk/libs/medick/Dispatcher.php
   trunk/libs/medick/Exception.php
   trunk/test/dummy/models/author.php
   trunk/test/dummy/models/book.php
Log:
!!! Major Changes on Models:
# due to the php inheritance in static context, a dummy method should be added to the models:
 public static function find() {
    $args= func_get_args();
    self::setTable(__CLASS__);
    return self::__find($args);
 }

 -> ActiveRecordBase renamed find() to __find()
 -> added active/record/Association.php, a class to handle ActiveRecord Association
 -> ActiveRecordBase ready-only has_and_belongs_to_many association type
 -> active/record/QueryBuilder.php added API docs, added `left join` modifier
 -> medick/Exception.php added `getType` witch retrun the Exception type
 -> tests/* fixed dummy models to take care of the new way of writing Models
 -> medick/Dispatcher, Exception Types (our MedickException`s and other types of Exceptions) are handle differently


Added: trunk/libs/active/record/Association.php
===================================================================
--- trunk/libs/active/record/Association.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/active/record/Association.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -0,0 +1,82 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * Association base abstract class
+ * @package locknet7.active.record
+ */
+
+abstract class Association extends Object {
+
+    public $owner= NULL;
+
+    public $class= NULL;
+
+    public $pk   = NULL;
+
+    abstract public function execute();
+
+    protected function pre_execution() {
+        ActiveRecordBase::setTable(Inflector::pluralize($this->class));
+    }
+
+    protected function post_execution() {
+        ActiveRecordBase::setTable(Inflector::pluralize($this->owner));
+    }
+}
+
+/**
+ * HasAndBelongsToManyAssociation
+ * @package locknet7.active.record.association
+ */
+class HasAndBelongsToManyAssociation extends Association {
+    public function execute() {
+        $this->pre_execution();
+        $join_table= Inflector::pluralize($this->class) . '_' . Inflector::pluralize($this->owner);
+        $ret= ActiveRecordBase::__find(
+                            array(
+                                array(
+                                    'include'  => Inflector::pluralize($this->class) . '.*',
+                                    'left join'=>
+                                              $join_table . ' ON ' .
+                                              Inflector::pluralize($this->class) .
+                                              '.id=' . $join_table . '.' . $this->class . '_id',
+                                     'condition'=> $join_table . '.' . $this->owner . '_id=' . $this->pk
+                                    )
+                                )
+                            );
+        $this->post_execution();
+        return $ret;
+    }
+}


Property changes on: trunk/libs/active/record/Association.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/active/record/Base.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -37,6 +37,9 @@
 include_once('active/record/QueryBuilder.php');
 include_once('active/record/ActiveRecordException.php');
 include_once('active/support/Inflector.php');
+
+include_once('active/record/Association.php');
+
 include_once('creole/Creole.php');
 
 /**
@@ -52,6 +55,10 @@
         primary key name! */
     private $pk;
 
+    /** @var Logger
+        a Logger instance */
+    protected $logger;
+
     // {{{ static members
     
     /** @var Connection
@@ -88,6 +95,7 @@
      * @param array, params, parameters as pair of `field name` => `value`
      */
     public final function __construct($params = array()) {
+        $this->logger= Registry::get('__logger');
         self::establish_connection();
         $this->fields = new FieldsAggregate();
         self::$table_name = Inflector::pluralize(strtolower(get_class($this)));
@@ -153,19 +161,44 @@
                 return $it->current()->isAffected ? $it->current()->getValue() : NULL;
             }
         }
-        if ($this->has_one AND in_array($field_name, $this->has_one)) {
+        // Associations:
+        // 1. has_one, the syntax: protected $has_one= array('__FIELD_NAME__');
+        if (isset($this->has_one) && $this->has_one && in_array($field_name, $this->has_one)) {
             $fk= $field_name.'_id';
             for($it = $this->fields->getIterator(); $it->valid(); $it->next()) {
                 if ( $it->current()->getName() == $fk ) {
                     $_table= Inflector::singularize(self::$table_name);
                     self::setTable($field_name);
-                    $ret= self::find($it->current()->getValue());
+                    $ret= self::__find(array($it->current()->getValue()));
                     self::setTable($_table);
                     return $ret;
                 }
             }
         }
-        throw new ActiveRecordException ('Cannot Get the value of filed: ' . $field_name . '. No such filed!');
+        // 2. has_and_belongs_to_many
+        if (
+            (isset($this->has_and_belongs_to_many))
+              &&
+              (
+                  (
+                      (is_array($this->has_and_belongs_to_many))
+                      &&
+                      (in_array($field_name, $this->has_and_belongs_to_many))
+                  )
+                  ||
+                  (
+                      $this->has_and_belongs_to_many == Inflector::pluralize($field_name)
+                  )
+              )
+            )
+        {
+            $assoc = new HasAndBelongsToManyAssociation();
+            $assoc->owner= Inflector::singularize(self::$table_name);
+            $assoc->pk   = $this->fields->getPrimaryKey()->getValue();
+            $assoc->class= Inflector::singularize($field_name);
+            return $assoc->execute();
+        }
+        throw new ActiveRecordException ('Cannot Get the value of filed: `' . $field_name . '`. No such filed!');
     }
 
     /** removes some duplicate code */
@@ -313,14 +346,12 @@
     // }}}
 
     // {{{ find monster
-    public static function find() {
-        $numargs = func_num_args();
-        if($numargs == 0) return self::find('all');
-        $params = func_get_args();
+    public static final function __find($params= array()) {
+        $numargs = sizeof($params);
+        if($numargs == 0) return self::__find(array('all'));
 
         // $class = new ReflectionClass(Inflector::singularize(ucfirst(self::$table_name)));
         $_klazz = Inflector::singularize(ucfirst(self::$table_name));
-
         $query = new QuerryBuilder(self::$table_name);
 
         if ( $params[0] == 'all' && $numargs == 1 ) {

Modified: trunk/libs/active/record/FieldsAggregate.php
===================================================================
--- trunk/libs/active/record/FieldsAggregate.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/active/record/FieldsAggregate.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -142,4 +142,3 @@
         return $affected_fields;
     }
 }
-

Modified: trunk/libs/active/record/QueryBuilder.php
===================================================================
--- trunk/libs/active/record/QueryBuilder.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/active/record/QueryBuilder.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -33,26 +33,49 @@
 // }}}
 
 /**
- * It builds SQL querys
+ * It builds Select SQL querys
  * @package locknet7.active.record
  */
 class QuerryBuilder extends Object {
-    
-    private $select  = array();
-    private $from;
-    private $where   = array();
+
+    /** @var array
+        select, used in include modifier */
+    private $select = array();
+
+    /** @var array
+        from clause, this includes the table name and joins */
+    private $fromClause = array();
+
+    /** @var array
+        where clause */
+    private $whereClause = array();
+
+    /** @var string
+        adds an order by */
     private $orderBy;
 
-    private $table;
+    /** @var int limit */
+    private $limit  = FALSE;
 
-    private $limit  = FALSE;
+    /** @var int offset */
     private $offset = FALSE;
 
-    
+    /**
+     * Creates a new QueryBuilder
+     * @param string table
+     */
     public function __construct($table) {
-        $this->table = $table;
+        $this->fromClause[]= $table;
     }
 
+    /**
+     * It adds a modifier to this select
+     *
+     * @param string type of this modifier
+     * @param string value of this modifier
+     * @throws ActiveRecordException when the type is unknown
+     * @return void
+     */
     public function add($type, $value) {
         switch ($type) {
             case 'include':
@@ -61,6 +84,9 @@
             case 'condition':
                 $this->addWhere($value);
                 break;
+            case 'left join':
+                $this->addJoin('LEFT', $value);
+                break;
             case 'limit':
                 $this->limit = (int)$value;
                 break;
@@ -71,47 +97,83 @@
                 $this->orderBy = $value;
                 break;
             default:
-                throw new ActiveRecordException ('Call to unknow modifier: ' . $type);
+                throw new ActiveRecordException ('Call to unknow modifier: `' . $type . '`');
                 break;
         }
     }
 
+    /**
+     * Adds modifiers as array
+     * @param array the array of parameters to pass
+     */
     public function addArray(/*array*/ $params) {
         foreach ($params AS $type=>$value) {
             $this->add($type, $value);
         }
     }
-    
+
+    /**
+     * It gets the limit
+     * @return int the limit or FALSE if the limit was not changed
+     */
     public function getLimit() {
         return $this->limit;
     }
 
+    /**
+     * It gets the offset
+     * @return int the offset or FALSE if the offset was not changed
+     */
     public function getOffset() {
         return $this->offset;
     }
-    
+
+    /**
+     * It buils the select query based on the modifiers passed.
+     * @return string the sql querys
+     */
     public function buildQuery() {
-        return  "SELECT "
+        $query =  "SELECT "
                  . ($this->select ? implode(" ", $this->select) . " " : " * ")
                  // .implode(", ", $selectClause)
                  // . " FROM " . implode(", ", $fromClause)
-                 . " FROM " . $this->table
-                 . ($this->where ? " WHERE " . implode(" AND ", $this->where) : "")
+                 // . " FROM " . $this->table
+                 . " FROM " . implode(" ", $this->fromClause)
+                 . ($this->whereClause ? " WHERE " . implode(" AND ", $this->whereClause) : "")
                  // .($groupByClause ? " GROUP BY ".implode(",", $groupByClause) : "")
                  // .($havingString ? " HAVING ".$havingString : "")
                  // . ($this->orderBy ? " ORDER BY " . implode(",", $this->orderBy) : "");
                  . ($this->orderBy ? " ORDER BY " . $this->orderBy : "");
+        Registry::get('__logger')->debug('Trying to run sql query:');
+        Registry::get('__logger')->debug($query);
+        return $query;
                  
 
     }
-    
-    public function addSelect($select) {
+
+    // {{{ internal helpers.
+    /**
+     * Adds a select clause
+     * @param string select clause to add
+     */
+    private function addSelect($select) {
         $this->select[] = $select;
     }
 
-    public function addWhere($where) {
-        $this->where[] = $where;
+    /**
+     * Adds a where clause
+     * @param string where clause to add
+     */
+    private function addWhere($where) {
+        $this->whereClause[] = $where;
     }
 
+    /**
+     * Adds a join clause
+     * @param string join clause to add
+     */
+    private function addJoin($args, $value) {
+        $this->fromClause[] = $args . " JOIN " . $value;
+    }
+    // }}}
 }
-

Modified: trunk/libs/medick/Dispatcher.php
===================================================================
--- trunk/libs/medick/Dispatcher.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/medick/Dispatcher.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -57,9 +57,14 @@
         }
         try {
             ActionControllerRouting::recognize($request)->process($request, $response)->dump();
+        } catch (MedickException $mEx) {
+            Registry::get('__logger')->warn($mEx->getMessage());
+            echo '<div style="border:1px solid red"><h1 style="text-align:center">Cannot process your request due to a MedickException</h1>';
+            echo '<span style="color:red">' . $mEx->getMessage() . '</span>';
+            echo '<pre>' . $mEx->getTraceAsString() . '</pre><br /><h3>Exception Type: ' . $mEx->getType() . '</h3></div>';
         } catch (Exception $e) {
             Registry::get('__logger')->warn($e->getMessage());
-            echo '<div style="border:1px solid red"><h1 style="text-align:center">Cannot process your request due to an exception</h1>';
+            echo '<div style="border:1px solid red"><h1 style="text-align:center">Internal Server Error.</h1>';
             echo '<span style="color:red">' . $e->getMessage() . '</span>';
             echo '<pre>' . $e->getTraceAsString() . '</pre></div>';
         }

Modified: trunk/libs/medick/Exception.php
===================================================================
--- trunk/libs/medick/Exception.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/libs/medick/Exception.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -37,5 +37,8 @@
  * Our base Exception Class
  * @package locknet7.medick
  */
-class MedickException extends Exception {       }
+class MedickException extends Exception {
 
+    public function getType() { return __CLASS__; }
+
+}

Modified: trunk/test/dummy/models/author.php
===================================================================
--- trunk/test/dummy/models/author.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/test/dummy/models/author.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -4,5 +4,11 @@
 
 include_once('active/record/Base.php');
 
-class Author extends ActiveRecordBase {   }
+class Author extends ActiveRecordBase {
+    public static function find() {
+        $args= func_get_args();
+        self::setTable(__CLASS__);
+        return self::__find($args);
+    }
+}
 

Modified: trunk/test/dummy/models/book.php
===================================================================
--- trunk/test/dummy/models/book.php	2005-10-23 09:16:24 UTC (rev 233)
+++ trunk/test/dummy/models/book.php	2005-10-23 11:20:20 UTC (rev 234)
@@ -7,5 +7,11 @@
 class Book extends ActiveRecordBase {
 
     protected $has_one= array('author');
+    
+    public static function find() {
+        $args= func_get_args();
+        self::setTable(__CLASS__);
+        return self::__find($args);
+    }
 
 }



From aurelian at berlios.de  Sun Oct 23 15:28:20 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 15:28:20 +0200
Subject: [Medick-svn] r235 - in trunk/test: . application application/models test test/action test/action/controller test/active test/active/record test/active/record/associations test/active/support test/configurator test/medick
Message-ID: <200510231328.j9NDSKMh005639@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 15:28:19 +0200 (Sun, 23 Oct 2005)
New Revision: 235

Added:
   trunk/test/application/
   trunk/test/application/controllers/
   trunk/test/application/dummy.xml
   trunk/test/application/models/author.php
   trunk/test/application/models/book.php
   trunk/test/runner.php
   trunk/test/test/
   trunk/test/test/action/
   trunk/test/test/action/controller/
   trunk/test/test/action/controller/RoutingTest.php
   trunk/test/test/active/
   trunk/test/test/active/record/
   trunk/test/test/active/record/DBOperationsTest.php
   trunk/test/test/active/record/FindTest.php
   trunk/test/test/active/record/associations/
   trunk/test/test/active/record/associations/HasOneTest.php
   trunk/test/test/active/support/
   trunk/test/test/active/support/InflectorTest.php
   trunk/test/test/configurator/
   trunk/test/test/configurator/XMLConfiguratorTest.php
   trunk/test/test/medick/
   trunk/test/test/medick/CollectionTest.php
   trunk/test/test/medick/RegistryTest.php
Removed:
   trunk/test/ARBaseAssocHas_OneTest.php
   trunk/test/ARBaseBasicsTest.php
   trunk/test/ARBaseFindTest.php
   trunk/test/CollectionTest.php
   trunk/test/InflectorTest.php
   trunk/test/RegistryTest.php
   trunk/test/RoutingTest.php
   trunk/test/XMLConfiguratorTest.php
   trunk/test/application/models/todo.php
   trunk/test/dummy/
   trunk/test/testrunner.php
Log:
 - [ test/* ] restructuration in progress.

Deleted: trunk/test/ARBaseAssocHas_OneTest.php
===================================================================
--- trunk/test/ARBaseAssocHas_OneTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/ARBaseAssocHas_OneTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,71 +0,0 @@
-<?php
-
-// $Id$
-    
-include_once('dummy/models/author.php');
-include_once('dummy/models/book.php');
-include_once('mock/MockConfigurator.php');
-include_once('logger/Logger.php');
-
-/** Test Has_One Association */
-class ARBaseAssocHas_OneTest extends UnitTestCase {
-
-    /**
-     * Constructor Once/TestCase
-     * Prequsites for this TestCase to run: Create a sqlite DB with 2 tables and a foreign key.
-     */
-    public function __construct() {
-        if (is_file('test.db')) unlink('test.db');
-        $tbd= sqlite_open('test.db');
-        $query='
-            CREATE TABLE AUTHORS (
-                id INTEGER PRIMARY KEY,
-                name VARCHAR(100),
-                email VARCHAR(150)
-            )';
-        $ex= sqlite_query($tbd, $query);
-        $_query='    
-            CREATE TABLE BOOKS (
-                id INTEGER PRIMARY KEY,
-                title VARCHAR(100),
-                author_id INTEGER NOT NULL CONSTRAINT fk_author_id REFERENCES AUTHORS(id) ON DELETE CASCADE
-            )';
-        $exp= sqlite_query($tbd, $_query);
-    }
-
-    /** set up */
-    public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        ActiveRecordBase::close();
-        
-        $author= new Author();
-        $author->name= 'Andrei Cristescu';
-        $author->email= 'andrei at foocompany.com';
-        
-        $id= $author->save();
-        
-        $book = new Book();
-        $book->author_id= $id;
-        $book->title= 'The End is NEAR!';
-        $book->save();
-    }
-    
-    /** tearDown */
-    public function tearDown() {
-        Registry::close();
-    }
-
-    /** */
-    public function testHasOne() {
-        $books= Book::find();
-        foreach($books as $book) {
-            $this->assertIsA($book->author, 'Author');
-            $this->assertIsA($book, 'Book');
-        }
-        $this->assertEqual($book->author->name, 'Andrei Cristescu');
-        // TBD. This is not supported right now!
-        // $book->author->delete();
-        // $this->assertEqual(sizeof(Book::find()), 0);
-    }
-}

Deleted: trunk/test/ARBaseBasicsTest.php
===================================================================
--- trunk/test/ARBaseBasicsTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/ARBaseBasicsTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,73 +0,0 @@
-<?php
-
-// $Id$
-    
-include_once('dummy/models/author.php');
-include_once('mock/MockConfigurator.php');
-include_once('logger/Logger.php');
-
-/** Tests insert, update, save (insert/update), delete. */
-class ARBaseBasicsTest extends UnitTestCase {
-
-    /**
-     * Constructor Once/TestCase
-     * Prequsites for this TestCase to run: Create a sqlite DB
-     */
-    public function __construct() {
-        if (is_file('test.db')) unlink('test.db');
-        $query='
-            CREATE TABLE authors (
-                id INTEGER PRIMARY KEY,
-                name VARCHAR(100),
-                email VARCHAR(150)
-            );
-        ';
-        sqlite_query(sqlite_open('test.db'), $query);
-    }
-
-    /** set up */
-    public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        ActiveRecordBase::close();
-    }
-    
-    /** tearDown */
-    public function tearDown() {
-        Registry::close();
-    }
-
-    /** <tt>save && delete test</tt> */
-    public function testSave() {
-        $item= new Author();
-        $item->name= 'Andrei Cristescu';
-        $this->assertEqual($item->save(), $item->id);
-        $this->assertEqual($item->delete(), 1);
-    }
-
-    /** <tt>save && delete test</tt> */
-    public function testDelete() {
-        $item = new Author();
-        $item->name = 'Andrei Cristescu';
-        $item->save();
-        $this->assertEqual($item->delete(), 1);
-        $this->assertEqual($item->delete(), 0);
-    }
-    
-    /** <tt>insert</tt> */
-    public function testInsert() {
-        $item = new Author();
-        $item->name = 'Andrei Cristescu';
-        $this->assertEqual($item->insert(), $item->id);
-        $item->delete();
-    }
-    /** <tt>update test</tt> */
-    public function testUpdate() {
-        $item = new Author();
-        $item->name = 'Andrei Cristescu';
-        $this->assertEqual($item->insert(), $item->id);
-        $item->email = 'cristescu at yahoo.com';
-        $this->assertEqual($item->update(), 1);
-        $this->assertEqual($item->delete(), 1);
-    }
-}

Deleted: trunk/test/ARBaseFindTest.php
===================================================================
--- trunk/test/ARBaseFindTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/ARBaseFindTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,100 +0,0 @@
-<?php
-
-// $Id$
-    
-include_once('dummy/models/author.php');
-include_once('mock/MockConfigurator.php');
-include_once('logger/Logger.php');
-  
-/** Tests find */
-class ARBaseFindTest extends UnitTestCase {
-  
-    /** our authors container */
-    private $authors= array();
-     
-    /**
-     * Constructor Once/TestCase
-     * Prequsites for this TestCase to run: Create a sqlite DB
-     */
-    public function __construct() {
-        if (is_file('test.db')) unlink('test.db');
-        $query='
-            CREATE TABLE authors (
-                id INTEGER PRIMARY KEY,
-                name VARCHAR(100),
-                email VARCHAR(150)
-            );
-        ';
-        sqlite_query(sqlite_open('test.db'), $query);
-     }
-  
-     /** set up this test case, we insert 3 fileds in DB table */
-     public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        ActiveRecordBase::close();
-        $author= new Author();
-        $author->name= "Andrei Cristescu";
-        $author->email= "andrei.cristescu at foo-factory.info";
-        $this->authors[]= $author;
-        $author->insert();
-        $author= new Author();
-        $author->name= "Cristescu";
-        $this->authors[]= $author;
-        $author->insert();
-        $author= new Author();
-        $author->name= "Andrei";
-        $this->authors[]= $author;
-        $author->insert();
-    }
-
-    /** remove all the fields from DB, clean-up the Registry */
-    public function tearDown() {
-        foreach ($this->authors as $author) {
-            $author->delete();
-        }
-        Registry::close();
-    }
-
-    /** find all syntax. */
-    public function testFindAll() {
-        $this->assertEqual(Author::find()->count(), Author::find('all')->count());
-    }
-
-    /** id field is not selected, should be NULL */
-    public function testFindAllArrayInclude() {
-        $authors= Author::find('all', array('include'=>'name, email'));
-        foreach ($authors as $author) {
-            $this->assertNull($author->id);
-        }
-    }
-
-    /** select by condition */
-    public function testFindAllArrayCondition() {
-        $authors= Author::find('all', array('condition'=>'name="Andrei Cristescu"'));
-        $this->assertEqual($authors->count(), 1);
-        foreach ($authors as $author) {
-            $this->assertEqual('andrei.cristescu at foo-factory.info', $author->email);
-        }
-    }
-
-    /** limit syntax. */
-    public function testFindAllArrayLimit() {
-        $authors= Author::find('all', array('limit'=>2));
-        $this->assertEqual($authors->count(), 2);
-    }
-
-    /** order syntax. */
-    public function testFindAllArrayOrder() {
-        $authors= Author::find('all', array('order'=>'id DESC'));
-        $i=4; foreach ($authors as $author) {
-            $this->assertEqual(--$i, $author->id);
-        }
-    }
-
-    /** offset syntax. */
-    public function testFindAllArrayOffset() {
-        $authors= Author::find('all', array('offset'=>2));
-        $this->assertEqual($authors->count(), 1);
-    }
-}

Deleted: trunk/test/CollectionTest.php
===================================================================
--- trunk/test/CollectionTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/CollectionTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,79 +0,0 @@
-<?php
-
-// $Id$
-    
-include_once('mock/MockCollection.php');
-    
-class Foo Extends Object {      }
-
-class Bar extends Object {      }
-
-class Baz extends Object {      }
-
-class CollectionTest extends UnitTestCase {
-
-    private $col = NULL;
-
-    function setUp() {
-        $this->col = new MockCollection();
-    }
-    
-    function tearDown() {
-        $this->col = NULL;
-    }
-    
-    function testAdd() {
-        $f= $this->col->add(new Foo());
-        $this->assertEqual('Foo', $f->getClassName());
-    }
-    
-    function testEmpty() {
-        $this->col->add(new Foo());
-        $this->assertFalse($this->col->isEmpty());
-    }
-    
-    function testRemove() {
-         $f= new Foo();
-         $this->col->add($f);
-         $this->col->remove($f);
-         $this->assertTrue($this->col->isEmpty());
-    }
-    
-    function testSize() {
-        $this->col->add(new Foo());
-        $this->col->add(new Foo());
-        $this->assertEqual(2, $this->col->size());
-        $this->col->add(new Bar());
-        $this->assertEqual(3, $this->col->count());
-    }
-
-    function testAddAll() {
-        $this->col->add(new Foo());
-        $this->col->add(new Bar());
-        $col= new MockCollection();
-        $col->add(new Bar());
-        $col->add(new Baz());
-        $this->col->addAll($col);
-        $this->assertEqual(4, $this->col->size());
-    }
-
-    function testArray() {
-        $this->col[] = new Foo();
-        $this->col[] = new Bar();
-        $this->col[] = new Baz();
-        $this->assertEqual($this->col->size(), 3);
-    }
-
-    function testOffsetExists() {
-        $this->col[] = new Bar();
-        $this->assertTrue($this->col->offsetExists(0));
-   }
-
-   function testContains() {
-       $f= new Foo();
-       $this->col[] = $f;
-       $this->assertTrue($this->col->contains($f)); 
-   }
-
-}
-

Deleted: trunk/test/InflectorTest.php
===================================================================
--- trunk/test/InflectorTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/InflectorTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,25 +0,0 @@
-<?php
-
-// $Id$    
-    
-include_once('active/support/Inflector.php');
- 
-class InflectorTest extends UnitTestCase {
-
-    public function testPlurals() {
-        $this->assertEqual(Inflector::pluralize('category'), 'categories');
-        $this->assertEqual(Inflector::pluralize('person'), 'persons');
-        $this->assertEqual(Inflector::pluralize('mouse'),    'mice');
-        $this->assertEqual(Inflector::pluralize('search'),   'searches');
-        $this->assertEqual(Inflector::pluralize('alias'),    'aliases');
-        $this->assertEqual(Inflector::pluralize('monitor'),  'monitors');
-    }
-
-    public function testSingulars() {
-        $this->assertEqual(Inflector::singularize('categories'), 'category');
-        $this->assertEqual(Inflector::singularize('mice'),       'mouse');
-        $this->assertEqual(Inflector::singularize('searches'),   'search');
-        $this->assertEqual(Inflector::singularize('years'),      'year');
-        $this->assertEqual(Inflector::singularize('aliases'),    'alias');
-    }
-}

Deleted: trunk/test/RegistryTest.php
===================================================================
--- trunk/test/RegistryTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/RegistryTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,38 +0,0 @@
-<?php
-
-// $Id$
-    
-include_once('mock/MockObject.php');
-
-
-
-class RegistryTest extends UnitTestCase {
-
-    private $registry = NULL;
-    private $obj      = NULL;
-    
-    function setUp() {
-        $this->obj = new MockObject();
-        $this->registry = Registry::put($this->obj, 'mock');
-    }
-    
-    function tearDown() {
-        $this->obj      = NULL;
-        $this->registry = NULL;
-    }
-    
-    function testRegistry() {
-        $this->assertEqual($this->obj->getClassName(), Registry::get('mock')->getClassName());
-    }
-    
-    function testDispose() {
-        Registry::remove('mock');
-        try {
-            Registry::get('mock');
-            $this->fail('InvalidOffsetException should be thrown!');
-        } catch (Exception $nEx) {
-            $this->assertIsA($nEx, 'InvalidOffsetException');
-        }
-    }
-
-}

Deleted: trunk/test/RoutingTest.php
===================================================================
--- trunk/test/RoutingTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/RoutingTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,38 +0,0 @@
-<?php
-
-// $Id$
-
-include_once('medick/Registry.php');
-include_once('logger/Logger.php');
-
-include_once('mock/MockConfigurator.php');
-include_once('mock/MockRequest.php');
-
-include_once('action/controller/Route.php');
-include_once('action/controller/Map.php');
-include_once('action/controller/Routing.php');
-include_once('action/controller/Base.php');
-
-class RoutingTest extends UnitTestCase {
-
-    private $map;
-
-    public function setUp() {
-        Registry::put(new MockConfigurator(), '__configurator');
-        Registry::put(new Logger(), '__logger');
-        $this->map= Registry::put(new Map(), '__map');
-    }
-    
-    public function tearDown() {
-        Registry::close();
-    }
-    
-    public function testRec() {
-        $route= new Route('foo', 'bar');
-        $request= new MockRequest();
-        $request->setParam('controller', 'foo');
-        $request->setParam('action', 'bar');
-        $this->map->add($route);
-        $this->assertIsA(ActionControllerRouting::recognize($request), 'ActionControllerBase');
-    }
-}

Deleted: trunk/test/XMLConfiguratorTest.php
===================================================================
--- trunk/test/XMLConfiguratorTest.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/XMLConfiguratorTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,99 +0,0 @@
-<?php
-
-// $Id$
-
-include_once('configurator/XMLConfigurator.php');
-
-class XMLConfiguratorTest extends UnitTestCase {
-
-    public function testCreation() {
-        $this->assertNotNull(new XMLConfigurator('dummy/dummy.xml'));
-        $this->assertNotNull(new XMLConfigurator('<?xml version="1.0" encoding="UTF-8"?><application></application>'));
-        try {
-            new XMLConfigurator('non_existant_file.xml');
-            $this->fail('ConfiguratorException should be thrown!');
-        } catch (Exception $e) {
-            $this->assertIsA($e, 'ConfiguratorException');
-        }
-    }
-
-    public function testDatabaseDsn() {
-        $xml='<?xml version="1.0" encoding="UTF-8"?><application>
-                <database default="two">
-                    <dsn id="one"
-                        phptype  = "mysql"
-                        hostspec = "localhost"
-                        database = "todo"
-                        username = "root"
-                        password = "zzz" />
-                    <dsn id = "two"
-                        phptype  = "pgsql"
-                        hostspec = "192.18.1.1"
-                        database ="test"
-                        username ="antonescu"
-                        password ="x-creeme" />
-                </database>
-            </application>';
-        $config= new XMLConfigurator($xml);
-        try {
-            $config->getDatabaseDsn('foo');
-            $this->fail('ConfiguratorException should be thrown!');
-        } catch (MedickException $cEx) {
-            $this->assertIsA($cEx, 'ConfiguratorException');
-        }
-        $dsn= $config->getDatabaseDsn();
-        $this->assertEqual('pgsql', $dsn['phptype']);
-        $dsn= $config->getDatabaseDsn('one');
-        $this->assertEqual('mysql', $dsn['phptype']);
-    }
-
-    public function testLoggerOutputters() {
-        $xml='<?xml version="1.0" encoding="UTF-8"?><application>
-                <logger>
-                    <outputters>
-                        <outputter name="file"    level="0" value="/wwwroot/htdocs/locknet7/log/locknet7.log" />
-                        <outputter name="stdout"  level="0" />
-                    </outputters>
-                </logger>
-            </application>';
-        $config= new XMLConfigurator($xml);
-        $this->assertEqual(2, sizeof($config->getLoggerOutputters()));
-        $xml='<?xml version="1.0" encoding="UTF-8"?><application><outputter name="stdout"  level="0" /></application>';
-        $config= new XMLConfigurator($xml);
-        $this->assertEqual(0, sizeof($config->getLoggerOutputters()));
-    }
-
-    public function testLoggerFormatter() {
-        $xml='<?xml version="1.0" encoding="UTF-8"?><application><logger><formatter>simple</formatter></logger></application>';
-        $config= new XMLConfigurator($xml);
-        $this->assertEqual('SimpleFormatter', $config->getLoggerFormatter());
-    }
-
-    public function testProperty() {
-       $xml='<?xml version="1.0" encoding="UTF-8"?><application>
-                <property name="one"    value="/wwwroot" />
-                <property name="two"    value="on" />
-                <property name="three"  value="1" />
-                <property name="four"   value="TRUE" />
-                <property name="five"   value="off" />
-                <property name="six"    value="0" />
-                <property name="seven"  value="false" />
-            </application>';
-        $config= new XMLConfigurator($xml);
-        $this->assertEqual('/wwwroot', $config->getProperty('one'));
-        $this->assertTrue($config->getProperty('two'));
-        $this->assertTrue($config->getProperty('three'));
-        $this->assertTrue($config->getProperty('four'));
-        $this->assertFalse($config->getProperty('five'));
-        $this->assertFalse($config->getProperty('six'));
-        $this->assertFalse($config->getProperty('seven'));
-        try {
-            $config->getProperty('foo');
-            $this->fail('ConfiguratorException should be thrown!');
-        } catch (Exception $cEx) {
-            $this->assertIsA($cEx, 'ConfiguratorException');
-        }
-    }
-
-}
-

Copied: trunk/test/application (from rev 199, trunk/test/dummy)

Copied: trunk/test/application/controllers (from rev 227, trunk/test/dummy/controllers)

Copied: trunk/test/application/dummy.xml (from rev 217, trunk/test/dummy/dummy.xml)

Copied: trunk/test/application/models/author.php (from rev 234, trunk/test/dummy/models/author.php)

Copied: trunk/test/application/models/book.php (from rev 234, trunk/test/dummy/models/book.php)

Deleted: trunk/test/application/models/todo.php
===================================================================
--- trunk/test/dummy/models/todo.php	2005-10-14 18:04:52 UTC (rev 199)
+++ trunk/test/application/models/todo.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,8 +0,0 @@
-<?php
-
-// $Id$    
-
-include_once('active/record/Base.php');
-
-class Todo extends ActiveRecordBase {   }
-

Copied: trunk/test/runner.php (from rev 227, trunk/test/testrunner.php)

Copied: trunk/test/test/action/controller/RoutingTest.php (from rev 228, trunk/test/RoutingTest.php)

Copied: trunk/test/test/active/record/DBOperationsTest.php (from rev 227, trunk/test/ARBaseBasicsTest.php)
===================================================================
--- trunk/test/ARBaseBasicsTest.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/test/active/record/DBOperationsTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -0,0 +1,73 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/author.php');
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
+
+/** Tests insert, update, save (insert/update), delete. */
+class DBOperationsTest extends UnitTestCase {
+
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB
+     */
+    public function __construct() {
+        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        $query='
+            CREATE TABLE authors (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            );
+        ';
+        sqlite_query(sqlite_open('test.db'), $query);
+    }
+
+    /** set up */
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
+    }
+    
+    /** tearDown */
+    public function tearDown() {
+        Registry::close();
+    }
+
+    /** <tt>save && delete test</tt> */
+    public function testSave() {
+        $item= new Author();
+        $item->name= 'Andrei Cristescu';
+        $this->assertEqual($item->save(), $item->id);
+        $this->assertEqual($item->delete(), 1);
+    }
+
+    /** <tt>save && delete test</tt> */
+    public function testDelete() {
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
+        $item->save();
+        $this->assertEqual($item->delete(), 1);
+        $this->assertEqual($item->delete(), 0);
+    }
+    
+    /** <tt>insert</tt> */
+    public function testInsert() {
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
+        $this->assertEqual($item->insert(), $item->id);
+        $item->delete();
+    }
+    /** <tt>update test</tt> */
+    public function testUpdate() {
+        $item = new Author();
+        $item->name = 'Andrei Cristescu';
+        $this->assertEqual($item->insert(), $item->id);
+        $item->email = 'cristescu at yahoo.com';
+        $this->assertEqual($item->update(), 1);
+        $this->assertEqual($item->delete(), 1);
+    }
+}

Copied: trunk/test/test/active/record/FindTest.php (from rev 227, trunk/test/ARBaseFindTest.php)
===================================================================
--- trunk/test/ARBaseFindTest.php	2005-10-20 18:54:26 UTC (rev 227)
+++ trunk/test/test/active/record/FindTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -0,0 +1,100 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/author.php');
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
+  
+/** Tests find */
+class FindTest extends UnitTestCase {
+  
+    /** our authors container */
+    private $authors= array();
+     
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB
+     */
+    public function __construct() {
+        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        $query='
+            CREATE TABLE authors (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            );
+        ';
+        sqlite_query(sqlite_open(TMP . 'test.db'), $query);
+     }
+  
+     /** set up this test case, we insert 3 fileds in DB table */
+     public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
+        $author= new Author();
+        $author->name= "Andrei Cristescu";
+        $author->email= "andrei.cristescu at foo-factory.info";
+        $this->authors[]= $author;
+        $author->insert();
+        $author= new Author();
+        $author->name= "Cristescu";
+        $this->authors[]= $author;
+        $author->insert();
+        $author= new Author();
+        $author->name= "Andrei";
+        $this->authors[]= $author;
+        $author->insert();
+    }
+
+    /** remove all the fields from DB, clean-up the Registry */
+    public function tearDown() {
+        foreach ($this->authors as $author) {
+            $author->delete();
+        }
+        Registry::close();
+    }
+
+    /** find all syntax. */
+    public function testFindAll() {
+        $this->assertEqual(Author::find()->count(), Author::find('all')->count());
+    }
+
+    /** id field is not selected, should be NULL */
+    public function testFindAllArrayInclude() {
+        $authors= Author::find('all', array('include'=>'name, email'));
+        foreach ($authors as $author) {
+            $this->assertNull($author->id);
+        }
+    }
+
+    /** select by condition */
+    public function testFindAllArrayCondition() {
+        $authors= Author::find('all', array('condition'=>'name="Andrei Cristescu"'));
+        $this->assertEqual($authors->count(), 1);
+        foreach ($authors as $author) {
+            $this->assertEqual('andrei.cristescu at foo-factory.info', $author->email);
+        }
+    }
+
+    /** limit syntax. */
+    public function testFindAllArrayLimit() {
+        $authors= Author::find('all', array('limit'=>2));
+        $this->assertEqual($authors->count(), 2);
+    }
+
+    /** order syntax. */
+    public function testFindAllArrayOrder() {
+        $authors= Author::find('all', array('order'=>'id DESC'));
+        $i=4; foreach ($authors as $author) {
+            $this->assertEqual(--$i, $author->id);
+        }
+    }
+
+    /** offset syntax. */
+    public function testFindAllArrayOffset() {
+        $authors= Author::find('all', array('offset'=>2));
+        $this->assertEqual($authors->count(), 1);
+    }
+}

Copied: trunk/test/test/active/record/associations/HasOneTest.php (from rev 228, trunk/test/ARBaseAssocHas_OneTest.php)
===================================================================
--- trunk/test/ARBaseAssocHas_OneTest.php	2005-10-21 18:35:26 UTC (rev 228)
+++ trunk/test/test/active/record/associations/HasOneTest.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -0,0 +1,71 @@
+<?php
+
+// $Id$
+    
+include_once('dummy/models/author.php');
+include_once('dummy/models/book.php');
+include_once('mock/MockConfigurator.php');
+include_once('logger/Logger.php');
+
+/** Test Has_One Association */
+class HasOneTest extends UnitTestCase {
+
+    /**
+     * Constructor Once/TestCase
+     * Prequsites for this TestCase to run: Create a sqlite DB with 2 tables and a foreign key.
+     */
+    public function __construct() {
+        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        $tbd= sqlite_open(TMP . 'test.db');
+        $query='
+            CREATE TABLE AUTHORS (
+                id INTEGER PRIMARY KEY,
+                name VARCHAR(100),
+                email VARCHAR(150)
+            )';
+        $ex= sqlite_query($tbd, $query);
+        $_query='    
+            CREATE TABLE BOOKS (
+                id INTEGER PRIMARY KEY,
+                title VARCHAR(100),
+                author_id INTEGER NOT NULL CONSTRAINT fk_author_id REFERENCES AUTHORS(id) ON DELETE CASCADE
+            )';
+        $exp= sqlite_query($tbd, $_query);
+    }
+
+    /** set up */
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+        ActiveRecordBase::close();
+        
+        $author= new Author();
+        $author->name= 'Andrei Cristescu';
+        $author->email= 'andrei at foocompany.com';
+        
+        $id= $author->save();
+        
+        $book = new Book();
+        $book->author_id= $id;
+        $book->title= 'The End is NEAR!';
+        $book->save();
+    }
+    
+    /** tearDown */
+    public function tearDown() {
+        Registry::close();
+    }
+
+    /** */
+    public function testHasOne() {
+        $books= Book::find();
+        foreach($books as $book) {
+            $this->assertIsA($book->author, 'Author');
+            $this->assertIsA($book, 'Book');
+        }
+        $this->assertEqual($book->author->name, 'Andrei Cristescu');
+        // TBD. This is not supported right now!
+        // $book->author->delete();
+        // $this->assertEqual(sizeof(Book::find()), 0);
+    }
+}

Copied: trunk/test/test/active/support/InflectorTest.php (from rev 195, trunk/test/InflectorTest.php)

Copied: trunk/test/test/configurator/XMLConfiguratorTest.php (from rev 226, trunk/test/XMLConfiguratorTest.php)

Copied: trunk/test/test/medick/CollectionTest.php (from rev 195, trunk/test/CollectionTest.php)

Copied: trunk/test/test/medick/RegistryTest.php (from rev 227, trunk/test/RegistryTest.php)

Deleted: trunk/test/testrunner.php
===================================================================
--- trunk/test/testrunner.php	2005-10-23 11:20:20 UTC (rev 234)
+++ trunk/test/testrunner.php	2005-10-23 13:28:19 UTC (rev 235)
@@ -1,43 +0,0 @@
-#!/wwwroot/bin/php -q
-<?php
-
-// $Id$
-
-// Script that runs all the *Test.php* files from the current folder.
-    
-$time_start = microtime(true);
-
-define('TOP_LOCATION', dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR);
-
-set_include_path( TOP_LOCATION . 'libs' . DIRECTORY_SEPARATOR . PATH_SEPARATOR .
-                  TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . 
-                  dirname(__FILE__) 
-                );
-
-error_reporting(E_ALL);
-set_time_limit(0);
-ini_set('display_errors', 1);
-
-include_once('medick/Object.php');
-include_once('medick/Exception.php');
-include_once('medick/Registry.php');
-include_once('medick/Collection.php');
-
-include_once('simpletest/web_tester.php');
-include_once('simpletest/unit_tester.php');
-include_once('simpletest/reporter.php');
-
-$test= new GroupTest('====== Medick Framework Unit Tests =====');
-
-$it = new DirectoryIterator(dirname(__FILE__));
-foreach($it as $file) {
-    if ($file->isDir()) continue;
-    if (preg_match("/Test.php/i", $file->getFileName())) $test->addTestFile($file->getFileName());
-}
-
-$test->run(new TextReporter());
-
-$time_end = microtime(true);
-echo "Done in " . ($time_end - $time_start) . " seconds\n";
-
-unlink('test.db');



From aurelian at berlios.de  Sun Oct 23 16:38:23 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 16:38:23 +0200
Subject: [Medick-svn] r236 - in trunk/test: . application mock test/active/record test/active/record/associations test/configurator tmp
Message-ID: <200510231438.j9NEcNaJ011670@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 16:38:23 +0200 (Sun, 23 Oct 2005)
New Revision: 236

Added:
   trunk/test/application/application.xml
   trunk/test/tmp/
   trunk/test/tmp/dummy.folder
Removed:
   trunk/test/application/dummy.xml
Modified:
   trunk/test/mock/MockConfigurator.php
   trunk/test/runner.php
   trunk/test/test/active/record/DBOperationsTest.php
   trunk/test/test/active/record/FindTest.php
   trunk/test/test/active/record/associations/HasOneTest.php
   trunk/test/test/configurator/XMLConfiguratorTest.php
Log:
 - [ test/* ] restructuration over.

Copied: trunk/test/application/application.xml (from rev 235, trunk/test/application/dummy.xml)

Deleted: trunk/test/application/dummy.xml
===================================================================
--- trunk/test/application/dummy.xml	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/application/dummy.xml	2005-10-23 14:38:23 UTC (rev 236)
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- $Id$  -->
-<application></application>
-

Modified: trunk/test/mock/MockConfigurator.php
===================================================================
--- trunk/test/mock/MockConfigurator.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/mock/MockConfigurator.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -17,7 +17,7 @@
     public function getProperty($name) {
         switch ($name) {
             case 'application_path':
-                return 'dummy' . DIRECTORY_SEPARATOR;
+                return 'application' . DIRECTORY_SEPARATOR;
             default:
                 throw new ConfiguratorException(__CLASS__ . ' Property `' . $name . '` not implemented!');
          }
@@ -26,6 +26,6 @@
      public function getDatabaseDsn($id=FALSE) {
          return array(
                'phptype'  => 'sqlite',
-               'database' => 'test.db');
+               'database' => TMP . 'test.db');
     }
 }

Modified: trunk/test/runner.php
===================================================================
--- trunk/test/runner.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/runner.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -3,15 +3,35 @@
 
 // $Id$
 
-// Script that runs all the *Test.php* files from the current folder.
-    
+// Script that runs all the *Test.php* files from the test folder.
+
+class DirectoryTreeIterator extends RecursiveIteratorIterator
+{
+    /** Construct from a path.
+     * @param $path directory to iterate
+     */
+    function __construct($path)
+    {
+        parent::__construct(
+            new RecursiveCachingIterator(
+                new RecursiveDirectoryIterator($path), CachingIterator::CALL_TOSTRING|CachingIterator::CATCH_GET_CHILD), 1);
+    }
+
+    /** Aggregates the inner iterator
+     */
+    function __call($func, $params)
+    {
+        return call_user_func_array(array($this->getSubIterator(), $func), $params);
+    }
+}
+
 $time_start = microtime(true);
 
 define('TOP_LOCATION', dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR);
+define('TMP', 'tmp' . DIRECTORY_SEPARATOR);
 
 set_include_path( TOP_LOCATION . 'libs' . DIRECTORY_SEPARATOR . PATH_SEPARATOR .
-                  TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . 
-                  dirname(__FILE__) 
+                  TOP_LOCATION . 'vendor' . DIRECTORY_SEPARATOR . PATH_SEPARATOR . dirname(__FILE__)
                 );
 
 error_reporting(E_ALL);
@@ -23,16 +43,18 @@
 include_once('medick/Registry.php');
 include_once('medick/Collection.php');
 
-include_once('simpletest/web_tester.php');
+// include_once('simpletest/web_tester.php');
 include_once('simpletest/unit_tester.php');
 include_once('simpletest/reporter.php');
 
 $test= new GroupTest('====== Medick Framework Unit Tests =====');
 
-$it = new DirectoryIterator(dirname(__FILE__));
-foreach($it as $file) {
-    if ($file->isDir()) continue;
-    if (preg_match("/Test.php/i", $file->getFileName())) $test->addTestFile($file->getFileName());
+foreach(new DirectoryTreeIterator(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR) as $entry)
+{
+    if ( (strpos($entry->getFilename(), 'Test.php')  !== FALSE) &&
+         (strpos($entry->getFilename(), 'Test.php.') === FALSE) ) {
+        $test->addTestFile($entry->getPathname());
+    }
 }
 
 $test->run(new TextReporter());
@@ -40,4 +62,5 @@
 $time_end = microtime(true);
 echo "Done in " . ($time_end - $time_start) . " seconds\n";
 
-unlink('test.db');
+ at unlink(TMP . 'test.db');
+

Modified: trunk/test/test/active/record/DBOperationsTest.php
===================================================================
--- trunk/test/test/active/record/DBOperationsTest.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/test/active/record/DBOperationsTest.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -2,7 +2,7 @@
 
 // $Id$
     
-include_once('dummy/models/author.php');
+include_once('application/models/author.php');
 include_once('mock/MockConfigurator.php');
 include_once('logger/Logger.php');
 
@@ -14,7 +14,7 @@
      * Prequsites for this TestCase to run: Create a sqlite DB
      */
     public function __construct() {
-        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        @unlink(TMP . 'test.db');
         $query='
             CREATE TABLE authors (
                 id INTEGER PRIMARY KEY,
@@ -22,7 +22,7 @@
                 email VARCHAR(150)
             );
         ';
-        sqlite_query(sqlite_open('test.db'), $query);
+        sqlite_query(sqlite_open(TMP . 'test.db'), $query);
     }
 
     /** set up */

Modified: trunk/test/test/active/record/FindTest.php
===================================================================
--- trunk/test/test/active/record/FindTest.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/test/active/record/FindTest.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -2,7 +2,7 @@
 
 // $Id$
     
-include_once('dummy/models/author.php');
+include_once('application/models/author.php');
 include_once('mock/MockConfigurator.php');
 include_once('logger/Logger.php');
   
@@ -17,7 +17,7 @@
      * Prequsites for this TestCase to run: Create a sqlite DB
      */
     public function __construct() {
-        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        @unlink(TMP . 'test.db');
         $query='
             CREATE TABLE authors (
                 id INTEGER PRIMARY KEY,

Modified: trunk/test/test/active/record/associations/HasOneTest.php
===================================================================
--- trunk/test/test/active/record/associations/HasOneTest.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/test/active/record/associations/HasOneTest.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -2,8 +2,8 @@
 
 // $Id$
     
-include_once('dummy/models/author.php');
-include_once('dummy/models/book.php');
+include_once('application/models/author.php');
+include_once('application/models/book.php');
 include_once('mock/MockConfigurator.php');
 include_once('logger/Logger.php');
 
@@ -15,7 +15,7 @@
      * Prequsites for this TestCase to run: Create a sqlite DB with 2 tables and a foreign key.
      */
     public function __construct() {
-        if (is_file(TMP . 'test.db')) unlink(TMP . 'test.db');
+        @unlink(TMP . 'test.db');
         $tbd= sqlite_open(TMP . 'test.db');
         $query='
             CREATE TABLE AUTHORS (

Modified: trunk/test/test/configurator/XMLConfiguratorTest.php
===================================================================
--- trunk/test/test/configurator/XMLConfiguratorTest.php	2005-10-23 13:28:19 UTC (rev 235)
+++ trunk/test/test/configurator/XMLConfiguratorTest.php	2005-10-23 14:38:23 UTC (rev 236)
@@ -7,7 +7,7 @@
 class XMLConfiguratorTest extends UnitTestCase {
 
     public function testCreation() {
-        $this->assertNotNull(new XMLConfigurator('dummy/dummy.xml'));
+        $this->assertNotNull(new XMLConfigurator('application/application.xml'));
         $this->assertNotNull(new XMLConfigurator('<?xml version="1.0" encoding="UTF-8"?><application></application>'));
         try {
             new XMLConfigurator('non_existant_file.xml');

Added: trunk/test/tmp/dummy.folder
===================================================================



From aurelian at berlios.de  Sun Oct 23 16:41:40 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sun, 23 Oct 2005 16:41:40 +0200
Subject: [Medick-svn] r237 - trunk/test
Message-ID: <200510231441.j9NEfeuY011963@sheep.berlios.de>

Author: aurelian
Date: 2005-10-23 16:41:39 +0200 (Sun, 23 Oct 2005)
New Revision: 237

Modified:
   trunk/test/runner.php
Log:
 - [ test/* ] runner, better benchmark

Modified: trunk/test/runner.php
===================================================================
--- trunk/test/runner.php	2005-10-23 14:38:23 UTC (rev 236)
+++ trunk/test/runner.php	2005-10-23 14:41:39 UTC (rev 237)
@@ -5,26 +5,6 @@
 
 // Script that runs all the *Test.php* files from the test folder.
 
-class DirectoryTreeIterator extends RecursiveIteratorIterator
-{
-    /** Construct from a path.
-     * @param $path directory to iterate
-     */
-    function __construct($path)
-    {
-        parent::__construct(
-            new RecursiveCachingIterator(
-                new RecursiveDirectoryIterator($path), CachingIterator::CALL_TOSTRING|CachingIterator::CATCH_GET_CHILD), 1);
-    }
-
-    /** Aggregates the inner iterator
-     */
-    function __call($func, $params)
-    {
-        return call_user_func_array(array($this->getSubIterator(), $func), $params);
-    }
-}
-
 $time_start = microtime(true);
 
 define('TOP_LOCATION', dirname(__FILE__) . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR);
@@ -49,6 +29,26 @@
 
 $test= new GroupTest('====== Medick Framework Unit Tests =====');
 
+class DirectoryTreeIterator extends RecursiveIteratorIterator
+{
+    /** Construct from a path.
+     * @param $path directory to iterate
+     */
+    function __construct($path)
+    {
+        parent::__construct(
+            new RecursiveCachingIterator(
+                new RecursiveDirectoryIterator($path), CachingIterator::CALL_TOSTRING|CachingIterator::CATCH_GET_CHILD), 1);
+    }
+
+    /** Aggregates the inner iterator
+     */
+    function __call($func, $params)
+    {
+        return call_user_func_array(array($this->getSubIterator(), $func), $params);
+    }
+}
+
 foreach(new DirectoryTreeIterator(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR) as $entry)
 {
     if ( (strpos($entry->getFilename(), 'Test.php')  !== FALSE) &&



From aurelian at berlios.de  Mon Oct 24 07:08:57 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Mon, 24 Oct 2005 07:08:57 +0200
Subject: [Medick-svn] r238 - trunk/libs/configurator
Message-ID: <200510240508.j9O58v7V010723@sheep.berlios.de>

Author: aurelian
Date: 2005-10-24 07:08:52 +0200 (Mon, 24 Oct 2005)
New Revision: 238

Added:
   trunk/libs/configurator/INIConfigurator.php
Log:
 - [ configurator/INIConfigurator ] initial import.

Added: trunk/libs/configurator/INIConfigurator.php
===================================================================
--- trunk/libs/configurator/INIConfigurator.php	2005-10-23 14:41:39 UTC (rev 237)
+++ trunk/libs/configurator/INIConfigurator.php	2005-10-24 05:08:52 UTC (rev 238)
@@ -0,0 +1,80 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice,
+//   this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation
+//   and/or other materials provided with the distribution.
+//   * Neither the name of locknet.ro nor the names of its contributors may
+//   be used to endorse or promote products derived from this software without
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// $Id$
+//
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('configurator/IConfigurator.php');
+
+/**
+ * ini file-based Configurator.
+ * @package locknet7.config
+ */
+
+class INIConfigurator extends Object implements IConfigurator {
+
+    private $handler;
+    
+    public function __construct($file) {
+      $this->handler= parse_ini_file($file, TRUE);
+    }
+
+    public function getLoggerOutputters() {
+        $ret= array();
+        $ret[0]=$this->handler['logger.file.outputter'];
+        $ret[0]['name'] = 'file';
+        $ret[1]=$this->handler['logger.mail.outputter'];
+        $ret[1]['name']= 'mail';
+        $ret[2]=$this->handler['logger.stdout.outputter'];
+        $ret[2]['name']= 'stdout';
+        $ao = new ArrayObject($ret);
+        return $ao->getIterator();
+    }
+    
+    public function getLoggerFormatter() {
+        return ucfirst($this->handler['logger']['formatter']) . 'Formatter';
+    }
+
+    public function getProperty($name) {
+        if (isset($this->handler['properties'][$name])) {
+            return $this->handler['properties'][$name];
+        } else {
+            throw new Exception('Property: ' . $name . ' not found!');
+        }
+    }
+
+    public function getDatabaseDsn($id = FALSE) {
+        if (!$id) $id= $this->handler['database']['default'];
+        return $this->handler['database.' . $id];
+    }
+
+}
+


Property changes on: trunk/libs/configurator/INIConfigurator.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Tue Oct 25 21:53:28 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Tue, 25 Oct 2005 21:53:28 +0200
Subject: [Medick-svn] r239 - in trunk: config libs/action/controller libs/action/controller/templates libs/action/view libs/medick
Message-ID: <200510251953.j9PJrSmY000465@sheep.berlios.de>

Author: aurelian
Date: 2005-10-25 21:53:21 +0200 (Tue, 25 Oct 2005)
New Revision: 239

Added:
   trunk/libs/action/controller/templates/
   trunk/libs/action/controller/templates/error.phtml
   trunk/libs/medick/Error.php
   trunk/libs/medick/ErrorHandler.php
Modified:
   trunk/config/application.bootstrap.php
   trunk/libs/action/controller/Base.php
   trunk/libs/action/view/Base.php
   trunk/libs/medick/Dispatcher.php
   trunk/libs/medick/Exception.php
Log:
 added Error Handler

Modified: trunk/config/application.bootstrap.php
===================================================================
--- trunk/config/application.bootstrap.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/config/application.bootstrap.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -63,9 +63,14 @@
 // load core classes.
 include_once('medick/Object.php');
 include_once('medick/Exception.php');
+include_once('medick/Error.php');
+include_once('medick/ErrorHandler.php');
 include_once('medick/Registry.php');
 include_once('medick/Dispatcher.php');
 
+// set-up the error handler:
+set_error_handler(array(new ErrorHandler(), 'raiseError'));
+
 // hook a Configurator into Registry.
 include_once('configurator/XMLConfigurator.php');
 Registry::put(new XMLConfigurator(TOP_LOCATION . 'config' . DIRECTORY_SEPARATOR . APP_NAME . '.xml'), '__configurator');

Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/action/controller/Base.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -32,14 +32,11 @@
 // ///////////////////////////////////////////////////////////////////////////////
 // }}}
 
-/**
- * @package locknet7.action.controller
- */
-    
 include_once('action/controller/Injector.php');
 include_once('action/view/Base.php');
  
 /**
+ * @package locknet7.action.controller
  * Base Class For Our Application Controllers
  */
 class ActionControllerBase extends Object {
@@ -93,6 +90,24 @@
     private $config;
     
     /**
+     * Process this Request
+     *
+     * @param Request $request
+     * @param Response $response
+     * @param Exception $exception
+     * @return Response
+     */
+    public static function process_with_exception(Request $request, Response $response, Exception $exception) {
+        $template = ActionViewBase::factory();
+        $template->error= $exception;
+        $text= $template->render_file(TOP_LOCATION . '/libs/action/controller/templates/error.phtml');
+        $status = Response::SC_INTERNAL_SERVER_ERROR;
+        $response->setStatus($status);
+        $response->setContent($text);
+        return $response;
+    }
+    
+    /**
      * Will process the request returning the resulting response
      * @param Request request, the request
      * @param Response response, the response

Added: trunk/libs/action/controller/templates/error.phtml
===================================================================
--- trunk/libs/action/controller/templates/error.phtml	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/action/controller/templates/error.phtml	2005-10-25 19:53:21 UTC (rev 239)
@@ -0,0 +1,111 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
+<!-- $Id$ -->
+    <head>
+        <title>Server Error!</title>
+        
+        <script language="javascript" type="text/javascript">
+        
+        function showSource() {
+            document.getElementById("source").style.display = "block";
+            return FALSE;
+        }
+        
+        function hideSource() {
+            document.getElementById("source").style.display = "none";
+            return FALSE;
+        }        
+        
+        </script>
+        
+        <style type="text/css" media="all">
+        
+            body {
+              font-size: .9em;
+              font-family: "Lucida Grande", Helvetica, Tahoma, sans-serif;
+            }        
+        
+            a { text-decoration: none; }
+            
+            h1 {
+                text-align:center;
+            }
+            
+            .container {
+                border:1px solid red;
+            }
+            
+            .source {
+                background-color: #FFFFCC; 
+                color: #666666;
+            }
+            
+        </style>
+        
+    </head>
+    
+    <body>
+       <div class="container">
+       <h1>Cannot process your request!</h1>
+           <h2><strong>Message: </strong><?=$error->getMessage();?></h2>
+           <strong>in</strong> (<?=$error->getLine();?>)
+           <a href="javascript:void(0);" onclick="return showSource();"><?=$error->getFile();?></a>
+           
+           <hr noshade="noshade" />
+           Backtrace:<br />
+           <pre><?=$error->getTraceAsString();?></pre>
+           <hr noshade="noshade" />
+           
+           <span class="showOrHideDetailsButton">(
+               <a href="javascript:void(0);" onclick="return showSource();">show source</a> |
+               <a href="javascript:void(0);" onclick="return hideSource();">hide source</a> )
+           </span>
+           
+           <hr noshade="noshade" />
+           
+           <? 
+            $data = highlight_string(file_get_contents($error->getFile()), TRUE);
+            $data = explode('<br />', $data);
+            $line = $error->getLine();
+            $end  = $line+10;
+            $start = $line-10;
+
+            ?>
+            <table cellspacing="0" cellpadding="0" id="source" style="display:none;">
+            <tr><td style="vertical-align: top;">
+                <code class="source">
+            
+            <? 
+              for ($x = $start; $x <= $end; $x++) {
+                if ($line==$x) {
+                    echo '<span style="background-color: red; color: white;">';
+                } else { 
+                    echo ' ';
+                }
+                echo str_repeat('&nbsp;', (strlen($end) - strlen($x)) + 1);
+                echo $x;
+                echo '&nbsp;';
+                if ($line == $x) {
+                    echo '</span>';
+                } else { 
+                    echo '';
+                }
+                echo '<br />';
+            }
+            ?>
+            </code>
+            </td><td style="vertical-align: top;"><code>
+            
+            <? while ($start <= $end) { ?>
+            &nbsp;<?=$data[$start - 1];?><br />
+            <? ++$start; ?>
+            <? } ?>
+            
+            </code></td>
+            </tr></table>        
+
+        </div>
+    </body>
+
+</html>


Property changes on: trunk/libs/action/controller/templates/error.phtml
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/action/view/Base.php
===================================================================
--- trunk/libs/action/view/Base.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/action/view/Base.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -84,7 +84,7 @@
      * @throws Exception if the file is wrong.
      */
 	public function render($file) {
-		if (!is_file($file)) throw new Exception ('Cannot Find Template: ' . $file);
+		if (!is_file($file)) throw new MedickException ('Cannot Find Template: ' . $file);
 		if (!empty($this->vars)) {
             if(!get_magic_quotes_gpc()) $this->vars = self::stripslashes_deep($this->vars);
             extract($this->vars,EXTR_SKIP);

Modified: trunk/libs/medick/Dispatcher.php
===================================================================
--- trunk/libs/medick/Dispatcher.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/medick/Dispatcher.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -47,7 +47,6 @@
      * @return void.
      */
     public static function dispatch() {
-
         if (php_sapi_name() == 'cli') {
             $request  = new CLIRequest();
             $response = new CLIResponse();
@@ -57,16 +56,9 @@
         }
         try {
             ActionControllerRouting::recognize($request)->process($request, $response)->dump();
-        } catch (MedickException $mEx) {
-            Registry::get('__logger')->warn($mEx->getMessage());
-            echo '<div style="border:1px solid red"><h1 style="text-align:center">Cannot process your request due to a MedickException</h1>';
-            echo '<span style="color:red">' . $mEx->getMessage() . '</span>';
-            echo '<pre>' . $mEx->getTraceAsString() . '</pre><br /><h3>Exception Type: ' . $mEx->getType() . '</h3></div>';
-        } catch (Exception $e) {
-            Registry::get('__logger')->warn($e->getMessage());
-            echo '<div style="border:1px solid red"><h1 style="text-align:center">Internal Server Error.</h1>';
-            echo '<span style="color:red">' . $e->getMessage() . '</span>';
-            echo '<pre>' . $e->getTraceAsString() . '</pre></div>';
+        } catch (Exception $ex) {
+            ActionControllerBase::process_with_exception($request, $response, $ex)->dump();
+            Registry::get('__logger')->warn($ex->getMessage());
         }
     }
 }

Added: trunk/libs/medick/Error.php
===================================================================
--- trunk/libs/medick/Error.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/medick/Error.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -0,0 +1,48 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * Error.
+ * @package locknet7.medick
+ */
+class Error extends MedickException {
+
+    public function __construct($message, $code, $file, $line, $trace) {
+        parent::__construct($message, $code);
+        $this->file  = $file;
+        $this->line  = $line;
+        $this->trace = $trace;
+    }
+
+}


Property changes on: trunk/libs/medick/Error.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/libs/medick/ErrorHandler.php
===================================================================
--- trunk/libs/medick/ErrorHandler.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/medick/ErrorHandler.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -0,0 +1,69 @@
+<?php
+// {{{ License
+// ///////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+// ///////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.medick
+ * The Medick Error Handler.
+ */
+class ErrorHandler extends Object {
+
+    /**
+     * Setup this ErrorHandler
+     */
+    public function __construct() {
+        ini_set('docref_root', null);
+        ini_set('docref_ext', null);
+    }
+    
+    /**
+     * @param int $errno
+     * @param string $errstr
+     * @param string $errfile
+     * @param int $errline
+     * @return void
+     * @throw Error
+     */
+    function raiseError($errno, $errstr, $errfile, $errline) {
+        if (0 == error_reporting()) return;
+            $trace = debug_backtrace();
+            array_shift($trace);
+            throw new Error(
+              $errstr,
+              $errno,
+              $errfile,
+              $errline,
+              $trace
+            );
+    }
+}


Property changes on: trunk/libs/medick/ErrorHandler.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/medick/Exception.php
===================================================================
--- trunk/libs/medick/Exception.php	2005-10-24 05:08:52 UTC (rev 238)
+++ trunk/libs/medick/Exception.php	2005-10-25 19:53:21 UTC (rev 239)
@@ -34,11 +34,18 @@
 
 
 /**
+ * @package locknet7.medick
  * Our base Exception Class
- * @package locknet7.medick
  */
 class MedickException extends Exception {
 
-    public function getType() { return __CLASS__; }
+    /**
+     * Create a new MedickException
+     * @param string the message.
+     * @param int code.
+     */
+    public function __construct($message, $code = '0') {
+        parent::__construct($message, $code);
+    }
 
 }



From aurelian at berlios.de  Tue Oct 25 22:29:24 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Tue, 25 Oct 2005 22:29:24 +0200
Subject: [Medick-svn] r240 - in trunk/libs: action/controller/templates active/record medick
Message-ID: <200510252029.j9PKTOaK004621@sheep.berlios.de>

Author: aurelian
Date: 2005-10-25 22:29:23 +0200 (Tue, 25 Oct 2005)
New Revision: 240

Modified:
   trunk/libs/action/controller/templates/error.phtml
   trunk/libs/active/record/RowsAggregate.php
   trunk/libs/medick/ErrorHandler.php
Log:
 - minor fixes in ErrorHandler & RowsAggregate added magick __call method

Modified: trunk/libs/action/controller/templates/error.phtml
===================================================================
--- trunk/libs/action/controller/templates/error.phtml	2005-10-25 19:53:21 UTC (rev 239)
+++ trunk/libs/action/controller/templates/error.phtml	2005-10-25 20:29:23 UTC (rev 240)
@@ -22,6 +22,9 @@
         <style type="text/css" media="all">
         
             body {
+              margin: 3px;
+              padding: 3px;
+              border:1px solid red;
               font-size: .9em;
               font-family: "Lucida Grande", Helvetica, Tahoma, sans-serif;
             }        
@@ -33,7 +36,8 @@
             }
             
             .container {
-                border:1px solid red;
+              margin: 3px;
+              padding: 3px; 
             }
             
             .source {
@@ -48,6 +52,7 @@
     <body>
        <div class="container">
        <h1>Cannot process your request!</h1>
+           <h2><?=get_class($error);?></h2>
            <h2><strong>Message: </strong><?=$error->getMessage();?></h2>
            <strong>in</strong> (<?=$error->getLine();?>)
            <a href="javascript:void(0);" onclick="return showSource();"><?=$error->getFile();?></a>
@@ -67,8 +72,10 @@
            <? 
             $data = highlight_string(file_get_contents($error->getFile()), TRUE);
             $data = explode('<br />', $data);
+            $lines= count($data);
             $line = $error->getLine();
             $end  = $line+10;
+            if ($end > $lines) $end = $lines;
             $start = $line-10;
 
             ?>

Modified: trunk/libs/active/record/RowsAggregate.php
===================================================================
--- trunk/libs/active/record/RowsAggregate.php	2005-10-25 19:53:21 UTC (rev 239)
+++ trunk/libs/active/record/RowsAggregate.php	2005-10-25 20:29:23 UTC (rev 240)
@@ -33,6 +33,7 @@
 // }}}
 
 /**
+ * Container for FiedsAggregate Objects
  * @package locknet7.active.record
  */
 class RowsAggregate extends Object implements IteratorAggregate {
@@ -75,19 +76,18 @@
     }
     
     /**
-     * Returns an array representation of this object
-     * @return array
-     */
-    public function toArray() {
-        return iterator_to_array($this->getIterator());
-    }
-    
-    /**
+     * It gets the offset by his index.
      * @param index
      * @return
      */
     public function offsetGet($index) {
         return $this->container->offsetGet($index);
     }
+
+    /**
+     * Magick php5 __call
+     */
+    public function __call($method, $arguments) {
+        trigger_error(sprintf('Call to undefined method: %s->%s(%s).', get_class($this), $method,$arguments), E_USER_ERROR);
+    }
 }
-

Modified: trunk/libs/medick/ErrorHandler.php
===================================================================
--- trunk/libs/medick/ErrorHandler.php	2005-10-25 19:53:21 UTC (rev 239)
+++ trunk/libs/medick/ErrorHandler.php	2005-10-25 20:29:23 UTC (rev 240)
@@ -51,19 +51,12 @@
      * @param string $errstr
      * @param string $errfile
      * @param int $errline
-     * @return void
      * @throw Error
      */
     function raiseError($errno, $errstr, $errfile, $errline) {
         if (0 == error_reporting()) return;
-            $trace = debug_backtrace();
-            array_shift($trace);
-            throw new Error(
-              $errstr,
-              $errno,
-              $errfile,
-              $errline,
-              $trace
-            );
+        $trace = debug_backtrace();
+        array_shift($trace);
+        throw new Error( $errstr, $errno, $errfile, $errline, $trace );
     }
 }



From aurelian at berlios.de  Tue Oct 25 22:31:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Tue, 25 Oct 2005 22:31:39 +0200
Subject: [Medick-svn] r241 - trunk
Message-ID: <200510252031.j9PKVdKV004824@sheep.berlios.de>

Author: aurelian
Date: 2005-10-25 22:31:38 +0200 (Tue, 25 Oct 2005)
New Revision: 241

Modified:
   trunk/CHANGELOG
Log:
 CHANGELOG: updated.

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2005-10-25 20:29:23 UTC (rev 240)
+++ trunk/CHANGELOG	2005-10-25 20:31:38 UTC (rev 241)
@@ -4,6 +4,9 @@
 
 0.0.3(*)
     - Unit test ActiveRecordBase (*)
+    - Minor code clean-up in Logger and XMLConfigurator => better testing.
+    - ActiveRecordBase implemented has_and_belongs_to_many association (read-only)
+    - Custom ErrorHandler
 
 0.0.2 (14.Oct.2005)
     - initial import of Session



From aurelian at berlios.de  Sat Oct 29 11:54:15 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 11:54:15 +0200
Subject: [Medick-svn] r242 - in trunk: libs/action/controller libs/action/controller/templates libs/active/record libs/medick libs/medick/io test test/test/active/record
Message-ID: <200510290954.j9T9sFaX019188@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 11:54:10 +0200 (Sat, 29 Oct 2005)
New Revision: 242

Added:
   trunk/libs/action/controller/InjectorException.php
   trunk/libs/active/record/RecordNotFoundException.php
   trunk/libs/medick/io/
   trunk/libs/medick/io/FileNotFoundException.php
   trunk/libs/medick/io/Folder.php
   trunk/libs/medick/io/IOException.php
Modified:
   trunk/libs/action/controller/Base.php
   trunk/libs/action/controller/Injector.php
   trunk/libs/action/controller/templates/error.phtml
   trunk/libs/active/record/Base.php
   trunk/test/runner.php
   trunk/test/test/active/record/DBOperationsTest.php
Log:
 -> added more exceptions: IO, FileNotFound, RecordNotFound and Injector
 -> fix broken behavior when an empty result set was returned from ARBase::__find() method
 -> fix broken php 5.0 test runner (thanks Andrei)
 -> initial import of Folder class


Modified: trunk/libs/action/controller/Base.php
===================================================================
--- trunk/libs/action/controller/Base.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/action/controller/Base.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -343,13 +343,12 @@
      * TODO: can we hook a Registry here?
      */
     private function add_models() {
-        if (isset($this->model)) {
-            $this->logger->debug("We have Models...");
-            foreach ($this->model AS $model) {
+        if (isset($this->model) && is_array($this->model)) {
+            $this->logger->debug('We have Models...');
+            foreach ($this->model as $model) {
                 $this->logger->debug('Injecting Model:: ' . $model);
                 Injector::inject($model);
             }
-            Injector::prepareARBase();
         }
     }
     

Modified: trunk/libs/action/controller/Injector.php
===================================================================
--- trunk/libs/action/controller/Injector.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/action/controller/Injector.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -33,6 +33,8 @@
 // }}}
 
 include_once('active/record/Base.php');
+include_once('medick/io/FileNotFoundException.php');
+include_once('action/controller/InjectorException.php');
 
 /** 
  * Model Injector.
@@ -46,33 +48,30 @@
      * Tasks:
      * 1) include the model file
      * 2) investigate the Model class
-     * 3) set ActiveRecordBase::$__klass, aka the table name.
-     * @TODO: can we hook a Registry here?
+     * @throws InjectorException
      */
     public static function inject($model) {
-        $logger = Registry::get('__logger');
-        $model_location = Registry::get('__configurator')->getProperty('application_path') . 
+        $model_location = Registry::get('__configurator')->getProperty('application_path') .
             DIRECTORY_SEPARATOR . 'models' . DIRECTORY_SEPARATOR . $model . '.php';
+         
+        $logger = Registry::get('__logger');
         $logger->debug('Model Location:: ' . $model_location);
-        // FIXME: a custom error.
-        if (!is_file($model_location)) throw new MedickException ('No such file or directory!');
-        
-        include_once($model_location);
-
-        $model_name = ucfirst($model);
-        
-        $logger->debug('Model Name:: ' .$model_name);
-        
-        $model_object = new ReflectionClass($model_name);
-
+        $logger->debug('Model Name:: ' . ucfirst($model));
+        if(!@file_exists($model_location) ) {
+            throw new FileNotFoundException('Cannot load your model: `' . $model .'`, no such file in: `' . $model_location . '`');
+        } else {
+            include_once($model_location);
+        }
+          
+        $model_object = new ReflectionClass(ucfirst($model));
         if ($model_object->getParentClass()->name != 'ActiveRecordBase') {
-            throw new MedickException ('Wrong Definition of your Model, ' . $model_name . ' must extend ActiveRecordBase object!');
+            throw new InjectorException ('Wrong Definition of your Model, `' . $model_name . '` must extend ActiveRecordBase object!');
         }
-        $logger->debug('Table:: ' .$model);
-        ActiveRecordBase::setTable($model);
     }
-
-    /** prepare static members for our model */
+  
+    /** prepare static members for our model
+     * @[Deprecated]
+     */
     public static function prepareARBase() {
         return ActiveRecordBase::establish_connection();
     }

Added: trunk/libs/action/controller/InjectorException.php
===================================================================
--- trunk/libs/action/controller/InjectorException.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/action/controller/InjectorException.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -0,0 +1,40 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.action.controller
+ */
+
+class InjectorException extends MedickException { }
+ 


Property changes on: trunk/libs/action/controller/InjectorException.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/libs/action/controller/templates/error.phtml
===================================================================
--- trunk/libs/action/controller/templates/error.phtml	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/action/controller/templates/error.phtml	2005-10-29 09:54:10 UTC (rev 242)
@@ -77,7 +77,7 @@
             $end  = $line+10;
             if ($end > $lines) $end = $lines;
             $start = $line-10;
-
+            if ( $start < 0 ) $start = 1;
             ?>
             <table cellspacing="0" cellpadding="0" id="source" style="display:none;">
             <tr><td style="vertical-align: top;">

Modified: trunk/libs/active/record/Base.php
===================================================================
--- trunk/libs/active/record/Base.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/active/record/Base.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -32,14 +32,16 @@
 // ///////////////////////////////////////////////////////////////////////////////
 // }}}
 
+// ActiveRecord dependencies.
 include_once('active/record/FieldsAggregate.php');
 include_once('active/record/RowsAggregate.php');
 include_once('active/record/QueryBuilder.php');
-include_once('active/record/ActiveRecordException.php');
 include_once('active/support/Inflector.php');
-
 include_once('active/record/Association.php');
-
+// Errors and Exceptions.
+include_once('active/record/ActiveRecordException.php');
+include_once('active/record/RecordNotFoundException.php');
+// 3-rd party.
 include_once('creole/Creole.php');
 
 /**
@@ -346,12 +348,17 @@
     // }}}
 
     // {{{ find monster
+    /**
+     *
+     * @throws ActiveRecordException if a requested case is not yet implemented (or invalid)
+     * @throws RecordNotFoundException no record responded to this method
+     */
     public static final function __find($params= array()) {
         $numargs = sizeof($params);
         if($numargs == 0) return self::__find(array('all'));
+        self::establish_connection();
 
-        // $class = new ReflectionClass(Inflector::singularize(ucfirst(self::$table_name)));
-        $_klazz = Inflector::singularize(ucfirst(self::$table_name));
+        $class = new ReflectionClass(Inflector::singularize(ucfirst(self::$table_name)));
         $query = new QuerryBuilder(self::$table_name);
 
         if ( $params[0] == 'all' && $numargs == 1 ) {
@@ -361,7 +368,6 @@
         } elseif ( is_numeric($params[0])) {
             // we expect only one row!
             // we need the pk name.
-            self::establish_connection();
             $pk_name = self::$conn->getDatabaseInfo()->getTable(self::$table_name)->getPrimaryKey()->getName();
             if ( $numargs == 1 ) {
                 $query->add('condition', $pk_name . '=?');
@@ -374,7 +380,10 @@
             $rs   = $stmt->executeQuery();  
             if ($rs->getRecordCount() == 1) {
                 $rs->next();
-                return new $_klazz($rs->getRow());
+                return $class->newInstance($rs->getRow());
+            } elseif ($rs->getRecordCount() == 0) {
+                throw new RecordNotFoundException(
+                    'Couldn\'t find a `' . Inflector::singularize(ucfirst(self::$table_name)) . '` with ID=' . $params[0]);
             }
         } elseif(is_array($params[0])) {
             $query->addArray($params[0]);
@@ -387,17 +396,25 @@
         if ($limit = $query->getLimit())   $stmt->setLimit($limit);
         if ($offset = $query->getOffset()) $stmt->setOffset($offset);
         $rs = $stmt->executeQuery();
+        if ($rs->getRecordCount() == 0) {
+            throw new RecordNotFoundException('Couldn\'t find a ' . Inflector::singularize(ucfirst(self::$table_name)));
+        }
         // build a list with objects of this type
         $results = new RowsAggregate();
         while ($rs->next()) {
-            // $results->add($class->newInstance($rs->getRow()));
-            $results->add(new $_klazz($rs->getRow()));
+            $results->add($class->newInstance($rs->getRow()));
         }
         Registry::get('__logger')->debug('Performing sql query: ' . self::$conn->lastQuery);
         return $results;
     }
     // }}}
 
+    /**
+     * Sets the current table name.
+     *
+     * The name is pluralized and to lower case
+     * @param string table name
+     */
     public static function setTable($table) {
         self::$table_name = Inflector::pluralize(strtolower($table));
     }

Added: trunk/libs/active/record/RecordNotFoundException.php
===================================================================
--- trunk/libs/active/record/RecordNotFoundException.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/active/record/RecordNotFoundException.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -0,0 +1,40 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.active.record
+ */
+
+class RecordNotFoundException extends ActiveRecordException { }
+


Property changes on: trunk/libs/active/record/RecordNotFoundException.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/libs/medick/io/FileNotFoundException.php
===================================================================
--- trunk/libs/medick/io/FileNotFoundException.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/medick/io/FileNotFoundException.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -0,0 +1,43 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+include_once('medick/io/IOException.php');
+
+/**
+ * Indicates that a file could not be found.
+ * @package locknet7.medick.io
+ */
+
+class FileNotFoundException extends IOException { }
+ 


Property changes on: trunk/libs/medick/io/FileNotFoundException.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/libs/medick/io/Folder.php
===================================================================
--- trunk/libs/medick/io/Folder.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/medick/io/Folder.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -0,0 +1,72 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * A Folder class.
+ * @package locknet7.io
+ */
+
+class Folder extends Object {
+
+    public static function recursiveFindRelative( $baseDir, $subDir, $suffix ) {
+        $returnFiles = array();
+        $dir = $baseDir;
+        if ( $subDir != "" ) {
+            if ( $dir != '' ) {
+                $dir .= "/" . $subDir;
+            } else {
+                $dir .= $subDir;
+            }
+        }
+        if ( $handle = @opendir( $dir ) ) {
+            while ( ( $file = readdir( $handle ) ) !== false ) {
+                if ( ( $file == "." ) || ( $file == ".." ) ) {
+                    continue;
+                }
+                if ( is_dir( $dir . '/' . $file ) ) {
+                    if ( $file[0] != "." ) {
+                        $files = Folder::recursiveFindRelative( $baseDir, $subDir . '/' . $file, $suffix );
+                        $returnFiles = array_merge( $files, $returnFiles );
+                    }
+                } else {
+                    if ( preg_match( "/$suffix$/", $file ) ) {
+                        $returnFiles[] = $subDir . '/' . $file;
+                    }
+                }
+            }
+            @closedir( $handle );
+        }
+        return $returnFiles;
+    }
+}


Property changes on: trunk/libs/medick/io/Folder.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/libs/medick/io/IOException.php
===================================================================
--- trunk/libs/medick/io/IOException.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/libs/medick/io/IOException.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -0,0 +1,40 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.medick.io
+ */
+
+class IOException extends MedickException { }
+


Property changes on: trunk/libs/medick/io/IOException.php
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/test/runner.php
===================================================================
--- trunk/test/runner.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/test/runner.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -22,45 +22,24 @@
 include_once('medick/Exception.php');
 include_once('medick/Registry.php');
 include_once('medick/Collection.php');
+include_once('medick/io/Folder.php');
 
+
 // include_once('simpletest/web_tester.php');
 include_once('simpletest/unit_tester.php');
 include_once('simpletest/reporter.php');
 
+
 $test= new GroupTest('====== Medick Framework Unit Tests =====');
 
-class DirectoryTreeIterator extends RecursiveIteratorIterator
-{
-    /** Construct from a path.
-     * @param $path directory to iterate
-     */
-    function __construct($path)
-    {
-        parent::__construct(
-            new RecursiveCachingIterator(
-                new RecursiveDirectoryIterator($path), CachingIterator::CALL_TOSTRING|CachingIterator::CATCH_GET_CHILD), 1);
-    }
-
-    /** Aggregates the inner iterator
-     */
-    function __call($func, $params)
-    {
-        return call_user_func_array(array($this->getSubIterator(), $func), $params);
-    }
+$test_files = Folder::recursiveFindRelative('.', 'test', 'Test.php');
+foreach($test_files as $file) {
+    $test->addTestFile($file);
 }
 
-foreach(new DirectoryTreeIterator(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR) as $entry)
-{
-    if ( (strpos($entry->getFilename(), 'Test.php')  !== FALSE) &&
-         (strpos($entry->getFilename(), 'Test.php.') === FALSE) ) {
-        $test->addTestFile($entry->getPathname());
-    }
-}
-
 $test->run(new TextReporter());
 
 $time_end = microtime(true);
 echo "Done in " . ($time_end - $time_start) . " seconds\n";
 
 @unlink(TMP . 'test.db');
-

Modified: trunk/test/test/active/record/DBOperationsTest.php
===================================================================
--- trunk/test/test/active/record/DBOperationsTest.php	2005-10-25 20:31:38 UTC (rev 241)
+++ trunk/test/test/active/record/DBOperationsTest.php	2005-10-29 09:54:10 UTC (rev 242)
@@ -37,6 +37,20 @@
         Registry::close();
     }
 
+    /** <tt>find a unexistent record</tt> */
+    public function testSaveSelect() {
+        $item= new Author();
+        $item->name = 'Mihai Eminescu';
+        $item->save();
+        try {
+            $items= Author::find(100);
+            $this->fail('Should throw an exception!');
+        } catch (Exception $ex) {
+            $this->assertIsA($ex, 'RecordNotFoundException');
+        }
+        $item->delete();
+    }
+
     /** <tt>save && delete test</tt> */
     public function testSave() {
         $item= new Author();
@@ -61,6 +75,7 @@
         $this->assertEqual($item->insert(), $item->id);
         $item->delete();
     }
+
     /** <tt>update test</tt> */
     public function testUpdate() {
         $item = new Author();



From aurelian at berlios.de  Sat Oct 29 11:56:39 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 11:56:39 +0200
Subject: [Medick-svn] r243 - in trunk: . vendor vendor/creole vendor/creole/common vendor/creole/contrib vendor/creole/drivers vendor/creole/drivers/mssql vendor/creole/drivers/mssql/metadata vendor/creole/drivers/mysql vendor/creole/drivers/mysql/metadata vendor/creole/drivers/mysqli vendor/creole/drivers/mysqli/metadata vendor/creole/drivers/odbc vendor/creole/drivers/odbc/adapters vendor/creole/drivers/odbc/metadata vendor/creole/drivers/oracle vendor/creole/drivers/oracle/metadata vendor/creole/drivers/pgsql vendor/creole/drivers/pgsql/metadata vendor/creole/drivers/sqlite vendor/creole/drivers/sqlite/metadata vendor/creole/metadata vendor/creole/util vendor/creole/util/sql
Message-ID: <200510290956.j9T9udSm019936@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 11:55:23 +0200 (Sat, 29 Oct 2005)
New Revision: 243

Added:
   trunk/vendor/
   trunk/vendor/creole/
   trunk/vendor/creole/CallableStatement.php
   trunk/vendor/creole/Connection.php
   trunk/vendor/creole/Creole.php
   trunk/vendor/creole/CreoleTypes.php
   trunk/vendor/creole/IdGenerator.php
   trunk/vendor/creole/PreparedStatement.php
   trunk/vendor/creole/ResultSet.php
   trunk/vendor/creole/ResultSetIterator.php
   trunk/vendor/creole/SQLException.php
   trunk/vendor/creole/Statement.php
   trunk/vendor/creole/common/
   trunk/vendor/creole/common/ConnectionCommon.php
   trunk/vendor/creole/common/PreparedStatementCommon.php
   trunk/vendor/creole/common/ResultSetCommon.php
   trunk/vendor/creole/common/StatementCommon.php
   trunk/vendor/creole/contrib/
   trunk/vendor/creole/contrib/DebugConnection.php
   trunk/vendor/creole/drivers/
   trunk/vendor/creole/drivers/mssql/
   trunk/vendor/creole/drivers/mssql/MSSQLCallableStatement.php
   trunk/vendor/creole/drivers/mssql/MSSQLConnection.php
   trunk/vendor/creole/drivers/mssql/MSSQLIdGenerator.php
   trunk/vendor/creole/drivers/mssql/MSSQLPreparedStatement.php
   trunk/vendor/creole/drivers/mssql/MSSQLResultSet.php
   trunk/vendor/creole/drivers/mssql/MSSQLStatement.php
   trunk/vendor/creole/drivers/mssql/MSSQLTypes.php
   trunk/vendor/creole/drivers/mssql/metadata/
   trunk/vendor/creole/drivers/mssql/metadata/MSSQLDatabaseInfo.php
   trunk/vendor/creole/drivers/mssql/metadata/MSSQLTableInfo.php
   trunk/vendor/creole/drivers/mysql/
   trunk/vendor/creole/drivers/mysql/MySQLConnection.php
   trunk/vendor/creole/drivers/mysql/MySQLIdGenerator.php
   trunk/vendor/creole/drivers/mysql/MySQLPreparedStatement.php
   trunk/vendor/creole/drivers/mysql/MySQLResultSet.php
   trunk/vendor/creole/drivers/mysql/MySQLStatement.php
   trunk/vendor/creole/drivers/mysql/MySQLTypes.php
   trunk/vendor/creole/drivers/mysql/metadata/
   trunk/vendor/creole/drivers/mysql/metadata/MySQLDatabaseInfo.php
   trunk/vendor/creole/drivers/mysql/metadata/MySQLTableInfo.php
   trunk/vendor/creole/drivers/mysqli/
   trunk/vendor/creole/drivers/mysqli/MySQLiConnection.php
   trunk/vendor/creole/drivers/mysqli/MySQLiIdGenerator.php
   trunk/vendor/creole/drivers/mysqli/MySQLiPreparedStatement.php
   trunk/vendor/creole/drivers/mysqli/MySQLiResultSet.php
   trunk/vendor/creole/drivers/mysqli/MySQLiStatement.php
   trunk/vendor/creole/drivers/mysqli/metadata/
   trunk/vendor/creole/drivers/mysqli/metadata/MySQLiDatabaseInfo.php
   trunk/vendor/creole/drivers/mysqli/metadata/MySQLiTableInfo.php
   trunk/vendor/creole/drivers/odbc/
   trunk/vendor/creole/drivers/odbc/ODBCCachedResultSet.php
   trunk/vendor/creole/drivers/odbc/ODBCConnection.php
   trunk/vendor/creole/drivers/odbc/ODBCIdGenerator.php
   trunk/vendor/creole/drivers/odbc/ODBCPreparedStatement.php
   trunk/vendor/creole/drivers/odbc/ODBCResultSet.php
   trunk/vendor/creole/drivers/odbc/ODBCResultSetCommon.php
   trunk/vendor/creole/drivers/odbc/ODBCStatement.php
   trunk/vendor/creole/drivers/odbc/ODBCTypes.php
   trunk/vendor/creole/drivers/odbc/README
   trunk/vendor/creole/drivers/odbc/adapters/
   trunk/vendor/creole/drivers/odbc/adapters/CodeBaseAdapter.php
   trunk/vendor/creole/drivers/odbc/adapters/MySQLAdapter.php
   trunk/vendor/creole/drivers/odbc/adapters/ODBCAdapter.php
   trunk/vendor/creole/drivers/odbc/metadata/
   trunk/vendor/creole/drivers/odbc/metadata/ODBCDatabaseInfo.php
   trunk/vendor/creole/drivers/odbc/metadata/ODBCTableInfo.php
   trunk/vendor/creole/drivers/oracle/
   trunk/vendor/creole/drivers/oracle/OCI8Connection.php
   trunk/vendor/creole/drivers/oracle/OCI8IdGenerator.php
   trunk/vendor/creole/drivers/oracle/OCI8PreparedStatement.php
   trunk/vendor/creole/drivers/oracle/OCI8ResultSet.php
   trunk/vendor/creole/drivers/oracle/OCI8Statement.php
   trunk/vendor/creole/drivers/oracle/OCI8Types.php
   trunk/vendor/creole/drivers/oracle/metadata/
   trunk/vendor/creole/drivers/oracle/metadata/OCI8DatabaseInfo.php
   trunk/vendor/creole/drivers/oracle/metadata/OCI8TableInfo.php
   trunk/vendor/creole/drivers/pgsql/
   trunk/vendor/creole/drivers/pgsql/PgSQLConnection.php
   trunk/vendor/creole/drivers/pgsql/PgSQLIdGenerator.php
   trunk/vendor/creole/drivers/pgsql/PgSQLPreparedStatement.php
   trunk/vendor/creole/drivers/pgsql/PgSQLResultSet.php
   trunk/vendor/creole/drivers/pgsql/PgSQLResultSetIterator.php
   trunk/vendor/creole/drivers/pgsql/PgSQLStatement.php
   trunk/vendor/creole/drivers/pgsql/PgSQLTypes.php
   trunk/vendor/creole/drivers/pgsql/metadata/
   trunk/vendor/creole/drivers/pgsql/metadata/PgSQLDatabaseInfo.php
   trunk/vendor/creole/drivers/pgsql/metadata/PgSQLTableInfo.php
   trunk/vendor/creole/drivers/sqlite/
   trunk/vendor/creole/drivers/sqlite/SQLiteConnection.php
   trunk/vendor/creole/drivers/sqlite/SQLiteIdGenerator.php
   trunk/vendor/creole/drivers/sqlite/SQLitePreparedStatement.php
   trunk/vendor/creole/drivers/sqlite/SQLiteResultSet.php
   trunk/vendor/creole/drivers/sqlite/SQLiteResultSetIterator.php
   trunk/vendor/creole/drivers/sqlite/SQLiteStatement.php
   trunk/vendor/creole/drivers/sqlite/SQLiteTypes.php
   trunk/vendor/creole/drivers/sqlite/metadata/
   trunk/vendor/creole/drivers/sqlite/metadata/SQLiteDatabaseInfo.php
   trunk/vendor/creole/drivers/sqlite/metadata/SQLiteTableInfo.php
   trunk/vendor/creole/metadata/
   trunk/vendor/creole/metadata/ColumnInfo.php
   trunk/vendor/creole/metadata/DatabaseInfo.php
   trunk/vendor/creole/metadata/ForeignKeyInfo.php
   trunk/vendor/creole/metadata/IndexInfo.php
   trunk/vendor/creole/metadata/PrimaryKeyInfo.php
   trunk/vendor/creole/metadata/TableInfo.php
   trunk/vendor/creole/util/
   trunk/vendor/creole/util/Blob.php
   trunk/vendor/creole/util/Clob.php
   trunk/vendor/creole/util/Lob.php
   trunk/vendor/creole/util/sql/
   trunk/vendor/creole/util/sql/SQLStatementExtractor.php
Log:
 bundled creole

Added: trunk/vendor/creole/CallableStatement.php
===================================================================
--- trunk/vendor/creole/CallableStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/CallableStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,134 @@
+<?php
+/*
+ *  $Id: CallableStatement.php,v 1.7 2004/03/20 04:16:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/PreparedStatement.php';
+
+/**
+ * Interface for callable statements.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.7 $
+ * @package   creole
+ */
+interface CallableStatement extends PreparedStatement {
+                        
+    /**
+     * Register a parameter as an output param.
+     * @param string $paramIndex The stored procedure param name (e.g. @val1).
+     * @param int $sqlType The type of the parameter (e.g. Type::BIT) .
+     */
+    public function registerOutParameter($paramIndex, $sqlType);
+    
+    /**
+     * 
+     * @param mixed $paramIndex Parameter name (e.g. "@var1").
+     * @return array
+     * @throws SQLException if $paramIndex was not bound as output variable.
+     */
+    public function getArray($paramIndex);
+    
+    /**
+     * 
+     * @param mixed $paramIndex Parameter name (e.g. "@var1").
+     * @return boolean
+     * @throws SQLException if $paramIndex was not bound as output variable.
+     */
+    public function getBoolean($paramIndex);    
+            
+    /**
+     * 
+     * @param mixed $paramIndex Parameter name (e.g. "@var1").
+     * @return Blob blob object
+     * @throws SQLException if $paramIndex was not bound as output variable.
+     */
+    public function getBlob($paramIndex);
+        
+    /**
+     * @param mixed $paramIndex Column name (string) or index (int).
+     * @return Clob clob object.
+     */
+    public function getClob($paramIndex);     
+    
+    /**
+     * Return a formatted date.
+     * 
+     * The default format for dates returned is preferred (in your locale, as specified using setlocale()) 
+     * format w/o time (i.e. strftime("%x", $val)).  Override this by specifying a format second parameter.  You
+     * can also specify a date()-style formatter; if you do, make sure there are no "%" symbols in your format string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed  Formatted date, or integer unix timestamp (using 00:00:00 for time) if $format was null. 
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getDate($column, $format = '%x');
+
+    /**
+     * @param mixed $paramIndex Column name (string) or index (int).
+     * @return float
+     */
+    public function getFloat($paramIndex);    
+
+    /**
+     * @param mixed $paramIndex Column name (string) or index (int).
+     * @return int
+     */
+    public function getInt($paramIndex);    
+
+    /**
+     * @param mixed $paramIndex Column name (string) or index (int).
+     * @return string
+     */
+    public function getString($paramIndex);        
+        
+    /**
+     * Return a formatted time.
+     * 
+     * The default format for times returned is preferred (in your locale, as specified using setlocale()) 
+     * format w/o date (i.e. strftime("%X", $val)).  Override this by specifying a format second parameter.  You
+     * can also specify a date()-style formatter; if you do, make sure there are no "%" symbols in your format string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed  Formatted time, or integer unix timestamp (using today's date) if $format was null. 
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getTime($column, $format = '%X');
+
+    /**
+     * Return a formatted timestamp.
+     * 
+     * The default format for timestamp is ISO standard YYYY-MM-DD HH:MM:SS (i.e. date('Y-m-d H:i:s', $val).
+     * Override this by specifying a format second parameter.  You can also specify a strftime()-style formatter.
+     * 
+     * Hint: if you want to get the unix timestamp use the "U" formatter string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed Formatted timestamp, or integer unix timestamp (if $format was null)
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getTimestamp($column, $format = 'Y-m-d H:i:s');
+
+}

Added: trunk/vendor/creole/Connection.php
===================================================================
--- trunk/vendor/creole/Connection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/Connection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,220 @@
+<?php
+/*
+ *  $Id: Connection.php,v 1.29 2005/10/17 19:03:50 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+include_once 'creole/ResultSet.php'; // we need this for the fetchmode ResultSet flags (constants) that are passed to executeQuery()
+
+/**
+ * Connection is an abstract base class for DB dialect implementations, and must be
+ * inherited by all such.
+ * 
+ * Developer notes:
+ *  (1) Make sure that your Connection class can be serialized.  See the ConnectionCommon __sleep() and __wakeup() implimentation.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.29 $
+ * @package   creole
+ */
+interface Connection {
+
+    // Constants that define transaction isolation levels.
+    // [We don't have any code using these yet, so there's no need
+    // to initialize these values at this point.]
+    // const TRANSACTION_NONE = 0;
+    // const TRANSACTION_READ_UNCOMMITTED = 1;
+    // const TRANSACTION_READ_COMMITTED = 2;
+    // const TRANSACTION_REPEATABLE_READ = 3;
+    // const TRANSACTION_SERIALIZABLE = 4;
+    
+    /**
+     * Connect to a database and log in as the specified user.
+     *
+     * @param array $dsn The PEAR-style data source hash.
+     * @param int $flags (optional) Flags for connection (e.g. Creole::PERSISTENT).  These flags
+     *                   may apply to any of the driver classes.
+     */
+    public function connect($dsn, $flags = false);    
+    
+    /**
+     * Get the PHP native resource for the database connection/link.
+     * @return resource
+     */
+    public function getResource();
+        
+    /**
+     * Get any flags that were passed to connection.
+     * @return int
+     */
+    public function getFlags();        
+    
+    /**
+     * Get the DSN array used by connect() method to connect to database.
+     * @see connect()
+     * @return array
+     */
+    public function getDSN();      
+    
+    /**
+     * Gets a DatabaseInfo class for the current database.
+     *
+     * This is not modeled on the JDBC MetaData class, but provides a possibly more 
+     * useful metadata system.  All the same, there may eventually be a getMetaData()
+     * which returns a class that behaves like JDBC's DatabaseMetaData.
+     *
+     * @return DatabaseInfo
+     */
+    public function getDatabaseInfo();
+    
+    /**
+     * Loads and returns an IdGenerator object for current RDBMS.
+     * @return IdGenerator
+     */
+    public function getIdGenerator();
+    
+    /**
+     * Prepares a query for multiple execution with execute().
+     *
+     * With some database backends, this is emulated.
+     * prepare() requires a generic query as string like
+     * "INSERT INTO numbers VALUES(?,?,?)". The ? are placeholders.
+        * 
+     * IMPORTANT:  All occurrences of the placeholder (?) will be assumed
+     * to be a parameter.  Therefore be sure not to have ? anywhere else in
+     * the query.
+     * 
+     * So, ... DO NOT MIX WILDCARDS WITH ALREADY-PREPARED QUERIES
+     *
+     * INCORRECT:
+     *     SELECT * FROM mytable WHERE id = ? AND title = 'Where are you?' and body LIKE ?
+     * 
+     * CORRECT:
+     *    SELECT * FROM mytable WHERE id = ? AND title = ? and body LIKE ?
+     * 
+     * @param string $sql The query to prepare.
+     * @return PreparedStatement
+     * @throws SQLException
+     * @see PreparedStatement::execute()
+     */
+    public function prepareStatement($sql);
+    
+    /**
+     * Creates a new empty Statement.
+     * @return Statement
+     */
+    public function createStatement();
+    
+    /**
+     * If RDBMS supports native LIMIT/OFFSET then query SQL is modified
+     * so that no emulation is performed in ResultSet.
+     * 
+     * @param string &$sql The query that will be modified.
+     * @param int $offset
+     * @param int $limit
+     * @return void
+     * @throws SQLException - if unable to modify query for any reason.
+     */
+    public function applyLimit(&$sql, $offset, $limit);
+    
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset.
+     * 
+     * @param string $sql The SQL statement.
+     * @param int $fetchmode
+     * @return object ResultSet
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeQuery($sql, $fetchmode = null);
+
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($sql);
+    
+    /**
+     * Creates a CallableStatement object for calling database stored procedures.
+     * 
+     * @param string $sql
+     * @return CallableStatement
+     */
+    public function prepareCall($sql);
+    
+    /**
+     * Free the db resources.
+     * @return void
+     */
+    public function close();
+    
+    /**
+     * Returns false if connection is closed.
+     * @return boolean
+     */
+    public function isConnected();
+    
+    /**
+     * Get auto-commit status.
+     *
+     * @return boolean
+     */
+    public function getAutoCommit();
+    
+    /**
+     * Enable/disable automatic commits.
+     * 
+     * Pushes SQLWarning onto $warnings stack if the autocommit value is being changed mid-transaction. This function
+     * is overridden by driver classes so that they can perform the necessary begin/end transaction SQL.
+     * 
+     * If auto-commit is being set to TRUE, then the current transaction will be committed immediately.
+     * 
+     * @param boolean $bit New value for auto commit.
+     * @return void
+     */
+    public function setAutoCommit($bit);
+    
+    /**
+     * Begins a transaction (if supported).
+     *
+     */
+    public function begin();
+    
+    /**
+     * Commits statements in a transaction.
+     *
+     */
+    public function commit();
+    
+    /**
+     * Rollback changes in a transaction.
+     *
+     */
+    public function rollback();
+    
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     *
+     * @return int Number of rows affected by the last query.
+     */
+    public function getUpdateCount();
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/Creole.php
===================================================================
--- trunk/vendor/creole/Creole.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/Creole.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,341 @@
+<?php
+/*
+ *  $Id: Creole.php,v 1.12 2005/10/17 19:03:50 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+include_once 'creole/SQLException.php';
+include_once 'creole/Connection.php';
+
+// static:
+// track errors is used by drivers to get better error messages
+// make sure it's set.
+
+ at ini_set('track_errors', true);
+
+/**
+ * This is the class that manages the database drivers.
+ *
+ * There are a number of default drivers (at the time of writing this comment: MySQL, MSSQL, SQLite, PgSQL, Oracle)
+ * that are "shipped" with Creole.  You may wish to either add a new driver or swap out one of the existing drivers
+ * for your own custom driver.  To do this you simply need to register your driver using the registerDriver() method.
+ *
+ * Note that you register your Connection class because the Connection class is responsible for calling the other
+ * driver classes (e.g. ResultSet, PreparedStatement, etc.).
+ *
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole
+ */
+class Creole {
+
+    /**
+     * Constant that indicates a connection object should be used.
+     */
+    const PERSISTENT = 1;
+
+    /**
+     * Flag to pass to the connection to indicate that no case conversions
+     * should be performed by ResultSet on keys of fetched rows.
+     */
+    const NO_ASSOC_LOWER = 16;
+
+    /**
+     * Map of built-in drivers.
+     * Change or add your own using registerDriver()
+     * @see registerDriver()
+     * @var array Hash mapping phptype => driver class (in dot-path notation, e.g. 'mysql' => 'creole.drivers.mysql.MySQLConnection').
+     */
+    private static $driverMap = array(  'mysql' => 'creole.drivers.mysql.MySQLConnection',
+                                        'mysqli' => 'creole.drivers.mysqli.MySQLiConnection',
+                                        'pgsql' => 'creole.drivers.pgsql.PgSQLConnection',
+                                        'sqlite' => 'creole.drivers.sqlite.SQLiteConnection',
+                                        'oracle' => 'creole.drivers.oracle.OCI8Connection',
+                                        'mssql' => 'creole.drivers.mssql.MSSQLConnection',
+                                        'odbc' => 'creole.drivers.odbc.ODBCConnection'
+                                       );
+
+    /**
+     * Map of already established connections
+     * @see getConnection()
+     * @var array Hash mapping connection DSN => Connection instance
+     */
+    private static $connectionMap = array();
+
+    /**
+     * Register your own RDBMS driver class.
+     *
+     * You can use this to specify your own class that replaces a default driver or
+     * adds support for a new driver.  Register your own class by specifying the
+     * 'phptype' (e.g. mysql) and a dot-path notation to where your Connection class is
+     * relative to any location on the include path.  You can also specify '*' as the phptype
+     * if you want to register a driver that will handle any native type (e.g. if creating
+     * a set of decorator classes that log SQL before calling native driver methods).  YOU CAN
+     * ONLY REGISTER ONE CATCHALL ('*') DRIVER.
+     * <p>
+     * Note: the class you need to register is your Connection class because this is the
+     * class that's responsible for instantiating the other classes that are part of your
+     * driver.  It is possible to mix & match drivers -- i.e. to write a custom driver where
+     * the Connection object just instantiates stock classes for ResultSet and PreparedStatement.
+     * Note that if you wanted to "override" only the ResultSet class you would also have to override
+     * the Connection and PreparedStatement classes so that they would return the correct ResultSet
+     * class.  In the future we may implement a more "packaged" approach to drivers; for now we
+     * want to keep it simple.
+     *
+     * @param string $phptype   The phptype (mysql, mssql, etc.). This is first part of DSN URL (e.g. mysql://localhost/...).
+     *                          You may also specify '*' to register a driver that will "wrap" the any native drivers.
+     * @param string $dotpath   A dot-path locating your class.  For example 'creole.drivers.mssql.MSSQLConnection'
+     *                          will be included like: include 'creole/drivers/mssql/MSSQLConnection.php' and the
+     *                          classname will be assumed to be 'MSSQLConnection'.
+     * @return void
+     */
+    public static function registerDriver($phptype, $dotpath)
+    {
+        self::$driverMap[$phptype] = $dotpath;
+    }
+
+    /**
+     * Removes the driver for a PHP type.  Note that this will remove user-registered
+     * drivers _and_ the default drivers.
+     * @param string $phptype The PHP type for driver to de-register.
+     * @see registerDriver()
+     */
+    public static function deregisterDriver($phptype)
+    {
+        unset(self::$driverMap[$phptype]);
+    }
+
+    /**
+     * Returns the class path to the driver registered for specified type.
+     * @param string $phptype The phptype handled by driver (e.g. 'mysql', 'mssql', '*').
+     * @return string The driver class in dot-path notation (e.g. creole.drivers.mssql.MSSQLConnection)
+     *                  or NULL if no registered driver found.
+     */
+    public static function getDriver($phptype)
+    {
+        if (isset(self::$driverMap[$phptype])) {
+            return self::$driverMap[$phptype];
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Create a new DB connection object and connect to the specified
+     * database
+     *
+     * @param mixed $dsn "data source name", see the self::parseDSN
+     * method for a description of the dsn format.  Can also be
+     * specified as an array of the format returned by DB::parseDSN().
+
+     * @param int $flags Connection flags (e.g. PERSISTENT).
+     *
+     * @return Connection Newly created DB connection object
+     * @throws SQLException
+     * @see self::parseDSN()
+     */
+    public static function getConnection($dsn, $flags = 0)
+    {
+        if (is_array($dsn)) {
+            $dsninfo = $dsn;
+        } else {
+            $dsninfo = self::parseDSN($dsn);
+        }
+
+        // sort $dsninfo by keys so the serialized result is always the same
+        // for identical connection parameters, no matter what their order is
+        ksort($dsninfo);
+        $connectionMapKey = crc32(serialize($dsninfo + array('no_assoc_lower' => ($flags & Creole::NO_ASSOC_LOWER) === Creole::NO_ASSOC_LOWER)));
+
+        // see if we already have a connection with these parameters cached
+        if(isset(self::$connectionMap[$connectionMapKey]))
+        {
+            // persistent connections will be used if a non-persistent one was requested and is available
+            // but a persistent connection will be created if a non-persistent one is present
+
+	    // TODO: impliment auto close of non persistent and replacing the
+	    // non persistent with the persistent object so as we dont have
+	    // both links open for no reason
+
+            if( isset(self::$connectionMap[$connectionMapKey][1]) ) { // is persistent
+                // a persistent connection with these parameters is already there,
+                // so we return it, no matter what was specified as persistent flag
+                $con = self::$connectionMap[$connectionMapKey][1];
+            } else {
+                // we don't have a persistent connection, and since the persistent
+                // flag wasn't set either, we just return the non-persistent connection
+                $con = self::$connectionMap[$connectionMapKey][0];
+            }
+
+            // if we're here, a non-persistent connection was already there, but
+            // the user wants a persistent one, so it will be created
+            
+            if ($con->isConnected())
+                return $con;            
+        }
+
+        // support "catchall" drivers which will themselves handle the details of connecting
+        // using the proper RDBMS driver.
+        if (isset(self::$driverMap['*'])) {
+            $type = '*';
+        } else {
+            $type = $dsninfo['phptype'];
+            if (!isset(self::$driverMap[$type])) {
+                throw new SQLException("No driver has been registered to handle connection type: $type");
+            }
+        }
+
+        // may need to make this more complex if we add support
+        // for 'dbsyntax'
+        $clazz = self::import(self::$driverMap[$type]);
+        $obj = new $clazz();
+
+        if (!($obj instanceof Connection)) {
+            throw new SQLException("Class does not implement creole.Connection interface: $clazz");
+        }
+
+        try {
+            $obj->connect($dsninfo, $flags);
+        } catch(SQLException $sqle) {
+            $sqle->setUserInfo($dsninfo);
+            throw $sqle;
+        }
+	$persistent = ($flags & Creole::PERSISTENT) === Creole::PERSISTENT;
+        return self::$connectionMap[$connectionMapKey][(int)$persistent] = $obj;
+    }
+
+    /**
+     * Parse a data source name.
+     *
+     * This isn't quite as powerful as DB::parseDSN(); it's also a lot simpler, a lot faster,
+     * and many fewer lines of code.
+     *
+     * A array with the following keys will be returned:
+     *  phptype: Database backend used in PHP (mysql, odbc etc.)
+     *  protocol: Communication protocol to use (tcp, unix etc.)
+     *  hostspec: Host specification (hostname[:port])
+     *  database: Database to use on the DBMS server
+     *  username: User name for login
+     *  password: Password for login
+     *
+     * The format of the supplied DSN is in its fullest form:
+     *
+     *  phptype://username:password at protocol+hostspec/database
+     *
+     * Most variations are allowed:
+     *
+     *  phptype://username:password at protocol+hostspec:110//usr/db_file.db
+     *  phptype://username:password at hostspec/database_name
+     *  phptype://username:password at hostspec
+     *  phptype://username at hostspec
+     *  phptype://hostspec/database
+     *  phptype://hostspec
+     *  phptype
+     *
+     * @param string $dsn Data Source Name to be parsed
+     * @return array An associative array
+     */
+    public static function parseDSN($dsn)
+    {
+        if (is_array($dsn)) {
+            return $dsn;
+        }
+
+        $parsed = array(
+            'phptype'  => null,
+            'username' => null,
+            'password' => null,
+            'protocol' => null,
+            'hostspec' => null,
+            'port'     => null,
+            'socket'   => null,
+            'database' => null
+        );
+
+        $info = parse_url($dsn);
+
+        if (count($info) === 1) { // if there's only one element in result, then it must be the phptype
+            $parsed['phptype'] = array_pop($info);
+            return $parsed;
+        }
+
+        // some values can be copied directly
+        $parsed['phptype'] = @$info['scheme'];
+        $parsed['username'] = @$info['user'];
+        $parsed['password'] = @$info['pass'];
+        $parsed['port'] = @$info['port'];
+
+        $host = @$info['host'];
+        if (false !== ($pluspos = strpos($host, '+'))) {
+            $parsed['protocol'] = substr($host,0,$pluspos);
+            if ($parsed['protocol'] === 'unix') {
+                $parsed['socket'] = substr($host,$pluspos+1);
+            } else {
+                $parsed['hostspec'] = substr($host,$pluspos+1);
+            }
+        } else {
+            $parsed['hostspec'] = $host;
+        }
+
+        if (isset($info['path'])) {
+            $parsed['database'] = substr($info['path'], 1); // remove first char, which is '/'
+        }
+
+        if (isset($info['query'])) {
+                $opts = explode('&', $info['query']);
+                foreach ($opts as $opt) {
+                    list($key, $value) = explode('=', $opt);
+                    if (!isset($parsed[$key])) { // don't allow params overwrite
+                        $parsed[$key] = urldecode($value);
+                    }
+                }
+        }
+
+        return $parsed;
+    }
+
+    /**
+     * Include once a file specified in DOT notation.
+     * Package notation is expected to be relative to a location
+     * on the PHP include_path.
+     * @param string $class
+     * @return string unqualified classname
+     * @throws SQLException - if class does not exist and cannot load file
+     *                      - if after loading file class still does not exist
+     */
+    public static function import($class) {
+        if (!class_exists($class, false)) {
+            $path = strtr($class, '.', DIRECTORY_SEPARATOR) . '.php';
+            $ret = include_once($path);
+            if ($ret === false) {
+                throw new SQLException("Unable to load driver class: " . $class);
+            }
+            // get just classname ('path.to.ClassName' -> 'ClassName')
+            $pos = strrpos($class, '.');
+            if ($pos !== false) {
+                $class = substr($class, $pos + 1);
+            }
+            if (!class_exists($class)) {
+                throw new SQLException("Unable to find loaded class: $class (Hint: make sure classname matches filename)");
+            }
+        }
+        return $class;
+    }
+
+}

Added: trunk/vendor/creole/CreoleTypes.php
===================================================================
--- trunk/vendor/creole/CreoleTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/CreoleTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,184 @@
+<?php
+/*
+ *  $Id: CreoleTypes.php,v 1.17 2005/09/28 13:18:19 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Generic Creole types modeled on JDBC types.
+ * 
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.17 $
+ * @package   creole
+ */
+abstract class CreoleTypes {
+
+        const BOOLEAN = 1;
+        const BIGINT = 2;
+        const SMALLINT = 3;
+        const TINYINT = 4;
+        const INTEGER = 5;
+        const CHAR = 6;
+        const VARCHAR = 7;
+        const TEXT = 17;
+        const FLOAT = 8;
+        const DOUBLE = 9;
+        const DATE = 10;
+        const TIME = 11;
+        const TIMESTAMP = 12;
+        const VARBINARY = 13;
+        const NUMERIC = 14;
+        const BLOB = 15;
+        const CLOB = 16;
+        const LONGVARCHAR = 17;
+        const DECIMAL = 18;
+        const REAL = 19;
+        const BINARY = 20;
+        const LONGVARBINARY = 21;
+        const YEAR = 22;
+        
+        /** this is "ARRAY" from JDBC types */
+        const ARR = 23;
+        
+        const OTHER = -1;
+        
+        /** Map of Creole type integers to the setter/getter affix. */
+        protected static $affixMap = array(
+                self::BOOLEAN => 'Boolean',
+                self::BIGINT => 'String',
+                self::CHAR => 'String',
+                self::DATE => 'Date',
+                self::DOUBLE => 'Float',
+                self::FLOAT => 'Float',
+                self::INTEGER => 'Int',
+                self::SMALLINT => 'Int',
+                self::TINYINT => 'Int',
+                self::TIME => 'Time',
+                self::TIMESTAMP => 'Timestamp',
+                self::VARCHAR => 'String',                
+                self::VARBINARY => 'Blob',
+                self::NUMERIC => 'Float',
+                self::BLOB => 'Blob',
+                self::CLOB => 'Clob',
+                self::LONGVARCHAR => 'String',
+                self::DECIMAL => 'Float',
+                self::REAL => 'Float',
+                self::BINARY => 'Blob',
+                self::LONGVARBINARY => 'Blob',
+                self::YEAR => 'Int',
+                self::ARR => 'Array',
+                self::OTHER => '', // get() and set() for unknown
+                );
+        
+        /** Map of Creole type integers to their textual name. */
+        protected static $creoleTypeMap = array(
+                self::BOOLEAN => 'BOOLEAN',
+                self::BIGINT => 'BIGINT',
+                self::SMALLINT => 'SMALLINT',
+                self::TINYINT => 'TINYINT',
+                self::INTEGER => 'INTEGER',
+                self::NUMERIC => 'NUMERIC',
+                self::DECIMAL => 'DECIMAL',
+                self::REAL => 'REAL',
+                self::FLOAT => 'FLOAT',
+                self::DOUBLE => 'DOUBLE',
+                self::CHAR => 'CHAR',
+                self::VARCHAR => 'VARCHAR',
+                self::TEXT => 'TEXT',
+                self::TIME => 'TIME',
+                self::TIMESTAMP => 'TIMESTAMP',
+                self::DATE => 'DATE',
+                self::YEAR => 'YEAR',
+                self::VARBINARY => 'VARBINARY',                
+                self::BLOB => 'BLOB',
+                self::CLOB => 'CLOB',
+                self::LONGVARCHAR => 'LONGVARCHAR',
+                self::BINARY => 'BINARY',
+                self::LONGVARBINARY => 'LONGVARBINARY',                
+                self::ARR => 'ARR',
+                self::OTHER => 'OTHER', // string is "raw" return
+                );
+        
+        /**
+         * This method returns the generic Creole (JDBC-like) type
+         * when given the native db type.
+         * @param string $nativeType DB native type (e.g. 'TEXT', 'byetea', etc.).
+         * @return int Creole native type (e.g. Types::LONGVARCHAR, Types::BINARY, etc.).
+         */
+        abstract static function getType($nativeType);
+        
+        /**
+         * This method will return a native type that corresponds to the specified
+         * Creole (JDBC-like) type.
+         * If there is more than one matching native type, then the LAST defined 
+         * native type will be returned.
+         * @return string Native type string.
+         */
+        abstract static function getNativeType($creoleType);
+        
+        /**
+         * Gets the "affix" to use for ResultSet::get*() and PreparedStatement::set*() methods.
+         * <code>
+         * $setter = 'set' . CreoleTypes::getAffix(CreoleTypes::INTEGER);
+         * $stmt->$setter(1, $intval);
+         * // or
+         * $getter = 'get' . CreoleTypes::getAffix(CreoleTypes::TIMESTAMP);
+         * $timestamp = $rs->$getter();
+         * </code>
+         * @param int $creoleType The Creole types.
+         * @return string The default affix for getting/setting cols of this type.
+         * @throws SQLException if $creoleType does not correspond to an affix
+         */
+        public static function getAffix($creoleType)
+        {
+            if (!isset(self::$affixMap[$creoleType])) {
+                $e = new SQLException("Unable to return 'affix' for unknown CreoleType: " . $creoleType);
+                print $e;
+                throw $e;
+            }
+            return self::$affixMap[$creoleType];
+        }
+        
+        /**
+         * Given the integer type, this method will return the corresponding type name.
+         * @param int $creoleType the integer Creole type.
+         * @return string The name of the Creole type (e.g. 'VARCHAR').
+         */
+        public static function getCreoleName($creoleType)
+        {
+            if (!isset(self::$creoleTypeMap[$creoleType])) {
+                return null;
+            }
+            return self::$creoleTypeMap[$creoleType];
+        }
+        
+        /**
+         * Given the name of a type (e.g. 'VARCHAR') this method will return the corresponding integer.
+         * @param string $creoleTypeName The case-sensisive (must be uppercase) name of the Creole type (e.g. 'VARCHAR').
+         * @return int the Creole type.
+         */
+        public static function getCreoleCode($creoleTypeName)
+        {
+            $type = array_search($creoleTypeName, self::$creoleTypeMap);
+            if ($type === false) {
+               return null;
+            }
+            return $type;
+        }
+}

Added: trunk/vendor/creole/IdGenerator.php
===================================================================
--- trunk/vendor/creole/IdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/IdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * Interface for classes that provide functionality to get SEQUENCE or AUTO-INCREMENT ids from the database.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.3 $
+ * @package   creole
+ */
+interface IdGenerator {
+    
+    /** SEQUENCE id generator type */
+    const SEQUENCE = 1;
+    
+    /** AUTO INCREMENT id generator type */
+    const AUTOINCREMENT = 2;                
+    
+    /**
+     * Convenience method that returns TRUE if id is generated
+     * before an INSERT statement.  This is the same as checking
+     * whether the generator type is SEQUENCE.
+     * @return boolean TRUE if gen id method is SEQUENCE
+     * @see getIdMethod()
+     */
+    public function isBeforeInsert();
+    
+    /**
+     * Convenience method that returns TRUE if id is generated
+     * after an INSERT statement.  This is the same as checking
+     * whether the generator type is AUTOINCREMENT.
+     * @return boolean TRUE if gen id method is AUTOINCREMENT
+     * @see getIdMethod()
+     */
+    public function isAfterInsert();
+    
+    /**
+     * Get the preferred type / style for generating ids for RDBMS.
+     * @return int SEQUENCE or AUTOINCREMENT
+     */
+    public function getIdMethod();
+    
+    /**
+     * Get the autoincrement or sequence id given the current connection
+     * and any additional needed info (e.g. sequence name for sequences).
+     * <p>
+     * Note: if you take advantage of the fact that $keyInfo may not be specified
+     * you should make sure that your code is setup in such a way that it will
+     * be portable if you change from an RDBMS that uses AUTOINCREMENT to one that
+     * uses SEQUENCE (i.e. in which case you would need to specify sequence name).
+     * 
+     * @param mixed $keyInfo Any additional information (e.g. sequence name) needed to fetch the id.
+     * @return int The last id / next id.
+     */
+    public function getId($keyInfo = null);
+    
+}
+

Added: trunk/vendor/creole/PreparedStatement.php
===================================================================
--- trunk/vendor/creole/PreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/PreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,253 @@
+<?php
+/*
+ *  $Id: PreparedStatement.php,v 1.21 2005/03/29 16:56:09 gamr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Interface for a pre-compiled SQL statement.
+ * 
+ * Many drivers do not take advantage of pre-compiling SQL statements; for these
+ * cases the precompilation is emulated.  This emulation comes with slight penalty involved
+ * in parsing the queries, but provides other benefits such as a cleaner object model and ability
+ * to work with BLOB and CLOB values w/o needing special LOB-specific routines.
+ * 
+ * This class is abstract because there are driver-specific implementations in [clearly] how queries
+ * are executed, and how parameters are bound.
+ * 
+ * This class is not as abstract as the JDBC version.  For exmple, if you are using a driver
+ * that uses name-based query param substitution, then you'd better bind your variables to
+ * names rather than index numbers.  e.g. in Oracle
+ * <code>
+ *            $stmt = $conn->prepareStatement("INSERT INTO users (name, passwd) VALUES (:name, :pass)");
+ *            $stmt->setString(":name", $name);
+ *            $stmt->executeUpdate();            
+ * </code>
+ * 
+ * Developer note:  In many ways this interface is an extension of the Statement interface.  However, due 
+ * to limitations in PHP5's interface extension model (specifically that you cannot change signatures on
+ * methods defined in parent interface), we cannot extend the Statement interface.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.21 $
+ * @package   creole
+ */
+interface PreparedStatement {
+     
+    /**
+     * Gets the db Connection that created this statement.
+     * @return Connection
+     */
+    public function getConnection();    
+
+    /**
+     * Get the PHP native resource for the statement (if supported).
+     * @return resource
+     */
+    public function getResource();
+        
+    /**
+     * Free resources associated with this statement.
+     * Some drivers will need to implement this method to free
+     * database result resources. 
+     * 
+     * @return void
+     */
+    public function close();
+    
+    /**
+     * Get result set.
+     * This assumes that the last thing done was an executeQuery() or an execute()
+     * with SELECT-type query.
+     *
+     * @return RestultSet Last ResultSet or <code>null</code> if not applicable.
+     */
+    public function getResultSet();
+    
+    /**
+     * Gets next result set (if this behavior is supported by driver).
+     * Some drivers (e.g. MSSQL) support returning multiple result sets -- e.g.
+     * from stored procedures.
+     *
+     * This function also closes any current restult set.
+     *
+     * Default behavior is for this function to return false.  Driver-specific
+     * implementations of this class can override this method if they actually
+     * support multiple result sets.
+     * 
+     * @return boolean True if there is another result set, otherwise false.
+     */
+    public function getMoreResults();
+    
+    /**
+     * Get update count.
+     *
+     * @return int Number of records affected, or <code>null</code> if not applicable.
+     */
+    public function getUpdateCount();
+
+    /**
+     * Sets the maximum number of rows to return from db.
+     * This will affect the SQL if the RDBMS supports native LIMIT; if not,
+     * it will be emulated.  Limit only applies to queries (not update sql).
+     * @param int $v Maximum number of rows or 0 for all rows.
+     * @return void
+     */
+    public function setLimit($v);
+    
+    /**
+     * Returns the maximum number of rows to return or 0 for all.
+     * @return int
+     */
+    public function getLimit();
+    
+    /**
+     * Sets the start row.
+     * This will affect the SQL if the RDBMS supports native OFFSET; if not,
+     * it will be emulated. Offset only applies to queries (not update) and 
+     * only is evaluated when LIMIT is set!
+     * @param int $v
+     * @return void
+     */ 
+    public function setOffset($v);
+    
+    /**
+     * Returns the start row.
+     * Offset only applies when Limit is set!
+     * @return int
+     */
+    public function getOffset();
+    
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * We support two signatures for this method:
+     * - $stmt->executeQuery(ResultSet::FETCHMODE_NUM);
+     * - $stmt->executeQuery(array($param1, $param2), ResultSet::FETCHMODE_NUM);
+     * @param mixed $p1 Either (array) Parameters that will be set using PreparedStatement::set() before query is executed or (int) fetchmode.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return ResultSet
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeQuery();
+    
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement in this PreparedStatement object.
+     * 
+     * @param array $params Parameters that will be set using PreparedStatement::set() before query is executed.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($params = null);
+
+    /**
+     * A generic set method.
+     * 
+     * You can use this if you don't want to concern yourself with the details.  It involves
+     * slightly more overhead than the specific settesr, since it grabs the PHP type to determine
+     * which method makes most sense.
+     * 
+     * @param int $paramIndex
+     * @param mixed $value
+     * @return void
+     * @throws SQLException
+     */
+    public function set($paramIndex, $value);
+    
+    /**
+     * Sets an array.
+     * Unless a driver-specific method is used, this means simply serializing
+     * the passed parameter and storing it as a string.
+     * @param int $paramIndex
+     * @param array $value
+     * @return void
+     */
+    public function setArray($paramIndex, $value);
+
+    /**
+     * Sets a boolean value.
+     * Default behavior is true = 1, false = 0.
+     * @param int $paramIndex
+     * @param boolean $value
+     * @return void
+     */
+    public function setBoolean($paramIndex, $value);
+    
+
+    /**
+     * @param int $paramIndex
+     * @param mixed $blob Blob object or string containing data.
+     * @return void
+     */
+    public function setBlob($paramIndex, $blob);
+
+    /**
+     * @param int $paramIndex
+     * @param mixed $clob Clob object  or string containing data.
+     * @return void
+     */
+    public function setClob($paramIndex, $clob);
+
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    public function setDate($paramIndex, $value);
+        
+    /**
+     * @param int $paramIndex
+     * @param float $value
+     * @return void
+     */
+    public function setFloat($paramIndex, $value);
+
+    /**
+     * @param int $paramIndex
+     * @param int $value
+     * @return void
+     */
+    public function setInt($paramIndex, $value);
+
+    /**
+     * @param int $paramIndex
+     * @return void
+     */
+    public function setNull($paramIndex);
+
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    public function setString($paramIndex, $value);
+    
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    public function setTime($paramIndex, $value);
+    
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    public function setTimestamp($paramIndex, $value);
+            
+}

Added: trunk/vendor/creole/ResultSet.php
===================================================================
--- trunk/vendor/creole/ResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/ResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,381 @@
+<?php
+/*
+ *  $Id: ResultSet.php,v 1.27 2004/03/11 15:38:38 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * This is the interface for classes the wrap db results.
+ * 
+ * The get*() methods in this interface will format values before returning them. Note
+ * that if they will return null if the database returned NULL.  If the requested column does
+ * not exist than an exception (SQLException) will be thrown.
+ * 
+ * <code>
+ * $rs = $conn->executeQuery("SELECT MAX(stamp) FROM event", ResultSet::FETCHMODE_NUM);
+ * $rs->next();
+ * 
+ * $max_stamp = $rs->getTimestamp(1, "d/m/Y H:i:s");
+ * // $max_stamp will be date string or null if no MAX(stamp) was found
+ * 
+ * $max_stamp = $rs->getTimestamp("max(stamp)", "d/m/Y H:i:s");
+ * // will THROW EXCEPTION, because the resultset was fetched using numeric indexing
+ * // SQLException: Invalid resultset column: max(stamp)
+ * </code>
+ * 
+ * This class implements SPL IteratorAggregate, so you may iterate over the database results
+ * using foreach():
+ * <code>
+ * foreach($rs as $row) {
+ *   print_r($row); // row is assoc array returned by getRow()
+ * }
+ * </code>
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.27 $
+ * @package   creole
+ */
+interface ResultSet extends IteratorAggregate {
+        
+    /**
+     * Index result set by field name.
+     */
+    const FETCHMODE_ASSOC = 1;
+
+    /**
+     * Index result set numerically.
+     */
+    const FETCHMODE_NUM = 2;
+    
+    /**
+     * Get the PHP native resource for the result.
+     * Arguably this should not be part of the interface: i.e. every driver should implement
+     * it if they have a result resource, but conceivably drivers could be created that do
+     * not.  For now every single driver does have a "dblink" resource property, and other
+     * classes (e.g. ResultSet) need this info in order to get correct native errors.  We'll
+     * leave it in for now, as it helps with driver development, with the caveat that it 
+     * could be removed from the interface at a later point.
+     * @return resource Query result or NULL if not not applicable.
+     */
+    public function getResource();
+        
+    /**
+     * Sets the fetchmode used to retrieve results.
+     * Changing fetchmodes mid-result retrieval is supported (haven't encountered any drivers 
+     * that don't support that yet).
+     * @param int $mode ResultSet::FETCHMODE_NUM or  ResultSet::FETCHMODE_ASSOC (default).
+     * @return void
+     */
+    public function setFetchmode($mode);
+    
+    /**
+     * Gets the fetchmode used to retrieve results.
+     * @return int ResultSet::FETCHMODE_NUM or ResultSet::FETCHMODE_ASSOC (default).
+     */
+    public function getFetchmode();       
+    
+    /**
+     * Whether assoc result keys get left alone -- as opposed to converted to lowercase.
+     * If the case change stuff goes back to being more complicated (allowing conver to upper,
+     * e.g.) then we'll add new methods but this method will always indicate whether any
+     * case conversions should be (or have been) performed at all.
+     * This defaults to true unless Creole::NO_ASSOC_LOWER flag has been passed to connection.
+     * This property is read-only since it must be set when connection is created.  The
+     * reason for this behavior is some drivers (e.g. SQLite) do the case conversions internally
+     * based on a PHP ini value; it would not be possible to change the behavior from the ResultSet
+     * (since query has already been executed).
+     * @return boolean
+     */
+    public function isIgnoreAssocCase();
+        
+    /**
+     * Moves the internal cursor to the next position and fetches the row at that position.
+     * 
+     * @return boolean <tt>true</tt> if success, <tt>false</tt> if no next record.
+     * @throws SQLException on any driver-level errors.
+     */
+    public function next();
+
+    /**
+     * Moves the internal cursor to the previous position and fetches the
+     * row at that position.
+     * 
+     * @return boolean <tt>true</tt> if success, <tt>false</tt> if no previous record.
+     * @throws SQLException - if unable to move to previous position
+     *                      - if ResultSet doesn't support reverse scrolling
+     */
+    public function previous();
+
+    /**
+     * Moves the cursor a relative number of rows, either positive or negative and fetches
+     * the row at that position.
+     * 
+     * Attempting to move beyond the first/last row in the result set positions the cursor before/after 
+     * the first/last row and issues a Warning. Calling relative(0) is valid, but does not change the cursor 
+     * position. 
+     * 
+     * @param integer $offset
+     * @return boolean <tt>true</tt> if cursor is on a row, <tt>false</tt> otherwise.
+     * @throws SQLException - if unable to move to relative position
+     *                      - if rel pos is negative & ResultSet doesn't support reverse scrolling
+     */
+    public function relative($offset);
+
+
+    /**
+     * Moves the cursor to an absolute cursor position and fetches the row at that position.
+     * 
+     * Attempting to move beyond the first/last row in the result set positions the cursor before/after 
+     * the first/last row and issues a Warning.
+     * 
+     * @param integer $pos cursor position, first position is 1.
+     * @return boolean <tt>true</tt> if cursor is on a row, <tt>false</tt> otherwise.
+     * @throws SQLException - if unable to move to absolute position
+     *                      - if position is before current pos & ResultSet doesn't support reverse scrolling
+     */
+    public function absolute($pos);
+
+    /**
+     * Moves cursor position WITHOUT FETCHING ROW AT THAT POSITION.
+     * 
+     * Generally this method is for internal driver stuff (e.g. other methods like
+     * absolute() or relative() might call this and then call next() to get the row).
+     * This method is public to facilitate more advanced ResultSet scrolling tools
+     * -- e.g. cleaner implimentation of ResultSetIterator.
+     * 
+     * Some drivers will emulate seek() and not allow reverse seek (Oracle).
+     * 
+     * Seek is 0-based, but seek() is only for moving to the space _before_ the record
+     * that you want to read.  I.e. if you seek(0) and then call next() you will have the 
+     * first row (i.e. same as calling first() or absolute(1)).
+     * 
+     * <strong>IMPORTANT:  You cannot rely on the return value of this method to know whether a given
+     * record exists for reading.  In some cases seek() will correctly return <code>false</code> if
+     * the position doesn't exist, but in other drivers the seek is not performed until the
+     * record is fetched. You can check the return value of absolute() if you need to know
+     * whether a specific rec position is valid.</strong>
+     * 
+     * @param int $rownum The cursor pos to seek to.
+     * @return boolean true on success, false if unable to seek to specified record.
+     * @throws SQLException if trying to seek backwards with a driver that doesn't
+     *                      support reverse-scrolling
+     */
+    public function seek($rownum);    
+    
+    /**
+     * Move cursor to beginning of recordset.
+     * @return boolean <tt>true</tt> on success or <tt>false</tt> if not found.
+     * @throws SQLException - if unable to move to first position
+     *                      - if not at first pos & ResultSet doesn't support reverse scrolling
+     */
+    public function first();
+
+    /**
+     * Move cursor to end of recordset.
+     * @return boolean <tt>true</tt> on success or <tt>false</tt> if not found.
+     * @throws SQLException - if unable to move to last position
+     *                      - if unable to get num rows
+     */
+    public function last();
+    
+    /**
+     * Sets cursort to before first record. This does not actually seek(), but
+     * simply sets cursor pos to 0.
+     * This is useful for inserting a record before the first in the set, etc.
+     * @return void
+     */
+    public function beforeFirst();
+
+
+    /**
+     * Sets cursort to after the last record. This does not actually seek(), but
+     * simply sets the cursor pos  to last + 1.
+     * This [will be] useful for inserting a record after the last in the set,
+     * when/if Creole supports updateable ResultSets.
+     * @return void
+     */
+    public function afterLast();
+
+
+    /**
+     * Checks whether cursor is after the last record.
+     * @return boolean
+     * @throws SQLException on any driver-level error.
+     */
+    public function isAfterLast();
+
+    /**
+     * Checks whether cursor is before the first record.
+     * @return boolean
+     * @throws SQLException on any driver-level error.
+     */
+    public function isBeforeFirst();
+
+    /**
+     * Returns the current cursor position.
+     * Cursor positions start at 0, but as soon as first row is fetched
+     * cursor position is 1. (so first row is 1)
+     * @return int
+     */
+    public function getCursorPos();
+
+    /**
+     * Gets current fields (assoc array).
+     * @return array
+     */
+    public function getRow();
+
+    /**
+     * Get the number of rows in a result set.
+     * @return int the number of rows
+     * @throws SQLException - if unable to get a rowcount.
+     */
+    public function getRecordCount();
+            
+    /**
+     * Frees the resources allocated for this result set.
+     * Also empties any internal field array so that any calls to
+     * get() method on closed ResultSet will result in "Invalid column" SQLException.
+     * @return void
+     */
+    public function close();
+    
+    /**
+     * A generic get method returns unformatted (=string) value.
+     * This returns the raw results from the database.  Usually this will be a string, but some drivers
+     * also can return objects (lob descriptors, etc) in certain cases.
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used) (if ResultSet::FETCHMODE_NUM was used).
+     * @return mixed Usually expect a string.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function get($column);
+    
+    /**
+     * Reads a column as an array.
+     * The value of the column is unserialized & returned as an array.  The generic case of this function is 
+     * very PHP-specific.  Other drivers (e.g. Postgres) will format values into their native array format.
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return array value or null if database returned null.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getArray($column);
+
+    /**
+     * Returns value translated to boolean.
+     * Default is to map 0 => false, 1 => true, but some database drivers may override this behavior.
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return boolean value or null if database returned null.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getBoolean($column);
+            
+    /**
+     * Returns Blob with contents of column value.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return Blob New Blob with data from column or null if database returned null.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getBlob($column);
+
+    /**
+     * Returns Clob with contents of column value.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return Clob New Clob object with data from column or null if database returned null.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getClob($column);
+
+    /**
+     * Return a formatted date.
+     * 
+     * The default format for dates returned is preferred (in your locale, as specified using setlocale()) 
+     * format w/o time (i.e. strftime("%x", $val)).  Override this by specifying a format second parameter.  You
+     * can also specify a date()-style formatter; if you do, make sure there are no "%" symbols in your format string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed  Formatted date, or integer unix timestamp (using 00:00:00 for time) if $format was null. 
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getDate($column, $format = '%x');   
+
+    /**
+     * Returns value cast as a float (in PHP this is same as double).
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return float value or null if database returned null
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getFloat($column);
+
+    /**
+     * Returns value cast as integer.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return int value or null if database returned null
+     * @see getInteger()
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getInt($column);      
+
+    /**
+     * Returns value cast as string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return string value or null if database returned null
+     * @see get()
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getString($column);
+    
+    /**
+     * Return a formatted time.
+     * 
+     * The default format for times returned is preferred (in your locale, as specified using setlocale()) 
+     * format w/o date (i.e. strftime("%X", $val)).  Override this by specifying a format second parameter.  You
+     * can also specify a date()-style formatter; if you do, make sure there are no "%" symbols in your format string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed  Formatted time, or integer unix timestamp (using today's date) if $format was null. 
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getTime($column, $format = '%X');
+
+    /**
+     * Return a formatted timestamp.
+     * 
+     * The default format for timestamp is ISO standard YYYY-MM-DD HH:MM:SS (i.e. date('Y-m-d H:i:s', $val).
+     * Override this by specifying a format second parameter.  You can also specify a strftime()-style formatter.
+     * 
+     * Hint: if you want to get the unix timestamp use the "U" formatter string.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @param string $format Date formatter for use w/ strftime() or date() (it will choose based on examination of format string)
+     *                          If format is NULL, then the integer unix timestamp will be returned (no formatting performed).
+     * @return mixed Formatted timestamp, or integer unix timestamp (if $format was null)
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getTimestamp($column, $format = 'Y-m-d H:i:s');
+    
+}
+

Added: trunk/vendor/creole/ResultSetIterator.php
===================================================================
--- trunk/vendor/creole/ResultSetIterator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/ResultSetIterator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,113 @@
+<?php
+/*
+ *  $Id: ResultSetIterator.php,v 1.3 2004/03/15 17:47:45 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Basic ResultSet Iterator.
+ * 
+ * This can be returned by your class's getIterator() method, but of course
+ * you can also implement your own (e.g. to get better performance, by using direct
+ * driver calls and avoiding other side-effects inherent in ResultSet scrolling
+ * functions -- e.g. beforeFirst() / afterLast(), etc.).
+ *
+ * Important: ResultSet iteration does rewind the resultset if it is not at the
+ * start.  Not all drivers support reverse scrolling, so this may result in an
+ * exception in some cases (Oracle).
+ * 
+ * Developer note:
+ * The implementation of this class is a little weird because it fetches the
+ * array _early_ in order to answer valid() w/o needing to know total num
+ * of fields.  Remember the way iterators work:
+ * <code>
+ * $it = $obj->getIterator();
+ * for($it->rewind(); $it->valid(); $it->next()) {
+ *  $key = $it->current();
+ *  $val = $it->key();
+ *  echo "$key = $val\n";
+ * }
+ * unset($it);
+ * </code>
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.3 $
+ * @package   creole
+ */
+class ResultSetIterator implements Iterator {
+
+    private $rs;    
+    
+    /**
+     * Construct the iterator.
+     * @param ResultSet $rs
+     */
+    public function __construct(ResultSet $rs)
+    {
+        $this->rs = $rs;
+    }
+    
+    /**
+     * If not at start of resultset, this method will call seek(0).
+     * @see ResultSet::seek()
+     */
+    function rewind()
+    {
+        if (!$this->rs->isBeforeFirst()) {
+            $this->rs->seek(0);
+        }
+    }
+    
+    /**
+     * This method checks to see whether there are more results
+     * by advancing the cursor position.
+     * @see ResultSet::next()
+     */
+    function valid()
+    {
+        return $this->rs->next();
+    }
+    
+    /**
+     * Returns the cursor position.
+     * @return int
+     */
+    function key()
+    {
+        return $this->rs->getCursorPos();
+    }
+    
+    /**
+     * Returns the row (assoc array) at current cursor pos.
+     * @return array
+     */
+    function current()
+    {
+       return $this->rs->getRow();
+    }
+    
+    /**
+     * This method does not actually do anything since we have already advanced
+     * the cursor pos in valid().
+     * @see valid()
+     */
+    function next()
+    {
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/SQLException.php
===================================================================
--- trunk/vendor/creole/SQLException.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/SQLException.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,105 @@
+<?php
+/*
+ *  $Id: SQLException.php,v 1.10 2004/03/20 04:16:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * A class for handling database-related errors.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.10 $
+ * @package   creole
+ */
+class SQLException extends Exception {
+    
+    /** Information that provides additional information for context of Exception (e.g. SQL statement or DSN). */
+    protected $userInfo;
+    
+    /** Native RDBMS error string */
+    protected $nativeError;
+    
+    /**
+     * Constructs a SQLException.
+     * @param string $msg Error message
+     * @param string $native Native DB error message.
+     * @param string $userinfo More info, e.g. the SQL statement or the connection string that caused the error.
+     */
+    public function __construct($msg, $native = null, $userinfo = null)
+    {
+        parent::__construct($msg);
+        if ($native !== null) {
+            $this->setNativeError($native);
+        }
+        if ($userinfo !== null) {
+            $this->setUserInfo($userinfo);
+        }
+    }
+    
+    /**
+     * Sets additional user / debug information for this error.
+     *  
+     * @param array $info
+     * @return void
+     */ 
+    public function setUserInfo($info)
+    {
+        $this->userInfo = $info;
+        $this->message .= " [User Info: " .$this->userInfo . "]";
+    }
+    
+    /**
+     * Returns the additional / debug information for this error. 
+     * 
+     * @return array hash of user info properties.
+     */
+    public function getUserInfo()
+    {
+        return $this->userInfo;
+    }
+    
+    /**
+     * Sets driver native error message.
+     *  
+     * @param string $info
+     * @return void
+     */ 
+    public function setNativeError($msg)
+    {
+        $this->nativeError = $msg;
+        $this->message .= " [Native Error: " .$this->nativeError . "]";
+    }
+    
+    /**
+     * Gets driver native error message.
+     * 
+     * @return string
+     */
+    public function getNativeError()
+    {
+        return $this->nativeError;
+    }        
+    
+    /**
+     * @deprecated This method only exists right now for easier compatibility w/ PHPUnit!
+     */
+    public function toString()
+    {
+        return $this->getMessage();
+    }
+}
\ No newline at end of file

Added: trunk/vendor/creole/Statement.php
===================================================================
--- trunk/vendor/creole/Statement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/Statement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,147 @@
+<?php
+/*
+ *  $Id: Statement.php,v 1.17 2004/03/20 04:16:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Class that represents a SQL statement.
+ * 
+ * This class is very generic and has no driver-specific implementations.  In fact,
+ * it wouldn't be possible to have driver-specific classes, since PHP doesn't support
+ * multiple inheritance.  I.e. you couldn't have MySQLPreparedStatement that extended
+ * both the abstract PreparedStatement class and the MySQLStatement class.  In Java
+ * this isn't a concern since PreparedStatement is an interface, not a class.
+ *
+ * 
+ * @author   Hans Lellelid <hans at xmpl.org>
+ * @version  $Revision: 1.17 $
+ * @package  creole
+ */
+interface Statement {    
+    
+    /**
+     * Sets the maximum number of rows to return from db.
+     * This will affect the SQL if the RDBMS supports native LIMIT; if not,
+     * it will be emulated.  Limit only applies to queries (not update sql).
+     * @param int $v Maximum number of rows or 0 for all rows.
+     * @return void
+     */
+    public function setLimit($v);
+    
+    /**
+     * Returns the maximum number of rows to return or 0 for all.
+     * @return int
+     */
+    public function getLimit();
+    
+    /**
+     * Sets the start row.
+     * This will affect the SQL if the RDBMS supports native OFFSET; if not,
+     * it will be emulated. Offset only applies to queries (not update) and 
+     * only is evaluated when LIMIT is set!
+     * @param int $v
+     * @return void
+     */ 
+    public function setOffset($v);
+    
+    /**
+     * Returns the start row.
+     * Offset only applies when Limit is set!
+     * @return int
+     */
+    public function getOffset();
+    
+    /**
+     * Free resources associated with this statement.
+     * Some drivers will need to implement this method to free
+     * database result resources. 
+     * 
+     * @return void
+     */
+    public function close();
+    
+    /**
+     * Generic execute() function has to check to see whether SQL is an update or select query.
+     * 
+     * If you already know whether it's a SELECT or an update (manipulating) SQL, then use
+     * the appropriate method, as this one will incurr overhead to check the SQL.
+     * 
+     * @param int $fetchmode Fetchmode (only applies to queries).
+     * @return boolean True if it is a result set, false if not or if no more results (this is identical to JDBC return val).
+     * @throws SQLException
+     */
+    public function execute($sql, $fetchmode = null);
+
+    /**
+     * Get result set.
+     * This assumes that the last thing done was an executeQuery() or an execute()
+     * with SELECT-type query.
+     *
+     * @return RestultSet (or null if none)
+     */
+    public function getResultSet();
+
+    /**
+     * Get update count.
+     *
+     * @return int Number of records affected, or <code>null</code> if not applicable.
+     */
+    public function getUpdateCount();        
+
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return object Creole::ResultSet
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeQuery($sql, $fetchmode = null);
+    
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement in this PreparedStatement object.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($sql);
+    
+    /**
+     * Gets next result set (if this behavior is supported by driver).
+     * Some drivers (e.g. MSSQL) support returning multiple result sets -- e.g.
+     * from stored procedures.
+     *
+     * This function also closes any current restult set.
+     *
+     * Default behavior is for this function to return false.  Driver-specific
+     * implementations of this class can override this method if they actually
+     * support multiple result sets.
+     * 
+     * @return boolean True if there is another result set, otherwise false.
+     */
+    public function getMoreResults();
+     
+    /**
+     * Gets the db Connection that created this statement.
+     * @return Connection
+     */
+    public function getConnection();
+    
+}

Added: trunk/vendor/creole/common/ConnectionCommon.php
===================================================================
--- trunk/vendor/creole/common/ConnectionCommon.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/common/ConnectionCommon.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,258 @@
+<?php
+/*
+ *  $Id: ConnectionCommon.php,v 1.5 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Class that contains some shared/default information for connections.  Classes may wish to extend this so
+ * as not to worry about the sleep/wakeup methods, etc.
+ * 
+ * In reality this class is not very useful yet, so there's not much incentive for drivers to extend this.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.common
+ */
+abstract class ConnectionCommon {
+
+    // Constants that define transaction isolation levels.
+    // [We don't have any code using these yet, so there's no need
+    // to initialize these values at this point.]
+    // const TRANSACTION_NONE = 0;
+    // const TRANSACTION_READ_UNCOMMITTED = 1;
+    // const TRANSACTION_READ_COMMITTED = 2;
+    // const TRANSACTION_REPEATABLE_READ = 3;
+    // const TRANSACTION_SERIALIZABLE = 4;
+    
+       /**
+     * The depth level of current transaction.
+     * @var int
+     */ 
+    protected $transactionOpcount = 0;
+    
+    /**
+     * DB connection resource id.     
+     * @var resource
+     */ 
+    protected $dblink;
+    
+    /**
+     * Array hash of connection properties.
+     * @var array
+     */
+    protected $dsn;
+
+    /**
+     * Flags (e.g. Connection::PERSISTENT) for current connection.
+     * @var int
+     */
+    protected $flags = 0;
+        
+    /**
+     * This "magic" method is invoked upon serialize() and works in tandem with the __wakeup()
+     * method to ensure that your database connection is serializable.
+     * 
+     * This method returns an array containing the names of any members of your class
+     * which need to be serialized in order to allow the class to re-connect to the database
+     * when it is unserialized.
+     * 
+     * <p>
+     * Developers:
+     * 
+     * Note that you cannot serialize resources (connection links) and expect them to 
+     * be valid when you unserialize.  For this reason, you must re-connect to the database in the
+     * __wakeup() method.
+     * 
+     * It's up to your class implimentation to ensure that the necessary data is serialized. 
+     * You probably at least need to serialize:
+     * 
+     *  (1) the DSN array used by connect() method
+     *  (2) Any flags that were passed to the connection
+     *  (3) Possibly the autocommit state
+     * 
+     * @return array The class variable names that should be serialized.
+     * @see __wakeup()
+     * @see DriverManager::getConnection()
+     * @see DatabaseInfo::__sleep()
+     */
+    public function __sleep()
+    {
+        return array('dsn', 'flags');
+    }
+    
+    /**
+     * This "magic" method is invoked upon unserialize().
+     * This method will re-connects to the database using the information that was
+     * stored using the __sleep() method.
+     * @see __sleep()
+     */
+    public function __wakeup() 
+    {
+        $this->connect($this->dsn, $this->flags);
+    }
+   
+    /**
+     * @see Connection::getResource()
+     */
+    public function getResource()
+    {
+        return $this->dblink;
+    }
+    
+    /**
+     * @see Connection::getDSN()
+     */
+    public function getDSN() {
+        return $this->dsn;
+    }
+       
+    /**
+     * @see Connection::getFlags()
+     */
+    public function getFlags()
+    {
+        return $this->flags;
+    }    
+
+    /**
+     * Creates a CallableStatement object for calling database stored procedures.
+     * 
+     * @param string $sql
+     * @return CallableStatement
+     */
+    public function prepareCall($sql) 
+    {
+        throw new SQLException("Current driver does not support stored procedures using CallableStatement.");
+    }    
+    
+    /**
+     * Driver classes should override this if they support transactions.
+     * 
+     * @return boolean
+     */
+    public function supportsNestedTrans() 
+    {
+        return false;
+    }
+    
+    /**
+     * Begins a transaction (if supported).
+     */
+    public function begin() 
+    {
+        if ($this->transactionOpcount === 0 || $this->supportsNestedTrans()) {
+            $this->beginTrans();
+        }
+        $this->transactionOpcount++;
+    }
+
+    /**
+     * Commits statements in a transaction.
+     */
+    public function commit() 
+    {
+        if ($this->transactionOpcount > 0) {
+            if ($this->transactionOpcount == 1 || $this->supportsNestedTrans()) {
+                $this->commitTrans();
+            }
+            $this->transactionOpcount--;       
+        }
+    }
+    
+    /**
+     * Rollback changes in a transaction.
+     */
+    public function rollback() 
+    {
+        if ($this->transactionOpcount > 0) {
+            if ($this->transactionOpcount == 1 || $this->supportsNestedTrans()) {
+                $this->rollbackTrans();
+            }
+            $this->transactionOpcount--;       
+        }
+    }
+
+    /**
+     * Enable/disable automatic commits.
+     * 
+     * Pushes SQLWarning onto $warnings stack if the autocommit value is being changed mid-transaction. This function
+     * is overridden by driver classes so that they can perform the necessary begin/end transaction SQL.
+     * 
+     * If auto-commit is being set to TRUE, then the current transaction will be committed immediately.
+     * 
+     * @param boolean $bit New value for auto commit.
+     * @return void
+     */
+    public function setAutoCommit($bit) 
+    {
+        if ($this->transactionOpcount > 0) {
+            trigger_error("Changing autocommit in mid-transaction; committing " . $this->transactionOpcount . " uncommitted statements.", E_USER_WARNING);
+        }
+
+        if (!$bit) {
+            $this->begin();
+        }
+        else {
+            $this->commit();
+        }
+    }
+
+    /**
+     * Get auto-commit status.
+     *
+     * @return boolean
+     */
+    public function getAutoCommit() 
+    {
+        return ($this->transactionOpcount == 0);
+    }
+    
+    /**
+     * Begin new transaction.
+     * Driver classes should override this method if they support transactions.
+     */
+    protected function beginTrans()
+    {
+    }
+    
+    /**
+     * Commit the current transaction.
+     * Driver classes should override this method if they support transactions.
+     */
+    protected function commitTrans() 
+    {
+    }
+    
+    /**
+     * Roll back (undo) the current transaction.
+     * Driver classes should override this method if they support transactions.
+     */
+    protected function rollbackTrans() 
+    {
+    }
+ 
+    /**
+     * Returns false if connection is closed.
+     * @return boolean
+     */
+    public function isConnected()
+    {
+        return !empty($this->dblink);
+    }
+}
\ No newline at end of file

Added: trunk/vendor/creole/common/PreparedStatementCommon.php
===================================================================
--- trunk/vendor/creole/common/PreparedStatementCommon.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/common/PreparedStatementCommon.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,598 @@
+<?php
+/*
+ *  $Id: PreparedStatementCommon.php,v 1.14 2005/04/16 18:55:28 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Class that represents a shared code for handling emulated pre-compiled statements.
+ * 
+ * Many drivers do not take advantage of pre-compiling SQL statements; for these
+ * cases the precompilation is emulated.  This emulation comes with slight penalty involved
+ * in parsing the queries, but provides other benefits such as a cleaner object model and ability
+ * to work with BLOB and CLOB values w/o needing special LOB-specific routines.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.14 $
+ * @package   creole.common
+ */
+abstract class PreparedStatementCommon {
+
+    /**
+     * The database connection.
+     * @var Connection
+     */ 
+    protected $conn;
+    
+    /**
+     * Max rows to retrieve from DB.
+     * @var int
+     */
+    protected $limit = 0;
+    
+    /**
+     * Offset at which to start processing DB rows.
+     * "Skip X rows"
+     * @var int
+     */
+    protected $offset = 0;
+    
+    /**
+     * The SQL this class operates on.
+     * @var string
+     */
+    protected $sql;
+
+    /**
+     * The string positions of the parameters in the SQL.
+     * @var array
+     */
+    protected $positions;
+
+
+    /**
+     * Number of positions (simply to save processing).
+     * @var int
+     */
+    protected $positionsCount;
+
+    /**
+     * Map of index => value for bound params.
+     * @var array string[]
+     */
+    protected $boundInVars = array();    
+    
+    /**
+     * Temporarily hold a ResultSet object after an execute() query.
+     * @var ResultSet
+     */
+    protected $resultSet;
+
+    /**
+     * Temporary hold the affected row cound after an execute() query.
+     * @var int
+     */
+    protected $updateCount;
+    
+    /**
+     * Create new prepared statement instance.
+     * 
+     * @param object $conn Connection object
+     * @param string $sql The SQL to work with.
+     * @param array $positions The positions in SQL of ?'s.
+     * @param restult $stmt If the driver supports prepared queries, then $stmt will contain the statement to use.
+     */ 
+    public function __construct(Connection $conn, $sql)
+    {
+        $this->conn = $conn;
+        $this->sql = $sql;
+    
+	$this->positions = $this->parseQuery ( $sql );
+        // save processing later in cases where we may repeatedly exec statement
+	$this->positionsCount = count ( $this->positions );
+    }
+
+    /**
+     * Parse the SQL query for ? positions
+     *
+     * @param string $sql The query to process
+     * @return array Positions from the start of the string that ?'s appear at
+    */
+    protected function parseQuery ( $sql )
+    {
+
+        $positions = array();
+	// match anything ? ' " or \ in $sql with an early out if we find nothing
+        if ( preg_match_all ( '([\?]|[\']|[\"]|[\\\])', $sql, $matches, PREG_OFFSET_CAPTURE ) !== 0 ) {
+                $matches = $matches['0'];
+                $open = NULL;
+		// go thru all our matches and see what we can find
+                for ( $i = 0, $j = count ( $matches ); $i < $j; $i++ ) {
+                        switch ( $matches[$i]['0'] ) {
+				// if we already have an open " or ' then check if this is the end
+				// to close it or not
+                                case $open:
+                                        $open = NULL;
+                                        break;
+				// we have a quote, set ourselves open
+                                case '"':
+                                case "'":
+                                        $open = $matches[$i]['0'];
+                                        break;
+				// check if it is an escaped quote and skip if it is
+                                case '\\':
+                                        $next_match = $matches[$i+1]['0'];
+                                        if ( $next_match === '"' || $next_match === "'" ) {
+                                                $i++;
+                                        }
+                                        unset ( $next_match );
+                                        break;
+				// we found a ?, check we arent in an open "/' first and
+				// add it to the position list if we arent
+                                default:
+                                        if ( $open === NULL ) {
+                                                $positions[] = $matches[$i]['1'];
+                                        }
+                        }
+                        unset ( $matches[$i] );
+                }
+                unset ( $open, $matches, $i, $j );
+        }
+
+	return $positions;
+
+    }
+
+    /**
+     * @see PreparedStatement::setLimit()
+     */
+    public function setLimit($v)
+    {
+        $this->limit = (int) $v;
+    }
+    
+    /**
+     * @see PreparedStatement::getLimit()
+     */
+    public function getLimit()
+    {
+        return $this->limit;
+    }
+    
+    /**
+     * @see PreparedStatement::setOffset()
+     */ 
+    public function setOffset($v)
+    {
+        $this->offset = (int) $v;
+    }
+    
+    /**
+     * @see PreparedStatement::getOffset()
+     */
+    public function getOffset()
+    {
+        return $this->offset;
+    }
+    
+    /**
+     * @see PreparedStatement::getResultSet()
+     */
+    public function getResultSet()
+    {
+        return $this->resultSet;
+    }
+
+    /**
+     * @see PreparedStatement::getUpdateCount()
+     */
+    public function getUpdateCount()
+    {
+        return $this->updateCount;
+    }
+    
+    /**
+     * @see PreparedStatement::getMoreResults()
+     */
+    public function getMoreResults()
+    {
+        if ($this->resultSet) $this->resultSet->close();
+        $this->resultSet = null;
+        return false;
+    }
+     
+    /**
+     * @see PreparedStatement::getConnection()
+     */
+    public function getConnection()
+    {
+        return $this->conn;
+    }
+    
+    /**
+     * Statement resources do not exist for emulated prepared statements,
+     * so this just returns <code>null</code>.
+     * @return null
+     */
+    public function getResource()
+    {
+        return null;
+    }
+    
+    /**
+     * Nothing to close for emulated prepared statements.
+     */
+    public function close()
+    {       
+    }
+    
+    /**
+     * Replaces placeholders with the specified parameter values in the SQL.
+     * 
+     * This is for emulated prepared statements.
+     * 
+     * @return string New SQL statement with parameters replaced.
+     * @throws SQLException - if param not bound.
+     */
+    protected function replaceParams()
+    {
+        // Default behavior for this function is to behave in 'emulated' mode.    
+        $sql = '';    
+        $last_position = 0;
+
+        for ($position = 0; $position < $this->positionsCount; $position++) {
+            if (!isset($this->boundInVars[$position + 1])) {
+              throw new SQLException(
+                'Replace params: undefined query param @postion: ' . ($position + 1) .'||' . 'Trying to execute: ' . $this->sql);
+            }
+            $current_position = $this->positions[$position];            
+            $sql .= substr($this->sql, $last_position, $current_position - $last_position);
+            $sql .= $this->boundInVars[$position + 1];                    
+            $last_position = $current_position + 1;            
+        }
+        // append the rest of the query
+        $sql .= substr($this->sql, $last_position);
+        
+        return $sql;
+    }
+
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * We support two signatures for this method:
+     * - $stmt->executeQuery(ResultSet::FETCHMODE_NUM);
+     * - $stmt->executeQuery(array($param1, $param2), ResultSet::FETCHMODE_NUM);
+     * @param mixed $p1 Either (array) Parameters that will be set using PreparedStatement::set() before query is executed or (int) fetchmode.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return ResultSet
+     * @throws SQLException if a database access error occurs.
+     */
+	public function executeQuery($p1 = null, $fetchmode = null)
+	{    
+	    $params = null;
+		if ($fetchmode !== null) {
+			$params = $p1;
+		} elseif ($p1 !== null) {
+			if (is_array($p1)) $params = $p1;
+			else $fetchmode = $p1;
+		}
+	    
+		if ($params) {
+			for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+				$this->set($i+1, $params[$i]);
+			}
+	    }
+        
+        $this->updateCount = null; // reset
+        $sql = $this->replaceParams();        
+        
+        if ($this->limit > 0 || $this->offset > 0) {
+            $this->conn->applyLimit($sql, $this->offset, $this->limit);
+        }
+        
+        $this->resultSet = $this->conn->executeQuery($sql, $fetchmode);
+        return $this->resultSet;
+    }
+
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement in this PreparedStatement object.
+     * 
+     * @param array $params Parameters that will be set using PreparedStatement::set() before query is executed.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($params = null) 
+    {
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+
+        if($this->resultSet) $this->resultSet->close();
+        $this->resultSet = null; // reset                
+        $sql = $this->replaceParams();        
+        $this->updateCount = $this->conn->executeUpdate($sql);
+        return $this->updateCount;
+    }    
+
+    /**
+     * Escapes special characters (usu. quotes) using native driver function.
+     * @param string $str The input string.
+     * @return string The escaped string.
+     */
+    abstract protected function escape($str);
+    
+    /**
+     * A generic set method.
+     * 
+     * You can use this if you don't want to concern yourself with the details.  It involves
+     * slightly more overhead than the specific settesr, since it grabs the PHP type to determine
+     * which method makes most sense.
+     * 
+     * @param int $paramIndex
+     * @param mixed $value
+     * @return void
+     * @throws SQLException
+     */
+    function set($paramIndex, $value)
+    {
+        $type = gettype($value);
+        if ($type == "object") {
+            if (is_a($value, 'Blob')) {
+                $this->setBlob($paramIndex, $value);
+            } elseif (is_a($value, 'Clob')) {
+                $this->setClob($paramIndex, $value);
+            } elseif (is_a($value, 'Date')) {
+                 // can't be sure if the column type is a DATE, TIME, or TIMESTAMP column
+                 // we'll just use TIMESTAMP by default; hopefully DB won't complain (if
+                 // it does, then this method just shouldn't be used).
+                 $this->setTimestamp($paramIndex, $value);
+            } else {
+                throw new SQLException("Unsupported object type passed to set(): " . get_class($value));
+            }
+        } else {
+	    switch ( $type ) {
+	    	case 'integer':
+			$type = 'int';
+			break;
+		case 'double':
+			$type = 'float';
+			break;
+		// nice at a later date for large int handling?
+		//case 'gmp':
+	    }
+            $setter = 'set' . ucfirst($type); // PHP types are case-insensitive, but we'll do this in case that changes
+            $this->$setter($paramIndex, $value);
+        }        
+    }
+    
+    /**
+     * Sets an array.
+     * Unless a driver-specific method is used, this means simply serializing
+     * the passed parameter and storing it as a string.
+     * @param int $paramIndex
+     * @param array $value
+     * @return void
+     */
+    function setArray($paramIndex, $value) 
+    {        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = "'" . $this->escape(serialize($value)) . "'";
+        }
+    }
+
+    /**
+     * Sets a boolean value.
+     * Default behavior is true = 1, false = 0.
+     * @param int $paramIndex
+     * @param boolean $value
+     * @return void
+     */
+    function setBoolean($paramIndex, $value) 
+    {                
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = (int) $value;
+        }
+    }
+    
+
+    /**
+     * @see PreparedStatement::setBlob()
+     */
+    function setBlob($paramIndex, $blob) 
+    {        
+        if ($blob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // they took magic __toString() out of PHP5.0.0; this sucks
+            if (is_object($blob)) {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape($blob->__toString()) . "'";
+            } else {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape($blob) . "'";
+	    }
+        }
+    } 
+
+    /**
+     * @see PreparedStatement::setClob()
+     */
+    function setClob($paramIndex, $clob) 
+    {
+        if ($clob === null) {
+            $this->setNull($paramIndex);
+        } else {      
+            // they took magic __toString() out of PHP5.0.0; this sucks
+            if (is_object($clob)) {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape($clob->__toString()) . "'";
+            } else {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape($clob) . "'";
+	    }
+        }
+    }     
+
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setDate($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date("Y-m-d", $value);
+            elseif (is_object($value)) $value = date("Y-m-d", $value->getTime());        
+            $this->boundInVars[$paramIndex] = "'" . $this->escape($value) . "'";
+        }
+    } 
+    
+    /**
+     * @param int $paramIndex
+     * @param double $value
+     * @return void
+     */
+    function setDecimal($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = (float) $value;
+        }
+    }             
+
+    /**
+     * @param int $paramIndex
+     * @param double $value
+     * @return void
+     */
+    function setDouble($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = (double) $value;
+        }
+    } 
+        
+    /**
+     * @param int $paramIndex
+     * @param float $value
+     * @return void
+     */
+    function setFloat($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = (float) $value;
+        }
+    } 
+
+    /**
+     * @param int $paramIndex
+     * @param int $value
+     * @return void
+     */
+    function setInt($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $this->boundInVars[$paramIndex] = (int) $value;
+        }
+    } 
+    
+    /**
+     * Alias for setInt()
+     * @param int $paramIndex
+     * @param int $value
+     */
+    function setInteger($paramIndex, $value)
+    {
+        $this->setInt($paramIndex, $value);
+    }
+
+    /**
+     * @param int $paramIndex
+     * @return void
+     */
+    function setNull($paramIndex) 
+    {
+        $this->boundInVars[$paramIndex] = 'NULL';
+    }
+
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setString($paramIndex, $value) 
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // it's ok to have a fatal error here, IMO, if object doesn't have
+            // __toString() and is being passed to this method.
+	    if ( is_object ( $value ) ) {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape($value->__toString()) . "'";
+	    } else {
+            	$this->boundInVars[$paramIndex] = "'" . $this->escape((string)$value) . "'";
+	    }
+        }
+    } 
+    
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setTime($paramIndex, $value) 
+    {        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if ( is_numeric ( $value ) ) {
+	    		$value = date ('H:i:s', $value );
+		    } elseif ( is_object ( $value ) ) {
+		    	$value = date ('H:i:s', $value->getTime ( ) );
+		    }
+            $this->boundInVars [ $paramIndex ] = "'" . $this->escape ( $value ) . "'";
+        }
+    }
+    
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setTimestamp($paramIndex, $value) 
+    {        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+       	    if (is_numeric($value)) $value = date('Y-m-d H:i:s', $value);
+       	    elseif (is_object($value)) $value = date('Y-m-d H:i:s', $value->getTime());
+            $this->boundInVars[$paramIndex] = "'".$this->escape($value)."'";
+        }
+    }
+            
+}

Added: trunk/vendor/creole/common/ResultSetCommon.php
===================================================================
--- trunk/vendor/creole/common/ResultSetCommon.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/common/ResultSetCommon.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,439 @@
+<?php
+/*
+ *  $Id: ResultSetCommon.php,v 1.8 2005/09/16 13:09:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * This class implements many shared or common methods needed by resultset drivers.
+ * 
+ * This class may (optionally) be extended by driver classes simply to make it easier
+ * to create driver classes.  This is also useful in the early stages of Creole development
+ * as it means that API changes affect fewer files. As Creole matures/stabalizes having
+ * a common class may become less useful, as drivers may have their own ways of doing things
+ * (and we'll have a solid unit test framework to make sure drivers conform to the API
+ * described by the interfaces).
+ * 
+ * The get*() methods in this class will format values before returning them. Note
+ * that if they will return <code>null</code> if the database returned <code>NULL</code>
+ * which makes these functions easier to use than simply typecasting the values from the
+ * db. If the requested column does not exist than an exception (SQLException) will be thrown.
+ * 
+ * <code>
+ * $rs = $conn->executeQuery("SELECT MAX(stamp) FROM event", ResultSet::FETCHMODE_NUM);
+ * $rs->next();
+ * 
+ * $max_stamp = $rs->getTimestamp(1, "d/m/Y H:i:s");
+ * // $max_stamp will be date string or null if no MAX(stamp) was found
+ * 
+ * $max_stamp = $rs->getTimestamp("max(stamp)", "d/m/Y H:i:s");
+ * // will THROW EXCEPTION, because the resultset was fetched using numeric indexing
+ * // SQLException: Invalid resultset column: max(stamp)
+ * </code>
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.common
+ */
+abstract class ResultSetCommon {          
+    
+    /**
+     * The fetchmode for this recordset.
+     * @var int
+     */
+    protected $fetchmode;
+    
+    /**
+     * DB connection.
+     * @var Connection
+     */
+    protected $conn;
+    
+    /**
+     * Resource identifier used for native result set handling.
+     * @var resource
+     */
+    protected $result;
+
+    /**
+     * The current cursor position (row number). First row is 1. Before first row is 0.
+     * @var int
+     */
+    protected $cursorPos = 0;
+    
+    /**
+     * The current unprocessed record/row from the db.
+     * @var array
+     */
+    protected $fields;
+    
+    /**
+     * Whether to convert assoc col case.
+     */
+    protected $ignoreAssocCase = false;
+    
+    /**
+     * Constructor.
+     */
+    public function __construct(Connection $conn, $result, $fetchmode = null)
+    {
+        $this->conn = $conn;
+        $this->result = $result;             
+        if ($fetchmode !== null) {
+            $this->fetchmode = $fetchmode;
+        } else {
+            $this->fetchmode = ResultSet::FETCHMODE_ASSOC; // default
+        }
+        $this->ignoreAssocCase = (($conn->getFlags() & Creole::NO_ASSOC_LOWER) === Creole::NO_ASSOC_LOWER);
+    }
+    
+    /**
+     * Destructor
+     *
+     * Free db result resource.
+     */
+    public function __destruct()
+    {
+          $this->close();
+    }
+    
+    /**
+     * @see ResultSet::getIterator()
+     */
+    public function getIterator()
+    {
+        require_once 'creole/ResultSetIterator.php';
+        return new ResultSetIterator($this);
+    }
+    
+    /**
+     * @see ResultSet::getResource()
+     */
+    public function getResource()
+    {
+        return $this->result;
+    }
+    
+    /**
+     * @see ResultSet::isIgnoreAssocCase()
+     */
+    public function isIgnoreAssocCase()
+    {
+        return $this->ignoreAssocCase;
+    }        
+    
+    /**
+     * @see ResultSet::setFetchmode()
+     */
+    public function setFetchmode($mode)
+    {
+        $this->fetchmode = $mode;
+    }
+    
+    /**
+     * @see ResultSet::getFetchmode()
+     */
+    public function getFetchmode()
+    {
+        return $this->fetchmode;
+    }                
+
+    /**
+     * @see ResultSet::previous()
+     */
+    public function previous()
+    {
+        // Go back 2 spaces so that we can then advance 1 space.
+        $ok = $this->seek($this->cursorPos - 2);
+        if ($ok === false) {
+            $this->beforeFirst();
+            return false;
+        }        
+        return $this->next();      
+    }
+
+    /**
+     * @see ResultSet::isBeforeFirst()
+     */
+    public function relative($offset)
+    {
+        // which absolute row number are we seeking
+        $pos = $this->cursorPos + ($offset - 1);
+        $ok = $this->seek($pos);
+                
+        if ($ok === false) {
+            if ($pos < 0) {
+                $this->beforeFirst();
+            } else {
+                $this->afterLast();
+            }
+        } else {
+            $ok = $this->next();
+        }
+        
+        return $ok;
+    }
+
+    /**
+     * @see ResultSet::absolute()
+     */
+    public function absolute($pos)
+    {
+        $ok = $this->seek( $pos - 1 ); // compensate for next() factor        
+        if ($ok === false) {
+            if ($pos - 1 < 0) {
+                $this->beforeFirst();
+            } else {
+                $this->afterLast();
+            }
+        } else {
+            $ok = $this->next();
+        }        
+        return $ok;
+    }
+    
+    /**
+     * @see ResultSet::first()
+     */
+    public function first()
+    {
+        if($this->cursorPos !== 0) { $this->seek(0); }
+        return $this->next();
+    }
+
+    /**
+     * @see ResultSet::last()
+     */
+    public function last()
+    {
+        if($this->cursorPos !==  ($last = $this->getRecordCount() - 1)) {
+            $this->seek( $last );
+        }
+        return $this->next();
+    }
+    
+    /**
+     * @see ResultSet::beforeFirst()
+     */
+    public function beforeFirst()
+    {
+        $this->cursorPos = 0;
+    }
+
+    /**
+     * @see ResultSet::afterLast()
+     */
+    public function afterLast()
+    {
+        $this->cursorPos = $this->getRecordCount() + 1;
+    }
+
+    /**
+     * @see ResultSet::isAfterLast()
+     */
+    public function isAfterLast()
+    {
+        return ($this->cursorPos === $this->getRecordCount() + 1);
+    }
+
+    /**
+     * @see ResultSet::isBeforeFirst()
+     */
+    public function isBeforeFirst()
+    {
+        return ($this->cursorPos === 0);
+    }    
+
+    /**
+     * @see ResultSet::getCursorPos()
+     */
+    public function getCursorPos()
+    {
+        return $this->cursorPos;
+    }
+    
+    /**
+     * @see ResultSet::getRow()
+     */
+    public function getRow()
+    {
+        return $this->fields;
+    }
+    
+    /**
+     * @see ResultSet::get()
+     */
+    public function get($column)
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        return $this->fields[$idx];
+    }
+    
+    /**
+     * @see ResultSet::getArray()
+     */
+    public function getArray($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return (array) unserialize($this->fields[$idx]);
+    } 
+
+    /**
+     * @see ResultSet::getBoolean()
+     */
+    public function getBoolean($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return (boolean) $this->fields[$idx];
+    }
+            
+    /**
+     * @see ResultSet::getBlob()
+     */
+    public function getBlob($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        require_once 'creole/util/Blob.php';
+        $b = new Blob();
+        $b->setContents($this->fields[$idx]);
+        return $b;
+    }    
+
+    /**
+     * @see ResultSet::getClob()
+     */
+    public function getClob($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        require_once 'creole/util/Clob.php';
+        $c = new Clob();
+        $c->setContents($this->fields[$idx]);
+        return $c;
+    } 
+
+    /**
+     * @see ResultSet::getDate()
+     */
+    public function getDate($column, $format = '%x') 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        $ts = strtotime($this->fields[$idx]);        
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . $column . " to timestamp: " . $this->fields[$idx]);
+        }
+        if ($format === null) {
+            return $ts;
+        }
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+    }    
+
+    /**
+     * @see ResultSet::getFloat()
+     */
+    public function getFloat($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return (float) $this->fields[$idx];
+    }
+
+    /**
+     * @see ResultSet::getInt()
+     */
+    public function getInt($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return (int) $this->fields[$idx];
+    }
+       
+    /**
+     * @see ResultSet::getString()
+     */
+    public function getString($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return rtrim((string) $this->fields[$idx]);
+    }
+    
+    /**
+     * @see ResultSet::getTime()
+     */
+    public function getTime($column, $format = '%X') 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        
+        $ts = strtotime($this->fields[$idx]);
+        
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . (is_int($column) ? $column + 1 : $column) . " to timestamp: " . $this->fields[$idx]);
+        }
+        if ($format === null) {
+            return $ts;
+        }        
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }        
+    }
+
+    /**
+     * @see ResultSet::getTimestamp()
+     */
+    public function getTimestamp($column, $format = 'Y-m-d H:i:s') 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        
+        $ts = strtotime($this->fields[$idx]);
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . $column . " to timestamp: " . $this->fields[$idx]);
+        }
+        if ($format === null) {
+            return $ts;
+        }
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }        
+    }  
+}
\ No newline at end of file

Added: trunk/vendor/creole/common/StatementCommon.php
===================================================================
--- trunk/vendor/creole/common/StatementCommon.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/common/StatementCommon.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,289 @@
+<?php
+/*
+ *  $Id: StatementCommon.php,v 1.4 2004/06/13 02:31:07 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Class that contains common/shared functionality for Statements.
+ * 
+ * @author   Hans Lellelid <hans at xmpl.org>
+ * @version  $Revision: 1.4 $
+ * @package  creole.common
+ */
+abstract class StatementCommon {
+
+    /**
+     * The database connection.
+     * @var Connection
+     */ 
+    protected $conn;
+    
+    /**
+     * Temporarily hold a ResultSet object after an execute() query.
+     * @var ResultSet
+     */
+    protected $resultSet;
+
+    /**
+     * Temporary hold the affected row cound after an execute() query.
+     * @var int
+     */
+    protected $updateCount;
+    
+    /**
+     * Array of warning objects generated by methods performed on result set.
+     * @var array SQLWarning[]
+     */
+    protected $warnings = array();
+    
+    /** 
+     * The ResultSet class name.
+     * @var string
+     */
+    protected $resultClass;
+    
+    /**
+     * The prepared statement resource id.
+     * @var resource
+     */
+    protected $stmt;
+    
+    /**
+     * Max rows to retrieve from DB.
+     * @var int
+     */
+    protected $limit = 0;
+    
+    /**
+     * Offset at which to start processing DB rows.
+     * "Skip X rows"
+     * @var int
+     */
+    protected $offset = 0;
+    
+    /**
+     * Create new statement instance.
+     * 
+     * @param Connection $conn Connection object
+     */ 
+    function __construct(Connection $conn) 
+    {
+        $this->conn = $conn;        
+    }
+    
+    /**
+     * Sets the maximum number of rows to return from db.
+     * This will affect the SQL if the RDBMS supports native LIMIT; if not,
+     * it will be emulated.  Limit only applies to queries (not update sql).
+     * @param int $v Maximum number of rows or 0 for all rows.
+     * @return void
+     */
+    public function setLimit($v)
+    {
+        $this->limit = (int) $v;
+    }
+    
+    /**
+     * Returns the maximum number of rows to return or 0 for all.
+     * @return int
+     */
+    public function getLimit()
+    {
+        return $this->limit;
+    }
+    
+    /**
+     * Sets the start row.
+     * This will affect the SQL if the RDBMS supports native OFFSET; if not,
+     * it will be emulated. Offset only applies to queries (not update) and 
+     * only is evaluated when LIMIT is set!
+     * @param int $v
+     * @return void
+     */ 
+    public function setOffset($v)
+    {
+        $this->offset = (int) $v;
+    }
+    
+    /**
+     * Returns the start row.
+     * Offset only applies when Limit is set!
+     * @return int
+     */
+    public function getOffset()
+    {
+        return $this->offset;
+    }
+    
+    /**
+     * Free resources associated with this statement.
+     * Some drivers will need to implement this method to free
+     * database result resources. 
+     * 
+     * @return void
+     */
+    public function close()
+    {
+        // do nothing here (subclasses will implement)
+    }
+    
+    /**
+     * Generic execute() function has to check to see whether SQL is an update or select query.
+     * 
+     * If you already know whether it's a SELECT or an update (manipulating) SQL, then use
+     * the appropriate method, as this one will incurr overhead to check the SQL.
+     * 
+     * @param int $fetchmode Fetchmode (only applies to queries).
+     * @return boolean True if it is a result set, false if not or if no more results (this is identical to JDBC return val).
+     * @throws SQLException
+     * @todo -cStatementCommon Update execute() to not use isSelect() method, but rather to determine type based on returned results.
+     */
+    public function execute($sql, $fetchmode = null)
+    {
+        
+        if (!$this->isSelect($sql)) {                    
+            $this->updateCount = $this->executeUpdate($sql);
+            return false;
+        } else {
+            $this->resultSet = $this->executeQuery($sql, $fetchmode);
+            if ($this->resultSet->getRecordCount() === 0) {
+                return false;
+            }
+            return true;
+        }
+    }
+
+    /**
+     * Get result set.
+     * This assumes that the last thing done was an executeQuery() or an execute()
+     * with SELECT-type query.
+     *
+     * @return RestultSet (or null if none)
+     */
+    public function getResultSet()
+    {
+        return $this->resultSet;
+    }
+
+    /**
+     * Get update count.
+     *
+     * @return int Number of records affected, or <code>null</code> if not applicable.
+     */
+    public function getUpdateCount()
+    {
+        return $this->updateCount;
+    }
+        
+    /**
+     * Returns whether the passed SQL is a SELECT statement.
+     * 
+     * Returns true if SQL starts with 'SELECT' but not 'SELECT INTO'.  This exists
+     * to support the execute() function -- which could either execute an update or
+     * a query.
+     * 
+     * Currently this function does not take into consideration comments, primarily
+     * because there are a number of different comment options for different drivers:
+     * <pre>
+     *     -- SQL-defined comment, but not truly comment in Oracle
+     *  # comment in mysql
+     *  /* comment in mssql, others * /
+     *  // comment sometimes?
+     *  REM also comment ...
+     * </pre>
+     * 
+     * If you're wondering why we can't just execute the query and look at the return results
+     * to see whether it was an update or a select, the reason is that for update queries we
+     * need to do stuff before we execute them -- like start transactions if auto-commit is off.
+     * 
+     * @param string $sql
+     * @return boolean Whether statement is a SELECT SQL statement.
+     * @see execute()
+     */
+    protected function isSelect($sql)
+    {
+        // is first word is SELECT, then return true, unless it's SELECT INTO ...
+        // this doesn't, however, take comments into account ...
+        $sql = trim($sql);
+        return (stripos($sql, 'select') === 0 && stripos($sql, 'select into ') !== 0);
+    }
+
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return object Creole::ResultSet
+     * @throws SQLException If there is an error executing the specified query.
+     * @todo -cStatementCommon Put native query execution logic in statement subclasses.
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {
+        $this->updateCount = null;
+        if ($this->limit > 0 || $this->offset > 0) {
+            $this->conn->applyLimit($sql, $this->offset, $this->limit);
+        }
+        $this->resultSet = $this->conn->executeQuery($sql, $fetchmode);
+        return $this->resultSet;
+    }
+
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement in this PreparedStatement object.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($sql) 
+    {
+        if ($this->resultSet) $this->resultSet->close();
+        $this->resultSet = null;
+        $this->updateCount = $this->conn->executeUpdate($sql);
+        return $this->updateCount;
+    }
+    
+    /**
+     * Gets next result set (if this behavior is supported by driver).
+     * Some drivers (e.g. MSSQL) support returning multiple result sets -- e.g.
+     * from stored procedures.
+     *
+     * This function also closes any current restult set.
+     *
+     * Default behavior is for this function to return false.  Driver-specific
+     * implementations of this class can override this method if they actually
+     * support multiple result sets.
+     * 
+     * @return boolean True if there is another result set, otherwise false.
+     */
+    public function getMoreResults()
+    {
+        if ($this->resultSet) $this->resultSet->close();        
+        $this->resultSet = null;
+        return false;        
+    }
+     
+    /**
+     * Gets the db Connection that created this statement.
+     * @return Connection
+     */
+    public function getConnection()
+    {
+        return $this->conn;
+    }
+}

Added: trunk/vendor/creole/contrib/DebugConnection.php
===================================================================
--- trunk/vendor/creole/contrib/DebugConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/contrib/DebugConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,91 @@
+<?php
+  /**
+   * Debug implementation of Connection.
+   *
+   * This is a Connection that implements the decorator pattern, wrapping around
+   * the true Connection object (stored in $childConnection). This Connection
+   * tracks information about queries executed and makes that information available
+   * for debugging purposes. The information tracked is the last query executed
+   * on the connection (getLastExecutedQuery()) and the total number of
+   * queries executed on the connection thus far (getNumQueriesExecuted()).
+   *
+   * To use this debug connection, you need to register it as a new Creole
+   * driver that handles all connection types. To do this, call the following
+   * before calling Creole::getConnection():
+   *
+   * <code>
+   * Creole::registerDriver('*', 'creole.drivers.debug.DebugConnection');
+   * </code>
+   *
+   * The next call to Creole::getConnection() will return an instance of
+   * DebugConnection.
+   * 
+   * @author Michael Sims
+   * @package creole.drivers.debug
+   */
+  class DebugConnection implements Connection {
+    /** @var Connection */
+     private $childConnection = null;
+     /** @var int */
+     private $numQueriesExecuted = 0;
+     /** @var string */
+     private $lastExecutedQuery = '';
+     /**
+      * @var object Instance of PEAR Log (or other class with log() method).*/
+     private $logger;
+     /** 
+      * Sets a Logger class (e.g. PEAR Log) to use for logging.
+      * The logger class must have a log() method.  All messages are logged at default log level.
+      * @param object $logger
+      */
+     public function setLogger($logger)
+     {
+       $this->logger = $logger;
+     }
+     /**
+      * Returns the number of queries executed on this connection so far
+      *
+      * @return int
+      */
+     public function getNumQueriesExecuted()
+     {
+       return $this->numQueriesExecuted;
+     }
+     /**
+      * Returns the last query executed on this connection
+      *
+      * @return string
+      */
+     public function getLastExecutedQuery()
+     {
+       return $this->lastExecutedQuery;
+     }
+     
+     /**
+      * connect()
+      */
+      public function connect($dsninfo, $flags = 0)
+      {
+        if (!($driver = Creole::getDriver($dsninfo['phptype']))) {
+          throw new SQLException("No driver has been registered to handle connection type: $type");
+        }		
+        $connectionClass = Creole::import($driver);
+        $this->childConnection = new $connectionClass();
+        $this->log("connect(): DSN: ". var_export($dsninfo, true) . ", FLAGS: " . var_export($flags, true));
+        return $this->childConnection->connect($dsninfo, $flags);
+      }	
+      
+      /**
+       * @see Connection::getDatabaseInfo()
+       */
+      public function getDatabaseInfo()
+      {
+        return $this->childConnection->getDatabaseInfo();
+      }	
+      
+      /**
+       * @see Connection::getIdGenerator()
+       */
+      public function getIdGenerator()	
+      {
+        return $this->childConnection->getIdGenerator();
	}
	
	/**
	 * @see Connection::prepareStatement()
	 */
	public function prepareStatement($sql)
	{
		$this->log("prepareStatement(): $sql");
		$obj = $this->childConnection->prepareStatement($sql);
		$objClass = get_class($obj);		
		return new $objClass($this, $sql);
	}
	
	/**
	 * @see Connection::createStatement()
	 */
	public function createStatement()
	{
		$obj = $this->childConnection->createStatement();
		$objClass = get_class($obj);		
		return new $objClass($this);
	}
	
	/**
	 * @see Connection::applyLimit()
	 */
	public function applyLimit(&$sql, $offset, $limit)
	{
		$this->log("applyLimit(): $sql, offset: $offset, limit: $limit");
		return $this->childConnection->applyLimit($sql, $offset, $limit);
	}
	
	/**
	 * @see Connection::close()
	 */
	public function close()
	{
		$this->log("close(): Closing connection.");
		return $this->childConnection->close();
	}
	
	/**
	 * @see Connection::executeQuery()
	 */
	publ!
 ic function executeQuery($sql, $fetchmode = null)
	{
		$this->log("executeQuery(): $sql");
		$this->lastExecutedQuery = $sql;
		$this->numQueriesExecuted++;
		return $this->childConnection->executeQuery($sql, $fetchmode);	
	}
	
	/**
	 * @see Connection::executeUpdate()
	 */
	public function executeUpdate($sql)
	{
		$this->log("executeUpdate(): $sql");
		$this->lastExecutedQuery = $sql;
		$this->numQueriesExecuted++;
		return $this->childConnection->executeUpdate($sql);	
	}
	
	/**
	 * @see Connection::getUpdateCount()
	 */
	public function getUpdateCount()
	{
		return $this->childConnection->getUpdateCount();
	}
	
	/**
	 * @see Connection::prepareCall()
	 **/
	public function prepareCall($sql)
	{
		$this->log("prepareCall(): $sql");
		return $this->childConnection->prepareCall($sql);
	}
	
	/**
	 * @see Connection::getResource()
	 */
	public function getResource()
	{
		return $this->childConnection->getResource();
	}
	
	/**
	 * @see Connection::connect()
	 */
	public function!
  getDSN()
	{
		return $this->childConnection->getDSN();
	}
	
	!
 /**
	 * 
@see Connection::getFlags()
	 */
	public function getFlags()
	{
		return $this->childConnection->getFlags();
	}
	
	/**
	 * @see Connection::begin()
	 */
	public function begin()
	{
		$this->log("Beginning transaction.");
		return $this->childConnection->begin();
	}
	
	/**
	 * @see Connection::commit()
	 */
	public function commit()
	{
		$this->log("Committing transaction.");
		return $this->childConnection->commit();
	}
	
	/**
	 * @see Connection::rollback()
	 */
	public function rollback()
	{
		$this->log("Rolling back transaction.");
		return $this->childConnection->rollback();
	}
	
	/**
	 * @see Connection::setAutoCommit()
	 */
	public function setAutoCommit($bit)
	{
		$this->log("Setting autocommit to: " . var_export($bit, true));
		return $this->childConnection->setAutoCommit($bit);
	}
	
	/**
	 * @see Connection::getAutoCommit()
	 */
	public function getAutoCommit()
	{
		return $this->childConnection->getAutoCommit();
	}
	
	/**
	 * Private function that logs message usi!
 ng specified logger (if provided).
	 * @param string $msg Message to log.
	 */
	private function log($msg)
	{
		if ($this->logger) {
			$this->logger->log($msg);
		}
	}

}

Added: trunk/vendor/creole/drivers/mssql/MSSQLCallableStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLCallableStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLCallableStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,478 @@
+<?php
+/*
+ *  $Id: MSSQLCallableStatement.php,v 1.20 2005/09/16 13:09:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/drivers/mssql/MSSQLPreparedStatement.php';
+require_once 'creole/CallableStatement.php';
+include_once 'creole/CreoleTypes.php';
+
+/**
+ * MS SQL Server class to handle stored procedure execution.
+ * 
+ * Developer note: 
+ *
+ *    There is no CallableStatement superclass.  Unlike JDBC, Creole
+ *    uses abstract parent classes rather than interfaces -- in order
+ *    to minimize code duplication.  Since PHP doesn't support multiple
+ *    inheritance, the DRIVERCallableStatement class cannot extend both
+ *    the DRIVERPreparedStatement class and the would-be abstract
+ *    CallableStatement class.
+ *
+ * @author Hans Lellelid <hans at xmpl.org>
+ * @version $Revision: 1.20 $
+ * @package creole.drivers.mssql
+ */
+class MSSQLCallableStatement extends MSSQLPreparedStatement implements CallableStatement {
+    
+    /** Output variables */
+    private $boundOutVars = array();
+    
+    /**
+     * Match Creole types to SQL Server types
+     * @var array
+     */
+    private static $typeMap = array(
+        CreoleTypes::BOOLEAN => SQLBIT,
+        CreoleTypes::BIGINT => SQLINT4,
+        CreoleTypes::SMALLINT => SQLINT2,
+        CreoleTypes::TINYINT => SQLINT2,
+        CreoleTypes::INTEGER => SQLINT4,
+        CreoleTypes::CHAR => SQLCHAR,
+        CreoleTypes::VARCHAR => SQLVARCHAR,
+        CreoleTypes::TEXT => SQLTEXT,
+        CreoleTypes::FLOAT => SQLFLT8,
+        CreoleTypes::DOUBLE => SQLFLT8,
+        CreoleTypes::DATE => SQLVARCHAR,
+        CreoleTypes::TIME => SQLVARCHAR,
+        CreoleTypes::TIMESTAMP => SQLVARCHAR,
+        CreoleTypes::VARBINARY => SQLVARCHAR,
+        CreoleTypes::NUMERIC => SQLINT4,
+        CreoleTypes::DECIMAL => SQLFLT8                                        
+    );
+    
+    /**
+     * Statement created by mssql_init()
+     * @var resource
+     */
+    private $stmt;
+
+
+    /**
+     * The result resource.
+     * @var resource
+     */
+    private $result;
+    
+    /**
+     * Construct new MSSQLCallableStatement.
+     * 
+     * @param Connection $conn
+     * @param resource $stmt
+     */
+    public function __construct(Connection $conn, $stmt)
+    {
+        print " - > IN CONSTRUCTOR \n";
+        $this->conn = $conn;
+        $this->stmt = $stmt;
+    }   
+    
+    /**
+     * @see CallableStatement::getResource()
+     */
+    public function getResource()
+    {
+        return $this->stmt;
+    }
+        
+    /**
+     * @see CallableStatement::close()
+     */
+    function close()
+    {
+        @mssql_free_statement($this->stmt);
+        $this->rsFetchCount = 0;
+    }
+    
+    /**
+     * @see CallableStatement::executeQuery()
+     */
+    function executeQuery($p1 = null, $fetchmode = null)
+    {
+        $params = null;
+        if ($fetchmode !== null) {
+            $params = $p1;
+        } elseif ($p1 !== null) {
+            if (is_array($p1)) $params = $p1;
+            else $fetchmode = $p1;
+        }
+        
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }                
+        
+        $this->result = mssql_execute($this->stmt);
+        if (!$this->result) {
+            throw new SQLException('unable to execute callable statement', mssql_get_last_message());
+        }
+        
+        return new MSSQLResultSet($this->conn, $this->result, $fetchmode, $this->offset, $this->limit);
+    }
+    
+    /**
+     * @see CallableStatement::getMoreResults()
+     */
+    function getMoreResults()
+    {
+        $this->rsFetchCount++; // we track this because 
+        $hasMore = mssql_next_result($this->result);
+        if ($this->resultSet) $this->resultSet->close();                    
+        if ($hasMore) {
+            $clazz = $this->resultClass;
+            $this->resultSet = new $clazz($this, $this->result);
+        } else {
+            $this->resultSet = null;
+        }
+        return $hasMore;
+    }
+
+    /**
+     * @see CallableStatement::registerOutParameter()
+     */
+    function registerOutParameter($paramIndex, $sqlType)
+    {
+        mssql_bind($this->stmt, $paramIndex, $this->boundOutVars[$paramIndex], self::$typeMap[$sqlType], true);
+    }
+    
+    /**
+     * @see CallableStatement::setArray()
+     */
+    function setArray($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $value = serialize($value);
+            mssql_bind($this->stmt, $paramIndex, $value, SQLTEXT, $out);
+        }
+    }
+
+    /**
+     * @see CallableStatement::setBoolean()
+     */
+    function setBoolean($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $value = ($value) ? 1 : 0;
+            mssql_bind($this->stmt, $paramIndex, $value, SQLBIT, $out);
+        }
+    }
+    
+
+    /**
+     * @see CallableStatement::setBlob()
+     */
+    function setBlob($paramIndex, $blob, $out = false) 
+    {
+        if ($blob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_object($blob)) {
+                $blob = $blob->__toString();
+            }
+            if ($out) $this->boundOutVars[$paramIndex] = &$blob; // reference means that changes to value, will be reflected        
+            $data = unpack("H*hex", $blob);
+            mssql_bind($this->stmt, $paramIndex, $data, SQLTEXT, $out);
+        }
+    } 
+    
+    /**
+     * @see CallableStatement::setClob()
+     */
+    function setClob($paramIndex, $clob, $out = false) 
+    {
+        if ($clob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_object($clob)) {
+                $clob = $clob->__toString();
+            }
+            if ($out) $this->boundOutVars[$paramIndex] = &$clob; // reference means that changes to value, will be reflected
+            mssql_bind($this->stmt, $paramIndex, $clob, SQLTEXT, $out);
+        }
+    }
+
+    /**
+     * @see CallableStatement::setDate()
+     */
+    function setDate($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date("Y-m-d", $value);
+            mssql_bind($this->stmt, $paramIndex, $value, SQLVARCHAR, $out);
+        }
+    } 
+        
+    /**
+     * @see CallableStatement::setFloat()
+     */
+    function setFloat($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $value = (float) $value;
+            mssql_bind($this->stmt, $paramIndex, $value, SQLFLT8, $out);
+        }
+    }
+    
+    /**
+     * @see CallableStatement::setInt()
+     */
+    function setInt($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $value = (int) $value;
+            mssql_bind($this->stmt, $paramIndex, $value, SQLINT4, $out);
+        }
+    }    
+    
+    /**
+     * @see CallableStatement::setNull()
+     */
+    function setNull($paramIndex) 
+    {
+        // hopefully type isn't essential here :)
+        $value = null; // wants a var to pass by reference
+        mssql_bind($this->stmt, $paramIndex, $value, $type=null, $out=false, $is_null=true);
+    }
+
+    /**
+     * @see CallableStatement::setString()
+     */
+    function setString($paramIndex, $value, $out = false) 
+    {    
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            $value = (string) $value;            
+            mssql_bind($this->stmt, $paramIndex, $value, SQLVARCHAR, $out);
+        }
+    } 
+    
+    /**
+     * @see CallableStatement::setTime()
+     */
+    function setTime($paramIndex, $value, $out = false) 
+    {    
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date("H:i:s", $value);
+            mssql_bind($this->stmt, $paramIndex, $value, SQLVARCHAR, $out);
+        }
+    }
+    
+    /**
+     * @see CallableStatement::setTimestamp()
+     */
+    function setTimestamp($paramIndex, $value, $out = false) 
+    {
+        if ($out) $this->boundOutVars[$paramIndex] = &$value; // reference means that changes to value, will be reflected
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date('Y-m-d H:i:s', $value);
+            mssql_bind($this->stmt, $paramIndex, $value, SQLVARCHAR, $out);
+        }
+    }            
+        
+    /**
+     * @see CallableStatement::getArray()
+     */
+    function getArray($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        return (array) unserialize($this->boundOutVars[$paramIndex]);
+    } 
+
+    /**
+     * @see CallableStatement::getBoolean()
+     */
+    function getBoolean($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        return (boolean) $this->boundOutVars[$paramIndex];
+    }
+            
+    /**
+     * @see CallableStatement::getBlob()
+     */
+    function getBlob($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        require_once 'creole/util/Blob.php';
+        $b = new Blob();
+        $b->setContents($this->boundOutVars[$paramIndex]);
+        return $b;
+    }     
+
+    /**
+     * @see CallableStatement::getClob()
+     */
+    function getClob($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        require_once 'creole/util/Clob.php';
+        $c = new Clob();
+        $c->setContents($this->boundOutVars[$paramIndex]);
+        return $c;
+    } 
+    
+    /**
+     * @see CallableStatement::getDate()
+     */
+    function getDate($paramIndex, $fmt = '%Y-%m-%d') 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        
+        $ts = strtotime($this->boundOutVars[$paramIndex]);        
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . $paramIndex . " to timestamp: " . $this->boundOutVars[$paramIndex]);
+        }        
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+        
+        return $this->boundOutVars[$paramIndex];
+    } 
+
+    /**
+     * @param mixed $paramIndex Column name (string) or index (int).
+     * @return float
+     */
+    function getFloat($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        return (float) $this->boundOutVars[$paramIndex];
+    }
+
+    /**
+     * @see CallableStatement::getInt()
+     */
+    function getInt($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        return (int) $this->boundOutVars[$paramIndex];
+    }            
+
+    /**
+     * @see CallableStatement::getString()
+     */
+    function getString($paramIndex) 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        return (string) $this->boundOutVars[$paramIndex];
+    } 
+
+    /**
+     * @see CallableStatement::getTime()
+     */
+    function getTime($paramIndex, $format='%X') 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+        
+        $ts = strtotime($this->boundOutVars[$paramIndex]);        
+        if ($ts === -1  || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . $paramIndex . " to timestamp: " . $this->boundOutVars[$paramIndex]);
+        }        
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+            
+    }
+
+    /**
+     * @see CallableStatement::getTimestamp()
+     */
+    function getTimestamp($paramIndex, $format = 'Y-m-d H:i:s') 
+    {
+        if (!array_key_exists($paramIndex, $this->boundOutVars)) {
+            throw new SQLException('Requesting variable not bound to output var: '.$paramIndex);
+        }
+        if ($this->boundOutVars[$paramIndex] === null) { return null; }
+                
+        $ts = strtotime($this->boundOutVars[$paramIndex]);        
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            throw new SQLException("Unable to convert value at column " . $paramIndex . " to timestamp: " . $this->boundOutVars[$paramIndex]);
+        }        
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+    }    
+
+}

Added: trunk/vendor/creole/drivers/mssql/MSSQLConnection.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,283 @@
+<?php
+
+/*
+ *  $Id: MSSQLConnection.php,v 1.25 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+include_once 'creole/drivers/mssql/MSSQLResultSet.php';
+
+/**
+ * MS SQL Server implementation of Connection.
+ * 
+ * If you have trouble with BLOB / CLOB support
+ * --------------------------------------------
+ * 
+ * You may need to change some PHP ini settings.  In particular, the following settings
+ * set the text size to maximum which should get around issues with truncated data:
+ * <code>
+ *  ini_set('mssql.textsize', 2147483647);
+ *  ini_set('mssql.textlimit', 2147483647);
+ * </code>
+ * We do not set these by default (anymore) because they do not apply to cases where MSSQL
+ * is being used w/ FreeTDS.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @author    Stig Bakken <ssb at fast.no> 
+ * @author    Lukas Smith
+ * @version   $Revision: 1.25 $
+ * @package   creole.drivers.mssql
+ */ 
+class MSSQLConnection extends ConnectionCommon implements Connection {        
+    
+    /** Current database (used in mssql_select_db()). */
+    private $database;
+    
+    /**
+     * @see Connection::connect()
+     */
+    function connect($dsninfo, $flags = 0)
+    {                
+        if (!extension_loaded('mssql') && !extension_loaded('sybase') && !extension_loaded('sybase_ct')) {
+            throw new SQLException('mssql extension not loaded');
+        }
+
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+                
+        $persistent = ($flags & Creole::PERSISTENT === Creole::PERSISTENT);
+
+        $user = $dsninfo['username'];
+        $pw = $dsninfo['password'];
+        $dbhost = $dsninfo['hostspec'] ? $dsninfo['hostspec'] : 'localhost';
+		
+		if (PHP_OS == "WINNT" || PHP_OS == "WIN32") {
+            $portDelimiter = ",";
+        } else {
+            $portDelimiter = ":";
+        }
+       
+        if(!empty($dsninfo['port'])) {
+                $dbhost .= $portDelimiter.$dsninfo['port'];
+        } else {
+                $dbhost .= $portDelimiter.'1433';
+        }
+		
+        $connect_function = $persistent ? 'mssql_pconnect' : 'mssql_connect';
+
+        if ($dbhost && $user && $pw) {
+            $conn = @$connect_function($dbhost, $user, $pw);
+        } elseif ($dbhost && $user) {
+            $conn = @$connect_function($dbhost, $user);
+        } else {
+            $conn = @$connect_function($dbhost);
+        }
+        if (!$conn) {
+            throw new SQLException('connect failed', mssql_get_last_message());
+        }
+        
+        if ($dsninfo['database']) {
+            if (!@mssql_select_db($dsninfo['database'], $conn)) {
+                throw new SQLException('No database selected');               
+            }
+            
+            $this->database = $dsninfo['database'];
+        }
+        
+        $this->dblink = $conn;        
+    }    
+    
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/mssql/metadata/MSSQLDatabaseInfo.php';
+        return new MSSQLDatabaseInfo($this);
+    }
+    
+     /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/mssql/MSSQLIdGenerator.php';
+        return new MSSQLIdGenerator($this);
+    }
+    
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql) 
+    {
+        require_once 'creole/drivers/mssql/MSSQLPreparedStatement.php';
+        return new MSSQLPreparedStatement($this, $sql);
+    }
+    
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/mssql/MSSQLStatement.php';
+        return new MSSQLStatement($this);
+    }
+    
+    /**
+     * Returns false since MSSQL doesn't support this method.
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        return false;
+    }
+    
+    /**
+     * @see Connection::close()
+     */
+    function close()
+    {
+        $ret = @mssql_close($this->dblink);
+        $this->dblink = null;
+        return $ret;
+    }
+    
+    /**
+     * @see Connection::executeQuery()
+     */
+    function executeQuery($sql, $fetchmode = null)
+    {            
+        $this->lastQuery = $sql;
+        if (!@mssql_select_db($this->database, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }       
+        $result = @mssql_query($sql, $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not execute query', mssql_get_last_message());
+        }
+        return new MSSQLResultSet($this, $result, $fetchmode);
+    }
+
+    /**
+     * @see Connection::executeUpdate()
+     */
+    function executeUpdate($sql)
+    {    
+        
+        $this->lastQuery = $sql;
+        if (!mssql_select_db($this->database, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+        
+        $result = @mssql_query($sql, $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not execute update', mssql_get_last_message(), $sql);
+        }
+        
+        return $this->getUpdateCount();
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        $result = @mssql_query('BEGIN TRAN', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not begin transaction', mssql_get_last_message());
+        }
+    }
+    
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        if (!@mssql_select_db($this->database, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+        $result = @mssql_query('COMMIT TRAN', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not commit transaction', mssql_get_last_message());
+        }
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        if (!@mssql_select_db($this->database, $this->dblink)) {            
+            throw new SQLException('no database selected');
+        }
+        $result = @mssql_query('ROLLBACK TRAN', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not rollback transaction', mssql_get_last_message());
+        }
+    }
+
+    /**
+     * Gets the number of rows affected by the last query.
+     * if the last query was a select, returns 0.
+     *
+     * @return int Number of rows affected by the last query
+     * @throws SQLException
+     */
+    function getUpdateCount()
+    {       
+        $res = @mssql_query('select @@rowcount', $this->dblink);
+        if (!$res) {
+            throw new SQLException('Unable to get affected row count', mssql_get_last_message());
+        }
+        $ar = @mssql_fetch_row($res);
+        if (!$ar) {
+            $result = 0;
+        } else {
+            @mssql_free_result($res);
+            $result = $ar[0];
+        }
+        
+        return $result;
+    }          
+    
+    
+    /**
+     * Creates a CallableStatement object for calling database stored procedures.
+     * 
+     * @param string $sql
+     * @return CallableStatement
+     * @throws SQLException
+     */
+    function prepareCall($sql) 
+    {             
+        require_once 'creole/drivers/mssql/MSSQLCallableStatement.php';
+        $stmt = mssql_init($sql);
+        if (!$stmt) {
+            throw new SQLException('Unable to prepare statement', mssql_get_last_message(), $sql);
+        }
+        return new MSSQLCallableStatement($this, $stmt);
+    }
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/mssql/MSSQLIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,62 @@
+<?php
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * MSSQL IdGenerator implimenation.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.drivers.mssql
+ */
+class MSSQLIdGenerator implements IdGenerator {
+    
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+    
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return false;
+    }    
+    
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return true;
+    }
+        
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::AUTOINCREMENT;
+    }
+    
+    /**
+     * @see IdGenerator::getId()
+     */
+    public function getId($unused = null)
+    {
+        $rs = $this->conn->executeQuery("select @@identity", ResultSet::FETCHMODE_NUM);
+        $rs->next();
+        return $rs->getInt(1);        
+    }
+    
+}
+

Added: trunk/vendor/creole/drivers/mssql/MSSQLPreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLPreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLPreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,98 @@
+<?php
+/*
+ *  $Id: MSSQLPreparedStatement.php,v 1.12 2004/06/13 02:31:07 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * MSSQL specific PreparedStatement functions.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole.drivers.mssql
+ */
+class MSSQLPreparedStatement extends PreparedStatementCommon implements PreparedStatement {
+    
+    /**
+     * MSSQL-specific implementation of setBlob().
+     * 
+     * If you are having trouble getting BLOB data into the database, see the phpdoc comment
+     * in the MSSQLConnection for some PHP ini values that may need to be set. (This also
+     * applies to CLOB support.)
+     * 
+     * @param int $paramIndex
+     * @param mixed $value Blob object or string.
+     * @return void
+     */
+    function setBlob($paramIndex, $blob) 
+    {
+        if ($blob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // they took magic __toString() out of PHP5.0.0; this sucks
+            if (is_object($blob)) {
+                $blob = $blob->__toString();
+            }            
+            $data = unpack("H*hex", $blob);
+            $this->boundInVars[$paramIndex] = '0x'.$data['hex']; // no surrounding quotes!
+        }        
+    }
+
+    
+    /**
+     * Add quotes using str_replace.
+     * This is not as thorough as MySQL.
+     */
+    protected function escape($subject)
+    {
+        // use this instead of magic_quotes_sybase + addslashes(),
+        // just in case multiple RDBMS being used at the same time
+        return str_replace("'", "''", $subject);
+    }
+    
+    /**
+     * MSSQL must emulate OFFSET/LIMIT support.
+     */
+    public function executeQuery($p1 = null, $fetchmode = null)
+    {    
+        $params = null;
+        if ($fetchmode !== null) {
+            $params = $p1;
+        } elseif ($p1 !== null) {
+            if (is_array($p1)) $params = $p1;
+            else $fetchmode = $p1;
+        }
+        
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+        
+        $this->updateCount = null; // reset
+        $sql = $this->replaceParams();                
+        
+        $this->resultSet = $this->conn->executeQuery($sql, $fetchmode);
+        $this->resultSet->_setOffset($this->offset);
+        $this->resultSet->_setLimit($this->limit);                
+        return $this->resultSet;
+    }
+}

Added: trunk/vendor/creole/drivers/mssql/MSSQLResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,159 @@
+<?php
+/*
+ *  $Id: MSSQLResultSet.php,v 1.20 2004/03/20 04:16:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * MSSQL implementation of ResultSet.
+ *
+ * MS SQL does not support LIMIT or OFFSET natively so the methods
+ * in here need to perform some adjustments and extra checking to make sure
+ * that this behaves the same as RDBMS drivers using native OFFSET/LIMIT.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.20 $
+ * @package   creole.drivers.mssql
+ */
+class MSSQLResultSet extends ResultSetCommon implements ResultSet {    
+    
+    /**
+     * Offset at which to start reading rows.
+     * @var int
+     */
+    private $offset = 0;
+    
+    /**
+     * Maximum rows to retrieve, or 0 if all.
+     * @var int
+     */
+    private $limit = 0;   
+    
+    /**
+     * This MSSQL-only function exists to set offset after ResultSet is instantiated.
+     * This function should be "protected" in Java sense: only available to classes in package.
+     * THIS METHOD SHOULD NOT BE CALLED BY ANYTHING EXCEPTION DRIVER CLASSES.
+     * @param int $offset New offset.  If great than 0, then seek(0) will be called to move cursor.
+     * @access protected
+     */
+    public function _setOffset($offset)
+    {
+        $this->offset = $offset;
+        if ($offset > 0) {
+            $this->seek(0);  // 0 becomes $offset by seek() method
+        }
+    }
+    
+    /**
+     * This MSSQL-only function exists to set limit after ResultSet is instantiated.
+     * This function should be "protected" in Java sense: only available to classes in package.
+     * THIS METHOD SHOULD NOT BE CALLED BY ANYTHING EXCEPTION DRIVER CLASSES.
+     * @param int $limit New limit.
+     * @access protected
+     */
+    public function _setLimit($limit)
+    {
+        $this->limit = $limit;
+    }
+    
+    /**
+     * @see ResultSet::seek()
+     */ 
+    function seek($rownum)
+    {
+        // support emulated OFFSET
+        $actual = $rownum + $this->offset;
+        
+        if (($this->limit > 0 && $rownum >= $this->limit) || $rownum < 0) {
+                    // have to check for rownum < 0, because mssql_seek() won't
+                    // complain if the $actual is valid.
+            return false;
+        }
+                
+        // MSSQL rows start w/ 0, but this works, because we are
+        // looking to move the position _before_ the next desired position
+         if (!@mssql_data_seek($this->result, $actual)) {
+                return false;
+        }
+
+        $this->cursorPos = $rownum;
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::next()
+     */
+    function next()
+    {
+        // support emulated LIMIT
+        if ( $this->limit > 0 && ($this->cursorPos >= $this->limit) ) {
+            $this->afterLast();
+            return false;
+        }
+        
+        $this->fields = mssql_fetch_array($this->result, $this->fetchmode);        
+                
+        if (!$this->fields) {
+            if ($errmsg = mssql_get_last_message()) {
+                throw new SQLWarning("Error fetching result", $errmsg);
+             } else {
+                // We've advanced beyond end of recordset.
+                $this->afterLast();
+                return false;
+             }          
+        }
+        
+        if (!$this->ignoreAssocCase) {
+            $this->fields = array_change_key_case($this->fields, CASE_LOWER);
+        }
+        
+        // Advance cursor position
+        $this->cursorPos++;
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    function getRecordCount()
+    {
+        $rows = @mssql_num_rows($this->result);
+        if ($rows === null) {
+            throw new SQLException('Error getting record count', mssql_get_last_message());
+        }
+        // adjust count based on emulated LIMIT/OFFSET
+        $rows -= $this->offset;
+        return ($this->limit > 0 && $rows > $this->limit ? $this->limit : $rows);
+    }
+
+    /**
+     * @see ResultSet::close()
+     */ 
+    function close()
+    {
+        $ret = @mssql_free_result($this->result);
+        $this->result = false;
+        $this->fields = array();
+        $this->limit = 0;
+        $this->offset = 0;        
+    }   
+
+}

Added: trunk/vendor/creole/drivers/mssql/MSSQLStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,72 @@
+<?php
+/*
+ *  $Id: MSSQLStatement.php,v 1.4 2004/06/13 02:31:07 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/common/StatementCommon.php';
+require_once 'creole/Statement.php';
+
+/**
+ * Class that contains MSSQL functionality for Statements.
+ * 
+ * @author   Hans Lellelid <hans at xmpl.org>
+ * @version  $Revision: 1.4 $
+ * @package  creole.drivers.mssql
+ */
+class MSSQLStatement extends StatementCommon implements Statement {
+    
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * 
+     * @param string $sql This method may optionally be called with the SQL statement.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return object Creole::ResultSet
+     * @throws SQLException If there is an error executing the specified query.
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {
+        $this->updateCount = null;                
+        $this->resultSet = $this->conn->executeQuery($sql, $fetchmode);
+        $this->resultSet->_setOffset($this->offset);
+        $this->resultSet->_setLimit($this->limit);
+        return $this->resultSet;
+    }
+
+
+    /**
+     * Gets next result set (if this behavior is supported by driver).
+     * Some drivers (e.g. MSSQL) support returning multiple result sets -- e.g.
+     * from stored procedures.
+     *
+     * This function also closes any current restult set.
+     *
+     * Default behavior is for this function to return false.  Driver-specific
+     * implementations of this class can override this method if they actually
+     * support multiple result sets.
+     * 
+     * @return boolean True if there is another result set, otherwise false.
+     */
+    public function getMoreResults()
+    {
+        if ($this->resultSet) $this->resultSet->close();        
+        $this->resultSet = null;
+        return false;        
+    }
+         
+}

Added: trunk/vendor/creole/drivers/mssql/MSSQLTypes.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/MSSQLTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/MSSQLTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,94 @@
+<?php
+
+/*
+ *  $Id: MSSQLTypes.php,v 1.8 2004/07/27 23:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * MSSQL types / type map.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.drivers.mssql
+ */
+class MSSQLTypes extends CreoleTypes {
+
+    /** Map PostgreSQL native types to Creole (JDBC) types. */
+    private static $typeMap = array (
+                "binary" => CreoleTypes::BINARY,
+                "bit" => CreoleTypes::BOOLEAN, 
+                "char" => CreoleTypes::CHAR,
+                "datetime" => CreoleTypes::TIMESTAMP,
+                "decimal() identity"  => CreoleTypes::DECIMAL,
+                "decimal"  => CreoleTypes::DECIMAL,                
+                "image" => CreoleTypes::LONGVARBINARY,
+                "int" => CreoleTypes::INTEGER,
+                "int identity" => CreoleTypes::INTEGER,
+                "integer" => CreoleTypes::INTEGER,
+                "money" => CreoleTypes::DECIMAL, 
+                "nchar" => CreoleTypes::CHAR, 
+                "ntext" => CreoleTypes::LONGVARCHAR, 
+                "numeric() identity" => CreoleTypes::NUMERIC,
+                "numeric" => CreoleTypes::NUMERIC,                  
+                "nvarchar" => CreoleTypes::VARCHAR,
+                "real" => CreoleTypes::REAL, 
+                "float" => CreoleTypes::FLOAT,
+                "smalldatetime" => CreoleTypes::TIMESTAMP, 
+                "smallint" => CreoleTypes::SMALLINT, 
+                "smallint identity" => CreoleTypes::SMALLINT,
+                "smallmoney" => CreoleTypes::DECIMAL,
+                "sysname" => CreoleTypes::VARCHAR,
+                "text" => CreoleTypes::LONGVARCHAR,
+                "timestamp" => CreoleTypes::BINARY,
+                "tinyint identity" => CreoleTypes::TINYINT, 
+                "tinyint" => CreoleTypes::TINYINT,                 
+                "uniqueidentifier" => CreoleTypes::CHAR,
+                "varbinary" => CreoleTypes::VARBINARY,
+                "varchar" => CreoleTypes::VARCHAR,
+                "uniqueidentifier" => CreoleTypes::CHAR,
+                // SQL Server 2000 only
+                "bigint identity" => CreoleTypes::BIGINT,
+                "bigint" => CreoleTypes::BIGINT,                
+                "sql_variant" => CreoleTypes::VARCHAR,
+                ); 
+                 
+    /** Reverse lookup map, created on demand. */
+    private static $reverseMap = null;
+    
+    public static function getType($mssqlType)
+    {    
+        $t = strtolower($mssqlType);
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::OTHER;
+        }
+    }
+    
+    public static function getNativeType($creoleType)
+    {
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+    
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/mssql/metadata/MSSQLDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/metadata/MSSQLDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/metadata/MSSQLDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,69 @@
+<?php
+/*
+ *  $Id: MSSQLDatabaseInfo.php,v 1.10 2004/06/27 04:26:13 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * MSSQL impementation of DatabaseInfo.
+ *
+ * @author    Hans Lellelid
+ * @version   $Revision: 1.10 $
+ * @package   creole.drivers.mssql.metadata
+ */ 
+class MSSQLDatabaseInfo extends DatabaseInfo {
+    
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/mssql/metadata/MSSQLTableInfo.php';
+        
+        $dsn = $this->conn->getDSN();
+        
+        
+        if (!@mssql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+             
+        $result = mssql_query("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME <> 'dtproperties'", $this->dblink);
+    
+        if (!$result) {
+            throw new SQLException("Could not list tables", mssql_get_last_message());            
+        }
+        
+        while ($row = mssql_fetch_row($result)) {
+            $this->tables[strtoupper($row[0])] = new MSSQLTableInfo($this, $row[0]);            
+        }
+    }            
+    
+    /**
+     * 
+     * @return void 
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // there are no sequences -- afaik -- in MSSQL.
+    }
+        
+}

Added: trunk/vendor/creole/drivers/mssql/metadata/MSSQLTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mssql/metadata/MSSQLTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mssql/metadata/MSSQLTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,178 @@
+<?php
+/*
+ *  $Id: MSSQLTableInfo.php,v 1.12 2004/12/17 09:58:40 micha Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/CreoleTypes.php';
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * MSSQL implementation of TableInfo.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole.drivers.mssql.metadata
+ */
+class MSSQLTableInfo extends TableInfo {    
+    
+    /**
+     * Loads the columns for this table.
+     * @return void
+     */                          
+    protected function initColumns() 
+    {    
+        include_once 'creole/metadata/ColumnInfo.php';
+        include_once 'creole/drivers/mssql/MSSQLTypes.php';
+        
+        if (!@mssql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+         
+        $res = mssql_query("sp_columns ".$this->name, $this->dblink);
+        if (!$res) {
+            throw new SQLException('Could not get column names', mssql_get_last_message());
+        }
+        
+        while ($row = mssql_fetch_array($res)) {
+            $name = $row['COLUMN_NAME'];
+            $type = $row['TYPE_NAME'];
+            $length = $row['LENGTH'];
+            $is_nullable = $row['NULLABLE'];
+            $default = $row['COLUMN_DEF'];
+            $precision = $row['PRECISION'];
+            $this->columns[$name] = new ColumnInfo($this, $name, MSSQLTypes::getType($type), $type, $length, $precision, $is_nullable, $default);
+        }
+                
+        $this->colsLoaded = true;
+    }
+
+    /**
+     * Loads the indexes for this table.
+     * @return void
+     */      
+    protected function initIndexes()
+    {
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+        include_once 'creole/metadata/IndexInfo.php';
+        
+        if (!@mssql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        } 
+        
+        $res = mssql_query("sp_indexes_rowset ".$this->name, $this->dblink);
+        
+        while ($row = mssql_fetch_array($res)) {
+            $name = $row['INDEX_NAME'];            
+            // All primary keys are indexes (right...?)
+            if (!isset($this->indexes[$name])) {
+                $this->indexes[$name] = new IndexInfo($name);
+            }
+            $this->indexes[$name]->addColumn($this->columns[ $row['COLUMN_NAME'] ]);
+        }
+        
+        $this->indexesLoaded = true;        
+    }
+
+    /**
+     * Loads the foreign keys for this table.
+     * @return void
+     */      
+    protected function initForeignKeys()
+    {
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+        include_once 'creole/metadata/ForeignKeyInfo.php';
+        
+        if (!@mssql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        } 
+        
+        $res = mssql_query("SELECT     ccu1.TABLE_NAME, ccu1.COLUMN_NAME, ccu2.TABLE_NAME AS FK_TABLE_NAME, ccu2.COLUMN_NAME AS FK_COLUMN_NAME
+                            FROM         INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu1 INNER JOIN
+                                      INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc1 ON tc1.CONSTRAINT_NAME = ccu1.CONSTRAINT_NAME AND 
+                                      CONSTRAINT_TYPE = 'Foreign Key' INNER JOIN
+                                      INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc1 ON rc1.CONSTRAINT_NAME = tc1.CONSTRAINT_NAME INNER JOIN
+                                      INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu2 ON ccu2.CONSTRAINT_NAME = rc1.UNIQUE_CONSTRAINT_NAME
+                            WHERE     (ccu1.table_name = '".$this->name."')", $this->dblink);
+        
+        while($row = mssql_fetch_array($res)) {
+            $name = $row['COLUMN_NAME'];
+            $ftbl = $row['FK_TABLE_NAME'];
+            $fcol = $row['FK_COLUMN_NAME'];
+
+            if (!isset($this->foreignKeys[$name])) {
+                $this->foreignKeys[$name] = new ForeignKeyInfo($name);
+
+                if ($this->database->hasTable($ftbl)) {
+                    $foreignTable = $this->database->getTable($ftbl);
+                } else {                
+                    $foreignTable = new TableInfo($ltbl);
+                    $this->database->addTable($foreignTable);
+                }
+
+                if ($foreignTable->hasColumn($fcol)) {
+                    $foreignCol = $foreignTable->getColumn($fcol);
+                } else {                
+                    $foreignCol = new ColumnInfo($foreignTable, $fcol);
+                    $foreignTable->addColumn($foreignCol);
+                }
+                                
+                $this->foreignKeys[$name]->addReference($this->columns[$name], $foreignCol);
+            }
+        }
+        
+        $this->fksLoaded = true;
+    }
+
+    /**
+     * Loads the primary key info for this table.
+     * @return void
+     */      
+    protected function initPrimaryKey()
+    {
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+        
+        if (!@mssql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        } 
+        
+        $res = mssql_query("SELECT COLUMN_NAME 
+                        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
+                                INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ON 
+                      INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_NAME = INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE.constraint_name
+                        WHERE     (INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY') AND 
+                      (INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_NAME = '".$this->name."')", $this->dblink);
+        
+        // Loop through the returned results, grouping the same key_name together.
+        // name of the primary key will be the first column name in the key.
+        while($row = mssql_fetch_row($res)) {
+            $name = $row[0];            
+            if (!isset($this->primaryKey)) {
+                $this->primaryKey = new PrimaryKeyInfo($name);
+            }
+            $this->primaryKey->addColumn($this->columns[ $name ]);
+        }        
+        
+        $this->pkLoaded = true;
+    }    
+    
+}

Added: trunk/vendor/creole/drivers/mysql/MySQLConnection.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,285 @@
+<?php
+/*
+ *  $Id: MySQLConnection.php,v 1.18 2004/09/01 14:00:28 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+include_once 'creole/drivers/mysql/MySQLResultSet.php';
+
+/**
+ * MySQL implementation of Connection.
+ * 
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @author    Stig Bakken <ssb at fast.no> 
+ * @author    Lukas Smith
+ * @version   $Revision: 1.18 $
+ * @package   creole.drivers.mysql
+ */ 
+class MySQLConnection extends ConnectionCommon implements Connection {
+
+    /** Current database (used in mysql_select_db()). */
+    private $database;
+    
+    /**
+     * Connect to a database and log in as the specified user.
+     *
+     * @param $dsn the data source name (see DB::parseDSN for syntax)
+     * @param $flags Any conneciton flags.
+     * @access public
+     * @throws SQLException
+     * @return void
+     */
+    function connect($dsninfo, $flags = 0)
+    {
+        if (!extension_loaded('mysql')) {
+            throw new SQLException('mysql extension not loaded');
+        }
+
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+        
+        $persistent = ($flags & Creole::PERSISTENT) === Creole::PERSISTENT;
+
+        if (isset($dsninfo['protocol']) && $dsninfo['protocol'] == 'unix') {
+            $dbhost = ':' . $dsninfo['socket'];
+        } else {
+            $dbhost = $dsninfo['hostspec'] ? $dsninfo['hostspec'] : 'localhost';
+            if (!empty($dsninfo['port'])) {
+                $dbhost .= ':' . $dsninfo['port'];
+            }
+        }
+        $user = $dsninfo['username'];
+        $pw = $dsninfo['password'];
+
+        $connect_function = $persistent ? 'mysql_pconnect' : 'mysql_connect';
+
+        @ini_set('track_errors', true);
+        if ($dbhost && $user && $pw) {
+            $conn = @$connect_function($dbhost, $user, $pw);
+        } elseif ($dbhost && $user) {
+            $conn = @$connect_function($dbhost, $user);
+        } elseif ($dbhost) {
+            $conn = @$connect_function($dbhost);
+        } else {
+            $conn = false;
+        }
+        @ini_restore('track_errors');
+        if (empty($conn)) {
+            if (($err = @mysql_error()) != '') {
+                throw new SQLException("connect failed", $err);
+            } elseif (empty($php_errormsg)) {
+                throw new SQLException("connect failed");
+            } else {
+                throw new SQLException("connect failed", $php_errormsg);
+            }
+        }
+
+        if ($dsninfo['database']) {
+            if (!@mysql_select_db($dsninfo['database'], $conn)) {
+               switch(mysql_errno($conn)) {
+                        case 1049:
+                            $exc = new SQLException("no such database", mysql_error($conn));         
+                        break;
+                        case 1044:
+                            $exc = new SQLException("access violation", mysql_error($conn));
+                        break;
+                        default:
+                           $exc = new SQLException("cannot select database", mysql_error($conn));
+                }
+                
+                throw $exc;
+                
+            }
+            // fix to allow calls to different databases in the same script
+            $this->database = $dsninfo['database'];
+        }
+
+        $this->dblink = $conn;
+        
+    }    
+    
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/mysql/metadata/MySQLDatabaseInfo.php';
+        return new MySQLDatabaseInfo($this);
+    }
+    
+    /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/mysql/MySQLIdGenerator.php';
+        return new MySQLIdGenerator($this);
+    }
+    
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql) 
+    {
+        require_once 'creole/drivers/mysql/MySQLPreparedStatement.php';
+        return new MySQLPreparedStatement($this, $sql);
+    }
+    
+    /**
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall($sql) {
+        throw new SQLException('MySQL does not support stored procedures.');
+    }
+    
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/mysql/MySQLStatement.php';
+        return new MySQLStatement($this);
+    }
+        
+    /**
+     * @see Connection::disconnect()
+     */
+    function close()
+    {
+        $ret = mysql_close($this->dblink);
+        $this->dblink = null;
+        return $ret;
+    }
+    
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ( $limit > 0 ) {
+            $sql .= " LIMIT " . ($offset > 0 ? $offset . ", " : "") . $limit;
+        } else if ( $offset > 0 ) {
+            $sql .= " LIMIT " . $offset . ", 18446744073709551615";
+        }
+    }
+
+    /**
+     * @see Connection::executeQuery()
+     */
+    function executeQuery($sql, $fetchmode = null)
+    {
+        $this->lastQuery = $sql;
+        if ($this->database) {
+            if (!@mysql_select_db($this->database, $this->dblink)) {
+                throw new SQLException('No database selected', mysql_error($this->dblink));
+            }
+        }
+        $result = @mysql_query($sql, $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not execute query', mysql_error($this->dblink), $sql);
+        }
+        return new MySQLResultSet($this, $result, $fetchmode);
+    }
+    
+    /**
+     * @see Connection::executeUpdate()
+     */
+    function executeUpdate($sql)
+    {    
+        $this->lastQuery = $sql;
+
+        if ($this->database) {
+            if (!@mysql_select_db($this->database, $this->dblink)) {
+                    throw new SQLException('No database selected', mysql_error($this->dblink));
+            }
+        }
+        
+        $result = @mysql_query($sql, $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not execute update', mysql_error($this->dblink), $sql);
+        }        
+        return (int) mysql_affected_rows($this->dblink);
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        $result = @mysql_query('SET AUTOCOMMIT=0', $this->dblink);
+        $result = @mysql_query('BEGIN', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not begin transaction', mysql_error($this->dblink));
+        }
+    }
+        
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        if ($this->database) {
+            if (!@mysql_select_db($this->database, $this->dblink)) {
+                 throw new SQLException('No database selected', mysql_error($this->dblink));
+            }
+        }
+        $result = @mysql_query('COMMIT', $this->dblink);
+        $result = @mysql_query('SET AUTOCOMMIT=1', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Can not commit transaction', mysql_error($this->dblink));                
+        }
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        if ($this->database) {
+            if (!@mysql_select_db($this->database, $this->dblink)) {
+                throw new SQLException('No database selected', mysql_error($this->dblink));
+            }
+        }
+        $result = @mysql_query('ROLLBACK', $this->dblink);
+        $result = @mysql_query('SET AUTOCOMMIT=1', $this->dblink);
+        if (!$result) {
+            throw new SQLException('Could not rollback transaction', mysql_error($this->dblink));
+        }
+    }
+
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     *
+     * @return int Number of rows affected by the last query.
+     */
+    function getUpdateCount()
+    {
+        return (int) @mysql_affected_rows($this->dblink);
+    }
+    
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/mysql/MySQLIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,75 @@
+<?php
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * MySQL IdGenerator implimenation.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.6 $
+ * @package   creole.drivers.mysql
+ */
+class MySQLIdGenerator implements IdGenerator {
+    
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+    
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return false;
+    }    
+    
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return true;
+    }
+        
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::AUTOINCREMENT;
+    }
+    
+    /**
+     * Returns last-generated auto-increment ID.
+     * 
+     * Note that for very large values (2,147,483,648 to 9,223,372,036,854,775,807) a string
+     * will be returned, because these numbers are larger than supported by PHP's native
+     * numeric datatypes.
+     * 
+     * @see IdGenerator::getId()
+     */
+    public function getId($unused = null)
+    {
+        $insert_id = mysql_insert_id($this->conn->getResource());
+        if ( $insert_id < 0 ) {
+            $insert_id = null;
+            $result = mysql_query('SELECT LAST_INSERT_ID()', $this->conn->getResource());
+            if ( $result ) {
+                $row = mysql_fetch_row($result);
+                $insert_id = $row ? $row[0] : null;
+            }
+        }
+        return $insert_id;
+    }
+    
+}
+

Added: trunk/vendor/creole/drivers/mysql/MySQLPreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLPreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLPreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,44 @@
+<?php
+/*
+ *  $Id: MySQLPreparedStatement.php,v 1.6 2004/03/20 04:16:49 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * MySQL subclass for prepared statements.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.6 $
+ * @package   creole.drivers.mysql
+ */
+class MySQLPreparedStatement extends PreparedStatementCommon implements PreparedStatement {        
+    
+    /**
+     * Quotes string using native mysql function.
+     * @param string $str
+     * @return string
+     */
+    protected function escape($str)
+    {
+        return mysql_escape_string($str);
+    }    
+    
+}

Added: trunk/vendor/creole/drivers/mysql/MySQLResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,148 @@
+<?php
+/*
+ *  $Id: MySQLResultSet.php,v 1.23 2005/09/16 13:09:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * MySQL implementation of ResultSet class.
+ *
+ * MySQL supports OFFSET / LIMIT natively; this means that no adjustments or checking
+ * are performed.  We will assume that if the lmitSQL() operation failed that an
+ * exception was thrown, and that OFFSET/LIMIT will never be emulated for MySQL.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.23 $
+ * @package   creole.drivers.mysql
+ */
+class MySQLResultSet extends ResultSetCommon implements ResultSet {
+
+    /**
+     * @see ResultSet::seek()
+     */ 
+    public function seek($rownum)
+    {
+        // MySQL rows start w/ 0, but this works, because we are
+        // looking to move the position _before_ the next desired position
+         if (!@mysql_data_seek($this->result, $rownum)) {
+                return false;
+        }
+        $this->cursorPos = $rownum;
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::next()
+     */ 
+    public function next()
+    {
+        $this->fields = mysql_fetch_array($this->result, $this->fetchmode);        
+
+           if (!$this->fields) {
+            $errno = mysql_errno($this->conn->getResource());
+            if (!$errno) {
+                // We've advanced beyond end of recordset.
+                $this->afterLast();
+                return false;
+            } else {
+                throw new SQLException("Error fetching result", mysql_error($this->conn->getResource()));
+            }
+        }
+        
+        if (!$this->ignoreAssocCase) {
+            $this->fields = array_change_key_case($this->fields, CASE_LOWER);
+        }
+        
+        // Advance cursor position
+        $this->cursorPos++;                
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    function getRecordCount()
+    {
+        $rows = @mysql_num_rows($this->result);
+        if ($rows === null) {
+            throw new SQLException("Error fetching num rows", mysql_error($this->conn->getResource()));
+        }
+        return (int) $rows;
+    }
+
+    /**
+     * @see ResultSet::close()
+     */ 
+    function close()
+    {        
+        @mysql_free_result($this->result);
+        $this->fields = array();
+    }    
+        
+    /**
+     * Get string version of column.
+     * No rtrim() necessary for MySQL, as this happens natively.
+     * @see ResultSet::getString()
+     */
+    public function getString($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        return (string) $this->fields[$idx];
+    }
+    
+    /**
+     * Returns a unix epoch timestamp based on either a TIMESTAMP or DATETIME field.
+     * @param mixed $column Column name (string) or index (int) starting with 1.
+     * @return string
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    function getTimestamp($column, $format='Y-m-d H:i:s') 
+    {
+        if (is_int($column)) { $column--; } // because Java convention is to start at 1 
+        if (!array_key_exists($column, $this->fields)) { throw new SQLException("Invalid resultset column: " . (is_int($column) ? $column + 1 : $column)); }
+        if ($this->fields[$column] === null) { return null; }
+        
+        $ts = strtotime($this->fields[$column]);
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            // otherwise it's an ugly MySQL timestamp!
+            // YYYYMMDDHHMMSS
+            if (preg_match('/([\d]{4})([\d]{2})([\d]{2})([\d]{2})([\d]{2})([\d]{2})/', $this->fields[$column], $matches)) {
+                //              YYYY      MM        DD      HH        MM       SS
+                //                $1        $2          $3      $4        $5         $6
+                $ts = mktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);        
+            }
+        }
+        if ($ts === -1 || $ts === false) { // if it's still -1, then there's nothing to be done; use a different method.
+            throw new SQLException("Unable to convert value at column " . (is_int($column) ? $column + 1 : $column) . " to timestamp: " . $this->fields[$column]);
+        }        
+        if ($format === null) {
+            return $ts;
+        }
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+    }
+
+}

Added: trunk/vendor/creole/drivers/mysql/MySQLStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,36 @@
+<?php
+/*
+ *  $Id: MySQLStatement.php,v 1.1 2004/02/19 02:49:42 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * MySQL Statement
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @author    Stig Bakken <ssb at fast.no> 
+ * @author    Lukas Smith
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.mysql
+ */ 
+class MySQLStatement extends StatementCommon implements Statement {   
+    
+}

Added: trunk/vendor/creole/drivers/mysql/MySQLTypes.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/MySQLTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/MySQLTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,102 @@
+<?php
+
+/*
+ *  $Id: MySQLTypes.php,v 1.8 2005/02/10 09:22:40 pachanga Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * MySQL types / type map.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.drivers.mysql
+ */
+class MySQLTypes extends CreoleTypes {
+
+    /** Map MySQL native types to Creole (JDBC) types. */
+    private static $typeMap = array(
+                                'tinyint' => CreoleTypes::TINYINT,
+                                'smallint' => CreoleTypes::SMALLINT,
+                                'mediumint' => CreoleTypes::SMALLINT,
+                                'int' => CreoleTypes::INTEGER,
+                                'integer' => CreoleTypes::INTEGER,
+                                'bigint' => CreoleTypes::BIGINT,
+                                'int24' => CreoleTypes::BIGINT,
+                                'real' => CreoleTypes::REAL,
+                                'float' => CreoleTypes::FLOAT,
+                                'decimal' => CreoleTypes::DECIMAL,
+                                'numeric' => CreoleTypes::NUMERIC,
+                                'double' => CreoleTypes::DOUBLE,
+                                'char' => CreoleTypes::CHAR,
+                                'varchar' => CreoleTypes::VARCHAR,
+                                'date' => CreoleTypes::DATE,
+                                'time' => CreoleTypes::TIME,
+                                'year' => CreoleTypes::YEAR,
+                                'datetime' => CreoleTypes::TIMESTAMP,
+                                'timestamp' => CreoleTypes::TIMESTAMP,
+                                'tinyblob' => CreoleTypes::BINARY,
+                                'blob' => CreoleTypes::VARBINARY,
+                                'mediumblob' => CreoleTypes::VARBINARY,
+                                'longblob' => CreoleTypes::VARBINARY,
+                                'longtext' => CreoleTypes::LONGVARCHAR,
+                                'tinytext' => CreoleTypes::VARCHAR,
+                                'mediumtext' => CreoleTypes::LONGVARCHAR,
+                                'text' => CreoleTypes::LONGVARCHAR,
+                                'enum' => CreoleTypes::CHAR,
+                                'set' => CreoleTypes::CHAR,
+                                );
+
+    /** Reverse mapping, created on demand. */
+    private static $reverseMap = null;
+
+    /**
+     * This method returns the generic Creole (JDBC-like) type
+     * when given the native db type.
+     * @param string $nativeType DB native type (e.g. 'TEXT', 'byetea', etc.).
+     * @return int Creole native type (e.g. CreoleTypes::LONGVARCHAR, CreoleTypes::BINARY, etc.).
+     */
+    public static function getType($nativeType)
+    {
+        $t = strtolower($nativeType);
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::OTHER;
+        }
+    }
+
+    /**
+     * This method will return a native type that corresponds to the specified
+     * Creole (JDBC-like) type.
+     * If there is more than one matching native type, then the LAST defined
+     * native type will be returned.
+     * @param int $creoleType
+     * @return string Native type string.
+     */
+    public static function getNativeType($creoleType)
+    {
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/mysql/metadata/MySQLDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/metadata/MySQLDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/metadata/MySQLDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,61 @@
+<?php
+/*
+ * $Id: MySQLDatabaseInfo.php,v 1.12 2005/02/21 16:48:40 pachanga Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * MySQL implementation of DatabaseInfo.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole.drivers.mysql.metadata
+ */
+class MySQLDatabaseInfo extends DatabaseInfo {
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/mysql/metadata/MySQLTableInfo.php';
+
+        $result = @mysql_query("SHOW TABLES FROM `" . $this->dbname . "`", $this->dblink);
+
+        if (!$result) {
+            throw new SQLException("Could not list tables", mysql_error($this->dblink));
+        }
+
+        while ($row = mysql_fetch_row($result)) {
+            $this->tables[strtoupper($row[0])] = new MySQLTableInfo($this, $row[0]);
+        }
+    }
+
+    /**
+     * MySQL does not support sequences.
+     *
+     * @return void
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // throw new SQLException("MySQL does not support sequences natively.");
+    }
+}

Added: trunk/vendor/creole/drivers/mysql/metadata/MySQLTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mysql/metadata/MySQLTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysql/metadata/MySQLTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,249 @@
+<?php
+/*
+ *  $Id: MySQLTableInfo.php,v 1.19 2005/10/18 11:20:11 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * MySQL implementation of TableInfo.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.19 $
+ * @package   creole.drivers.mysql.metadata
+ */
+class MySQLTableInfo extends TableInfo {
+
+    /** Loads the columns for this table. */
+    protected function initColumns()
+    {
+        include_once 'creole/metadata/ColumnInfo.php';
+        include_once 'creole/drivers/mysql/MySQLTypes.php';
+
+        if (!@mysql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+
+        // To get all of the attributes we need, we use
+        // the MySQL "SHOW COLUMNS FROM $tablename" SQL.  We cannot
+        // use the API functions (e.g. mysql_list_fields() because they
+        // do not return complete information -- e.g. precision / scale, default
+        // values).
+
+        $res = mysql_query("SHOW COLUMNS FROM `" . $this->name . "`", $this->dblink);
+
+        $defaults = array();
+        $nativeTypes = array();
+        $precisions = array();
+
+        while($row = mysql_fetch_assoc($res)) {
+            $name = $row['Field'];
+            $is_nullable = ($row['Null'] == 'YES');
+            $is_auto_increment = (strpos($row['Extra'], 'auto_increment') !== false);
+            $size = null;
+            $precision = null;
+
+            if (preg_match('/^(\w+)[\(]?([\d,]*)[\)]?( |$)/', $row['Type'], $matches)) {
+                //            colname[1]   size/precision[2]
+                $nativeType = $matches[1];
+                if ($matches[2]) {
+                    if ( ($cpos = strpos($matches[2], ',')) !== false) {
+                        $size = (int) substr($matches[2], 0, $cpos);
+                        $precision = (int) substr($matches[2], $cpos + 1);
+                    } else {
+                        $size = (int) $matches[2];
+                    }
+                }
+            } elseif (preg_match('/^(\w+)\(/', $row['Type'], $matches)) {
+                $nativeType = $matches[1];
+            } else {
+                $nativeType = $row['Type'];
+            }
+            //BLOBs can't have any default values in MySQL
+            $default = preg_match('~blob|text~', $nativeType) ? null : $row['Default'];
+            $this->columns[$name] = new ColumnInfo($this,
+                                                   $name,
+                                                   MySQLTypes::getType($nativeType),
+                                                   $nativeType,
+                                                   $size,
+                                                   $precision,
+                                                   $is_nullable,
+                                                   $default,
+                                                   $is_auto_increment,
+                                                   $row);
+        }
+
+        $this->colsLoaded = true;
+    }
+
+    /** Loads the primary key information for this table. */
+    protected function initPrimaryKey()
+    {
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+        if (!@mysql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+
+        // Primary Keys
+        $res = mysql_query("SHOW KEYS FROM `" . $this->name . "`", $this->dblink);
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+
+        while($row = mysql_fetch_assoc($res)) {
+            // Skip any non-primary keys.
+            if ($row['Key_name'] !== 'PRIMARY') {
+                continue;
+            }
+            $name = $row["Column_name"];
+            if (!isset($this->primaryKey)) {
+                $this->primaryKey = new PrimaryKeyInfo($name, $row);
+            }
+            $this->primaryKey->addColumn($this->columns[$name]);
+        }
+
+        $this->pkLoaded = true;
+    }
+
+    /** Loads the indexes for this table. */
+    protected function initIndexes() {
+
+        include_once 'creole/metadata/IndexInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+        if (!@mysql_select_db($this->dbname, $this->dblink)) {
+            throw new SQLException('No database selected');
+        }
+
+        // Indexes
+        $res = mysql_query("SHOW INDEX FROM `" . $this->name . "`", $this->dblink);
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+
+        while($row = mysql_fetch_assoc($res)) {
+            $colName = $row["Column_name"];
+            $name = $row["Key_name"];
+
+            if($name == "PRIMARY") {
+                continue;
+            }
+
+            if (!isset($this->indexes[$name])) {
+                $isUnique = ($row["Non_unique"] == 0);
+                $this->indexes[$name] = new IndexInfo($name, $isUnique, $row);
+            }
+            $this->indexes[$name]->addColumn($this->columns[$colName]);
+        }
+
+        $this->indexesLoaded = true;
+    }
+
+  /**
+   * Load foreign keys for supporting versions of MySQL.
+   * @author Tony Bibbs
+   */
+  protected function initForeignKeys() {
+
+    // First make sure we have supported version of MySQL:
+    $res = mysql_query("SELECT VERSION()");
+    $row = mysql_fetch_row($res);
+
+    // Yes, it is OK to hardcode this...this was the first version of MySQL
+    // that supported foreign keys
+    if ($row[0] < '3.23.44') {
+       $this->fksLoaded = true;
+       return;
+    }
+
+    include_once 'creole/metadata/ForeignKeyInfo.php';
+
+    // columns have to be loaded first
+    if (!$this->colsLoaded) $this->initColumns();
+    if (!@mysql_select_db($this->dbname, $this->dblink)) {
+      throw new SQLException('No database selected');
+    }
+       // Get the CREATE TABLE syntax
+    $res = mysql_query("SHOW CREATE TABLE `" . $this->name . "`", $this->dblink);
+    $row = mysql_fetch_row($res);
+
+    // Get the information on all the foreign keys
+    $regEx = '/FOREIGN KEY \(`([^`]*)`\) REFERENCES `([^`]*)` \(`([^`]*)`\)(.*)/';
+    if (preg_match_all($regEx,$row[1],$matches)) {
+      $tmpArray = array_keys($matches[0]);
+      foreach ($tmpArray as $curKey) {
+        $name = $matches[1][$curKey];
+        $ftbl = $matches[2][$curKey];
+        $fcol = $matches[3][$curKey];
+        $fkey = $matches[4][$curKey];
+        if (!isset($this->foreignKeys[$name])) {
+          $this->foreignKeys[$name] = new ForeignKeyInfo($name);
+          if ($this->database->hasTable($ftbl)) {
+            $foreignTable = $this->database->getTable($ftbl);
+          } else {
+            $foreignTable = new MySQLTableInfo($this->database, $ftbl);
+            $this->database->addTable($foreignTable);
+          }
+          if ($foreignTable->hasColumn($fcol)) {
+            $foreignCol = $foreignTable->getColumn($fcol);
+          } else {
+            $foreignCol = new ColumnInfo($foreignTable, $fcol);
+            $foreignTable->addColumn($foreignCol);
+          }
+
+          //typical for mysql is RESTRICT
+          $fkactions = array(
+            'ON DELETE'	=> ForeignKeyInfo::RESTRICT,
+            'ON UPDATE'	=> ForeignKeyInfo::RESTRICT,
+          );
+                              
+          if ($fkey) {
+            //split foreign key information -> search for ON DELETE and afterwords for ON UPDATE action
+            foreach (array_keys($fkactions) as $fkaction) {
+              $result = NULL;
+              preg_match('/' . $fkaction . ' (' . ForeignKeyInfo::CASCADE . '|' . ForeignKeyInfo::SETNULL . ')/', $fkey, $result);
+              if ($result && is_array($result) && isset($result[1])) {
+                $fkactions[$fkaction] = $result[1];
+              }
+            }
+          }
+
+          $this->foreignKeys[$name]->addReference($this->columns[$name], $foreignCol, $fkactions['ON DELETE'], $fkactions['ON UPDATE']);
+        }
+      }
+    }
+    $this->fksLoaded = true;
+    
+  }
+
+  protected function initVendorSpecificInfo()
+  {
+      $res = mysql_query("SHOW TABLE STATUS LIKE '" . $this->name . "'", $this->dblink);
+      $this->vendorSpecificInfo = mysql_fetch_assoc($res);
+
+      $this->vendorLoaded = true;
+  }
+
+}

Added: trunk/vendor/creole/drivers/mysqli/MySQLiConnection.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/MySQLiConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/MySQLiConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,288 @@
+<?php
+/*
+ * $Id: MySQLiConnection.php,v 1.7 2004/09/18 09:29:22 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+include_once 'creole/drivers/mysqli/MySQLiResultSet.php';
+
+/**
+ * MySQLi implementation of Connection.
+ *
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.7 $
+ * @package   creole.drivers.mysqli
+ */
+class MySQLiConnection extends ConnectionCommon implements Connection {
+    /** Current database (used in mysqli_select_db()). */
+    private $database;
+
+    /**
+     * Connect to a database and log in as the specified user.
+     *
+     * @param $dsn the data source name (see DB::parseDSN for syntax)
+     * @param $flags Any conneciton flags.
+     * @access public
+     * @throws SQLException
+     * @return void
+     */
+    public function connect($dsninfo, $flags = 0)
+    {
+        if (!extension_loaded('mysqli')) {
+            throw new SQLException('mysqli extension not loaded');
+        }
+
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+
+        if (isset($dsninfo['protocol']) && $dsninfo['protocol'] == 'unix') {
+            $dbhost = ':' . $dsninfo['socket'];
+        } else {
+            $dbhost = $dsninfo['hostspec'] ? $dsninfo['hostspec'] : 'localhost';
+
+            if (!empty($dsninfo['port'])) {
+                $dbhost .= ':' . $dsninfo['port'];
+            }
+        }
+
+        $user = $dsninfo['username'];
+        $pw = $dsninfo['password'];
+
+        @ini_set('track_errors', true);
+
+        if ($dbhost && $user && $pw) {
+            $conn = @mysqli_connect($dbhost, $user, $pw);
+        } elseif ($dbhost && $user) {
+            $conn = @mysqli_connect($dbhost, $user);
+        } elseif ($dbhost) {
+            $conn = @mysqli_connect($dbhost);
+        } else {
+            $conn = false;
+        }
+
+        @ini_restore('track_errors');
+
+        if (empty($conn)) {
+            if (($err = @mysqli_error()) != '') {
+                throw new SQLException("connect failed", $err);
+            } elseif (empty($php_errormsg)) {
+                throw new SQLException("connect failed");
+            } else {
+                throw new SQLException("connect failed", $php_errormsg);
+            }
+        }
+
+        if ($dsninfo['database']) {
+            if (!@mysqli_select_db($conn, $dsninfo['database'])) {
+               switch(mysqli_errno($conn)) {
+                        case 1049:
+                            $exc = new SQLException("no such database", mysqli_error($conn));
+                        break;
+                        case 1044:
+                            $exc = new SQLException("access violation", mysqli_error($conn));
+                        break;
+                        default:
+                           $exc = new SQLException("cannot select database", mysqli_error($conn));
+                }
+
+                throw $exc;
+
+            }
+
+            // fix to allow calls to different databases in the same script
+            $this->database = $dsninfo['database'];
+        }
+
+        $this->dblink = $conn;
+    }
+
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/mysqli/metadata/MySQLiDatabaseInfo.php';
+        return new MySQLiDatabaseInfo($this);
+    }
+
+    /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/mysqli/MySQLiIdGenerator.php';
+        return new MySQLiIdGenerator($this);
+    }
+
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql)
+    {
+        require_once 'creole/drivers/mysqli/MySQLiPreparedStatement.php';
+        return new MySQLiPreparedStatement($this, $sql);
+    }
+
+    /**
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall($sql) {
+        throw new SQLException('MySQL does not support stored procedures.');
+    }
+
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/mysqli/MySQLiStatement.php';
+        return new MySQLiStatement($this);
+    }
+
+    /**
+     * @see Connection::disconnect()
+     */
+    public function close()
+    {
+        $ret = mysqli_close($this->dblink);
+        $this->dblink = null;
+        return $ret;
+    }
+
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ( $limit > 0 ) {
+            $sql .= " LIMIT " . ($offset > 0 ? $offset . ", " : "") . $limit;
+        } else if ( $offset > 0 ) {
+            $sql .= " LIMIT " . $offset . ", 18446744073709551615";
+        }
+    }
+
+    /**
+     * @see Connection::executeQuery()
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {
+        $this->lastQuery = $sql;
+
+        if ($this->database) {
+            if (!@mysqli_select_db($this->dblink, $this->database)) {
+                throw new SQLException('No database selected', mysqli_error($this->dblink));
+            }
+        }
+
+        $result = @mysqli_query($this->dblink, $sql);
+
+        if (!$result) {
+            throw new SQLException('Could not execute query', mysqli_error($this->dblink), $sql);
+        }
+
+        return new MySQLiResultSet($this, $result, $fetchmode);
+    }
+
+    /**
+     * @see Connection::executeUpdate()
+     */
+    public function executeUpdate($sql)
+    {
+        $this->lastQuery = $sql;
+
+        if ($this->database) {
+            if (!@mysqli_select_db($this->dblink, $this->database)) {
+                    throw new SQLException('No database selected', mysqli_error($this->dblink));
+            }
+        }
+
+        $result = @mysqli_query($this->dblink, $sql);
+
+        if (!$result) {
+            throw new SQLException('Could not execute update', mysqli_error($this->dblink), $sql);
+        }
+
+        return (int) mysqli_affected_rows($this->dblink);
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        if (!mysqli_autocommit($this->dblink, FALSE)) {
+            throw new SQLException('Could not begin transaction', mysqli_error($this->dblink));
+        }
+    }
+
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        if ($this->database) {
+            if (!@mysqli_select_db($this->dblink, $this->database)) {
+                 throw new SQLException('No database selected', mysqli_error($this->dblink));
+            }
+        }
+
+        if (!mysqli_commit($this->dblink)) {
+            throw new SQLException('Can not commit transaction', mysqli_error($this->dblink));                
+        }
+
+        mysqli_autocommit($this->dblink, TRUE);
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        if ($this->database) {
+            if (!@mysqli_select_db($this->dblink, $this->database)) {
+                throw new SQLException('No database selected', mysqli_error($this->dblink));
+            }
+        }
+
+        if (!mysqli_rollback($this->dblink)) {
+            throw new SQLException('Could not rollback transaction', mysqli_error($this->dblink));
+        }
+
+        mysqli_autocommit($this->dblink, TRUE);
+    }
+
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     *
+     * @return int Number of rows affected by the last query.
+     */
+    public function getUpdateCount()
+    {
+        return (int) @mysqli_affected_rows($this->dblink);
+    }
+}

Added: trunk/vendor/creole/drivers/mysqli/MySQLiIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/MySQLiIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/MySQLiIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,96 @@
+<?php
+/*
+ * $Id: MySQLiIdGenerator.php,v 1.4 2004/09/18 09:15:49 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * MySQLi implementation of IdGenerator.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.4 $
+ * @package   creole.drivers.mysqli
+ */
+class MySQLiIdGenerator implements IdGenerator {
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return false;
+    }
+
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return true;
+    }
+
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::AUTOINCREMENT;
+    }
+
+    /**
+     * Returns last-generated auto-increment ID.
+     *
+     * Note that for very large values (2,147,483,648 to 9,223,372,036,854,775,807) a string
+     * will be returned, because these numbers are larger than supported by PHP's native
+     * numeric datatypes.
+     *
+     * @see IdGenerator::getId()
+     */
+    public function getId($unused = null)
+    {
+        $resource = $this->conn->getResource();
+        $insert_id = mysqli_insert_id($resource);
+
+        if ( $insert_id < 0 ) {
+            $insert_id = null;
+
+            $result = mysqli_query($resource, 'SELECT LAST_INSERT_ID()');
+
+            if ( $result ) {
+                $row = mysqli_fetch_row($result);
+                $insert_id = $row ? $row[0] : null;
+            }
+        }
+
+        return $insert_id;
+    }
+}

Added: trunk/vendor/creole/drivers/mysqli/MySQLiPreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/MySQLiPreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/MySQLiPreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,42 @@
+<?php
+/*
+ * $Id: MySQLiPreparedStatement.php,v 1.3 2004/09/18 09:15:49 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * MySQLi implementation of PreparedStatement.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.mysqli
+ */
+class MySQLiPreparedStatement extends PreparedStatementCommon implements PreparedStatement {
+    /**
+     * Quotes string using native MySQL function.
+     * @param string $str
+     * @return string
+     */
+    protected function escape($str)
+    {
+        return mysqli_real_escape_string($this->getConnection()->getResource(), $str);
+    }
+}

Added: trunk/vendor/creole/drivers/mysqli/MySQLiResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/MySQLiResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/MySQLiResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,173 @@
+<?php
+/*
+ * $Id: MySQLiResultSet.php,v 1.4 2005/09/16 13:09:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * MySQLi implementation of ResultSet.
+ *
+ * MySQL supports OFFSET / LIMIT natively; this means that no adjustments or checking
+ * are performed.  We will assume that if the lmitSQL() operation failed that an
+ * exception was thrown, and that OFFSET/LIMIT will never be emulated for MySQL.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.4 $
+ * @package   creole.drivers.mysqli
+ */
+class MySQLiResultSet extends ResultSetCommon implements ResultSet {
+    /**
+     * @see ResultSet::seek()
+     */
+    public function seek($rownum)
+    {
+        // MySQL rows start w/ 0, but this works, because we are
+        // looking to move the position _before_ the next desired position
+         if (!@mysqli_data_seek($this->result, $rownum)) {
+                return false;
+        }
+
+        $this->cursorPos = $rownum;
+
+        return true;
+    }
+
+    /**
+     * @see ResultSet::next()
+     */
+    public function next()
+    {
+        $this->fields = mysqli_fetch_array($this->result, $this->fetchmode);
+        $resource = $this->conn->getResource();
+
+        if (!$this->fields) {
+            $errno = mysqli_errno($resource);
+
+            if (!$errno) {
+                // We've advanced beyond end of recordset.
+                $this->afterLast();
+                return false;
+            } else {
+                throw new SQLException("Error fetching result", mysqli_error($resource));
+            }
+        }
+
+        if (!$this->ignoreAssocCase) {
+            $this->fields = array_change_key_case($this->fields, CASE_LOWER);
+        }
+
+        // Advance cursor position
+        $this->cursorPos++;
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    public function getRecordCount()
+    {
+        $rows = @mysqli_num_rows($this->result);
+
+        if ($rows === null) {
+            throw new SQLException("Error fetching num rows", mysqli_error($this->conn->getResource()));
+        }
+
+        return (int) $rows;
+    }
+
+    /**
+     * @see ResultSet::close()
+     */
+    public function close()
+    {
+        @mysqli_free_result($this->result);
+        $this->fields = array();
+    }
+
+    /**
+     * Get string version of column.
+     * No rtrim() necessary for MySQL, as this happens natively.
+     * @see ResultSet::getString()
+     */
+    public function getString($column)
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+
+        if (!array_key_exists($idx, $this->fields)) {
+            throw new SQLException("Invalid resultset column: " . $column);
+        }
+
+        if ($this->fields[$idx] === null) {
+            return null;
+        }
+
+        return (string) $this->fields[$idx];
+    }
+
+    /**
+     * Returns a unix epoch timestamp based on either a TIMESTAMP or DATETIME field.
+     * @param mixed $column Column name (string) or index (int) starting with 1.
+     * @return string
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getTimestamp($column, $format='Y-m-d H:i:s')
+    {
+        if (is_int($column)) {
+            // because Java convention is to start at 1
+            $column--;
+        }
+
+        if (!array_key_exists($column, $this->fields)) {
+            throw new SQLException("Invalid resultset column: " . (is_int($column) ? $column + 1 : $column));
+        }
+
+        if ($this->fields[$column] === null) {
+            return null;
+        }
+
+        $ts = strtotime($this->fields[$column]);
+
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            // otherwise it's an ugly MySQL timestamp!
+            // YYYYMMDDHHMMSS
+            if (preg_match('/([\d]{4})([\d]{2})([\d]{2})([\d]{2})([\d]{2})([\d]{2})/', $this->fields[$column], $matches)) {
+                //              YYYY       MM       DD       HH       MM       SS
+                //                $1       $2       $3       $4       $5       $6
+                $ts = mktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);
+            }
+        }
+
+        if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
+            // if it's still -1, then there's nothing to be done; use a different method.
+            throw new SQLException("Unable to convert value at column " . (is_int($column) ? $column + 1 : $column) . " to timestamp: " . $this->fields[$column]);
+        }
+
+        if ($format === null) {
+            return $ts;
+        }
+
+        if (strpos($format, '%') !== false) {
+            return strftime($format, $ts);
+        } else {
+            return date($format, $ts);
+        }
+    }
+}

Added: trunk/vendor/creole/drivers/mysqli/MySQLiStatement.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/MySQLiStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/MySQLiStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,33 @@
+<?php
+/*
+ * $Id: MySQLiStatement.php,v 1.2 2004/09/18 09:15:49 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * MySQLi implementation of Statement.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.mysqli
+ */
+class MySQLiStatement extends StatementCommon implements Statement {
+}

Added: trunk/vendor/creole/drivers/mysqli/metadata/MySQLiDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/metadata/MySQLiDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/metadata/MySQLiDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,61 @@
+<?php
+/*
+ * $Id: MySQLiDatabaseInfo.php,v 1.2 2004/09/17 17:21:13 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * MySQLi implementation of DatabaseInfo.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.mysqli.metadata
+ */
+class MySQLiDatabaseInfo extends DatabaseInfo {
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/mysqli/metadata/MySQLiTableInfo.php';
+        
+        $result = @mysqli_query($this->dblink, 'SHOW TABLES FROM ' . $this->dbname);
+    
+        if (!$result) {
+            throw new SQLException("Could not list tables", mysqli_error($this->dblink));
+        }
+        
+        while ($row = mysqli_fetch_row($result)) {
+            $this->tables[strtoupper($row[0])] = new MySQLiTableInfo($this, $row[0]);
+        }
+    }
+
+    /**
+     * MySQL does not support sequences.
+     *
+     * @return void
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // throw new SQLException("MySQL does not support sequences natively.");
+    }
+}

Added: trunk/vendor/creole/drivers/mysqli/metadata/MySQLiTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/mysqli/metadata/MySQLiTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/mysqli/metadata/MySQLiTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,153 @@
+<?php
+/*
+ * $Id: MySQLiTableInfo.php,v 1.2 2004/09/17 17:21:13 sb Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * MySQLi implementation of TableInfo.
+ *
+ * @author    Sebastian Bergmann <sb at sebastian-bergmann.de>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.mysqli.metadata
+ */
+class MySQLiTableInfo extends TableInfo {
+    /** Loads the columns for this table. */
+    protected function initColumns()
+    {
+        require_once 'creole/metadata/ColumnInfo.php';
+        require_once 'creole/drivers/mysql/MySQLTypes.php';
+
+        if (!@mysqli_select_db($this->dblink, $this->dbname)) {
+            throw new SQLException('No database selected');
+        }
+
+        // To get all of the attributes we need, we use
+        // the MySQL "SHOW COLUMNS FROM $tablename" SQL.
+        $res = mysqli_query($this->dblink, "SHOW COLUMNS FROM " . $this->name);
+
+        $defaults = array();
+        $nativeTypes = array();
+        $precisions = array();
+
+        while($row = mysqli_fetch_assoc($res)) {
+            $name = $row['Field'];
+            $default = $row['Default'];
+            $is_nullable = ($row['Null'] == 'YES');
+
+            $size = null;
+            $precision = null;
+
+            if (preg_match('/^(\w+)[\(]?([\d,]*)[\)]?( |$)/', $row['Type'], $matches)) {
+                //            colname[1]   size/precision[2]
+                $nativeType = $matches[1];
+                if ($matches[2]) {
+                    if ( ($cpos = strpos($matches[2], ',')) !== false) {
+                        $size = (int) substr($matches[2], 0, $cpos);
+                        $precision = (int) substr($matches[2], $cpos + 1);
+                    } else {
+                        $size = (int) $matches[2];
+                    }
+                }
+            } elseif (preg_match('/^(\w+)\(/', $row['Type'], $matches)) {
+                $nativeType = $matches[1];
+            } else {
+                $nativeType = $row['Type'];
+            }
+
+            $this->columns[$name] = new ColumnInfo($this, $name, MySQLTypes::getType($nativeType), $nativeType, $size, $precision, $is_nullable, $default);
+        }
+
+        $this->colsLoaded = true;
+    }
+
+    /** Loads the primary key information for this table. */
+    protected function initPrimaryKey()
+    {
+        require_once 'creole/metadata/PrimaryKeyInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) {
+            $this->initColumns();
+        }
+
+        if (!@mysqli_select_db($this->dblink, $this->dbname)) {
+            throw new SQLException('No database selected');
+        }
+
+        // Primary Keys
+        $res = mysqli_query($this->dblink, "SHOW KEYS FROM " . $this->name);
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+        while($row = mysqli_fetch_assoc($res)) {
+            $name = $row["Column_name"];
+            if (!isset($this->primaryKey)) {
+                $this->primaryKey = new PrimaryKeyInfo($name);
+            }
+
+            $this->primaryKey->addColumn($this->columns[ $name ]);
+        }
+
+        $this->pkLoaded = true;
+    }
+
+    /** Loads the indexes for this table. */
+    protected function initIndexes() {
+        require_once 'creole/metadata/IndexInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) {
+            $this->initColumns();
+        }
+
+        if (!@mysqli_select_db($this->dblink, $this->dbname)) {
+            throw new SQLException('No database selected');
+        }
+
+        // Indexes
+        $res = mysqli_query($this->dblink . "SHOW INDEX FROM " . $this->name);
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+        while($row = mysqli_fetch_assoc($res)) {
+            $name = $row["Column_name"];
+
+            if (!isset($this->indexes[$name])) {
+                $this->indexes[$name] = new IndexInfo($name);
+            }
+
+            $this->indexes[$name]->addColumn($this->columns[ $name ]);
+        }
+
+        $this->indexesLoaded = true;
+    }
+
+    /** Load foreign keys (unsupported in MySQL). */
+    protected function initForeignKeys() {
+        // columns have to be loaded first
+        if (!$this->colsLoaded) {
+            $this->initColumns();
+        }
+
+        // Foreign keys are not supported in mysql.
+        $this->fksLoaded = true;
+    }
+}

Added: trunk/vendor/creole/drivers/odbc/ODBCCachedResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCCachedResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCCachedResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,218 @@
+<?php
+/*
+ *  $Id: ODBCCachedResultSet.php,v 1.2 2005/04/01 17:04:00 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/drivers/odbc/ODBCResultSetCommon.php';
+require_once 'creole/drivers/odbc/ODBCTypes.php';
+
+/**
+ * ODBC implementation of a cached ResultSet.
+ *
+ * In addition to limit/offset emulation, this class implements a resultset
+ * cache. This can be useful as a workaround for some ODBC drivers which lack
+ * support for reverse/absolute cursor scrolling, etc. 
+ *
+ * This class will cache rows _on-demand_. So if you only read the first couple
+ * rows of a result, then only those rows will be cached. However, note that if
+ * you call getRecordCount() or last(), the class must read and cache all 
+ * available records. 
+ *
+ * The offset / limit variables are also taken into account when caching. Any 
+ * rows preceding the offset value will be skipped. Caching will stop once the
+ * limit value is reached.
+ *
+ * To use this class, create a derived {@link ODBCAdapter} class which returns
+ * an instance of ODBCCachedResultSet from the {@link ODBCAdapter::createResultSet()} method.
+ * Specify the adapter via the query portion of the Connection URL:
+ *
+ * odbc://localhost/Driver=MySQL ODBC 3.51 Driver;Database=test?adapter=MySQL
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCCachedResultSet extends ODBCResultSetCommon implements ResultSet
+{
+    /**
+     * Record cache
+     * @var array
+     */
+    protected $recs = array();
+
+    /**
+     * Tracks the last cursor position of the recordset.
+     * @var integer
+     */
+    protected $lastPos = -1;
+
+    /**
+     * True if blobs/clobs should also be cached.
+     * @var boolean
+     */
+    protected $cacheLobs = false;
+
+    /**
+     * @see ResultSet::__construct()
+     */
+    public function __construct(Connection $conn, $result, $fetchmode = null, $cacheLobs = false)
+    {
+        parent::__construct($conn, $result, $fetchmode);
+
+        $this->cacheLobs = $cacheLobs;
+    }
+
+    /**
+     * @see ODBCResultSetCommon::close()
+     */
+    function close()
+    {
+        parent::close();
+        $this->recs = null;
+        $this->lastPos = -1;
+        $this->cacheLobs = false;
+    }
+
+    /**
+     * Caches specified records up to and including the specified 1-based
+     * record position. If -1 is specified, all records will be cached.
+     * @param integer Maximum record position to cache.
+     * @return void
+     * @throws SQLException
+     */
+    public function loadCache($recPos = -1)
+    {
+        $rid = $this->result->getHandle();
+
+        $curRecs = count($this->recs);
+        $totRecs = ($curRecs ? $this->offset + $curRecs : 0);
+
+        while (1)
+        {
+            // Is record already cached?
+            if ($this->lastPos != -1 || ($recPos > -1 && $recPos <= $curRecs))
+                return;
+
+            // Fetch row (no buffers copied yet).
+            $rowNum = ++$totRecs;
+            $result = @odbc_fetch_row($rid, $rowNum);
+
+            // All records cached?
+            if ($result === false || ($this->limit > 0 && $curRecs+1 > $this->limit))
+            {
+                $this->lastPos = $curRecs;
+                continue;
+            }
+
+            // Ignore offset records.
+            if ($totRecs <= $this->offset)
+                continue;
+
+            // Load row array.
+            $row = array();
+            for ($i = 0, $n = @odbc_num_fields($rid); $i < $n; $i++)
+            {
+                $fldNum = $i+1;
+                $row[$i] = odbc_result($rid, $fldNum);
+                
+                // Cache lobs if necessary
+                if ($this->cacheLobs)
+                {
+                    ODBCTypes::loadTypeMap($this->conn);
+
+                    $nativeType = @odbc_field_type($rid, $fldNum);
+                    $creoleType = ODBCTypes::getType($nativeType);
+
+                    $isBlob = ($creoleType == CreoleTypes::BLOB ||
+                               $creoleType == CreoleTypes::LONGVARBINARY);
+
+                    $isClob = ($creoleType == CreoleTypes::CLOB ||
+                               $creoleType == CreoleTypes::LONGVARCHAR);
+
+                    if (($isBlob || $isClob) && $row[$i] !== null)
+                    {
+                        $binmode = ($isBlob ? ODBC_BINMODE_RETURN : ODBC_BINMODE_CONVERT);
+                        $curdata = $row[$i];
+                        $row[$i] = $this->readLobData($fldNum, $binmode, $curdata);
+                    }
+                }
+            }
+                        
+            // Add record to cache.
+            $this->recs[++$curRecs] = $row;
+        }
+    }
+
+    /**
+     * @see ResultSet::seek()
+     */
+    public function seek($rownum)
+    {
+        $this->loadCache($rownum);
+
+        if ($rownum < 0 || $rownum > count($this->recs)+1)
+            return false;
+
+        $this->cursorPos = $rownum;
+
+        return true;
+    }
+
+    /**
+     * @see ResultSet::next()
+     */
+    function next()
+    {
+        $this->loadCache(++$this->cursorPos);
+
+        if ($this->isAfterLast())
+        {
+            $this->afterLast();
+            return false;
+        }
+
+        $this->fields =& $this->checkFetchMode($this->recs[$this->cursorPos]);
+
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    function getRecordCount()
+    {
+        if ($this->lastPos == -1)
+            $this->loadCache(-1);
+
+        return $this->lastPos;
+    }
+
+    /**
+     * @see ResultSet::isAfterLast()
+     */
+    public function isAfterLast()
+    {
+        // All records cached yet?
+        if ($this->lastPos == -1)
+            return false;
+
+        return ($this->cursorPos > $this->lastPos);
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCConnection.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,362 @@
+<?php
+/*
+ *  $Id: ODBCConnection.php,v 1.5 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+require_once 'creole/drivers/odbc/adapters/ODBCAdapter.php';
+
+/**
+ * ODBC implementation of Connection.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.5 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCConnection extends ConnectionCommon implements Connection {
+
+    /**
+     * Implements driver-specific behavior
+     * @var ODBCAdapter
+     */
+    protected $adapter = null;
+
+    /**
+     * Last ODBC result resource from executeQuery/executeUpdate. Used in getUpdateCount()
+     * @var ODBCResultResource
+     */
+    protected $odbcresult = null;
+
+    /**
+     * @see Connection::connect()
+     */
+    public function connect($dsninfo, $flags = 0)
+    {
+		if (!function_exists('odbc_connect'))
+            throw new SQLException('odbc extension not loaded');
+
+        $adapterclass = @$dsninfo['adapter'];
+
+        if (!$adapterclass)
+            $adapterclass = 'ODBCAdapter';
+        else
+            $adapterclass .= 'Adapter';
+
+        Creole::import('creole.drivers.odbc.adapters.' . $adapterclass);
+        $this->adapter = new $adapterclass();
+
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+
+        if (($this->flags & Creole::NO_ASSOC_LOWER) && !$this->adapter->preservesColumnCase())
+        {
+            trigger_error('Connection created with Creole::NO_ASSOC_LOWER, ' .
+                          'but driver does not support case preservation.',
+                          E_USER_WARNING);
+            $this->flags &= ~Creole::NO_ASSOC_LOWER;
+        }
+
+        $persistent = ($flags & Creole::PERSISTENT) === Creole::PERSISTENT;
+
+        if ($dsninfo['database'])
+            $odbcdsn = $dsninfo['database'];
+        elseif ($dsninfo['hostspec'])
+            $odbcdsn = $dsninfo['hostspec'];
+        else
+            $odbcdsn = 'localhost';
+
+        $user = @$dsninfo['username'];
+        $pw = @$dsninfo['password'];
+
+        $connect_function = $persistent ? 'odbc_pconnect' : 'odbc_connect';
+
+        $conn = @$connect_function($odbcdsn, $user, $pw, SQL_CUR_USE_IF_NEEDED);
+
+        if (!is_resource($conn))
+            throw new SQLException('connect failed', $this->nativeError(), $odbcdsn);
+
+        $this->dblink = $conn;
+
+        /**
+         * This prevents blob fields from being fetched when a row is loaded
+         * from a recordset. Clob fields however are loaded with up to
+         * 'odbc.defaultlrl' data. This should be the default anyway, but we'll
+         * set it here just to keep things consistent.
+         */
+        @odbc_binmode(0, ODBC_BINMODE_PASSTHRU);
+        @odbc_longreadlen(0, ini_get('odbc.defaultlrl'));
+    }
+
+    /**
+     * @see Connection::close()
+     */
+    public function close()
+    {
+        $ret = true;
+
+        $this->adapter = null;
+        $this->odbcresult = null;
+
+        if ($this->dblink !== null)
+        {
+            $ret = @odbc_close($this->dblink);
+            $this->dblink = null;
+        }
+
+        return $ret;
+    }
+
+    /**
+     * Shouldn't this be in ConnectionCommon.php?
+     */
+    public function __destruct()
+    {
+        $this->close();
+    }
+
+    /**
+     * Returns a formatted ODBC error string.
+     * @return string
+     */
+    public function nativeError()
+    {
+        if ($this->dblink && is_resource($this->dblink))
+            $errstr = '[' . @odbc_error($this->dblink) . '] ' . @odbc_errormsg($this->dblink);
+        else
+            $errstr = '[' . @odbc_error() . '] ' . @odbc_errormsg();
+
+        return $errstr;
+    }
+
+    /**
+     * Returns driver-specific ODBCAdapter.
+     * @return ODBCAdapter
+     */
+    public function getAdapter()
+    {
+        return $this->adapter;
+    }
+
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/odbc/metadata/ODBCDatabaseInfo.php';
+        return new ODBCDatabaseInfo($this);
+    }
+
+    /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        return $this->adapter->getIdGenerator($this);
+    }
+
+    /**
+     * Creates the appropriate ResultSet
+     * @return ResultSet
+     */
+    public function createResultSet($odbcresult, $fetchmode)
+    {
+        return $this->adapter->createResultSet($this, $odbcresult, $fetchmode);
+    }
+
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql)
+    {
+        require_once 'creole/drivers/odbc/ODBCPreparedStatement.php';
+        return new ODBCPreparedStatement($this, $sql);
+    }
+
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/odbc/ODBCStatement.php';
+        return new ODBCStatement($this);
+    }
+
+    /**
+     * @todo To be implemented
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall($sql)
+    {
+        throw new SQLException('Stored procedures not currently implemented.');
+    }
+
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ($this->adapter->hasLimitOffset())
+            $this->adapter->applyLimit($sql, $offset, $limit);
+    }
+
+    /**
+     * @see Connection::executeQuery()
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {
+        if ($this->odbcresult)
+            $this->odbcresult = null;
+
+        $r = @odbc_exec($this->dblink, $sql);
+
+        if ($r === false)
+            throw new SQLException('Could not execute query', $this->nativeError(), $sql);
+
+        $this->odbcresult = new ODBCResultResource($r);
+
+        return $this->createResultSet($this->odbcresult, $fetchmode);
+    }
+
+    /**
+     * @see Connection::executeUpdate()
+     */
+    public function executeUpdate($sql)
+    {
+        if ($this->odbcresult)
+            $this->odbcresult = null;
+
+        $r = @odbc_exec($this->dblink, $sql);
+
+        if ($r === false)
+            throw new SQLException('Could not execute update', $this->nativeError(), $sql);
+
+        $this->odbcresult = new ODBCResultResource($r);
+
+        return $this->getUpdateCount();
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        if ($this->adapter->supportsTransactions()) {
+            @odbc_autocommit($this->dblink, false);
+            if (odbc_error($this->dblink) == 'S1C00') {
+                throw new SQLException('Could not begin transaction', $this->nativeError());
+            }
+        }
+    }
+    
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        if ($this->adapter->supportsTransactions()) {
+            $result = @odbc_commit($this->dblink);
+            if (!$result) {
+                throw new SQLException('Could not commit transaction', $this->nativeError());
+            }
+            @odbc_autocommit($this->dblink, true);
+            if (odbc_error($this->dblink) == 'S1C00') {
+                throw new SQLException('Could not commit transaction (autocommit failed)', $this->nativeError());
+            }
+        }
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        if ($this->adapter->supportsTransactions()) {
+            $result = @odbc_rollback($this->dblink);
+            if (!$result) {
+                throw new SQLException('Could not rollback transaction', $this->nativeError());
+            }
+            @odbc_autocommit($this->dblink, true);
+            if (odbc_error($this->dblink) == 'S1C00') {
+                throw new SQLException('Could not rollback transaction (autocommit failed)', $this->nativeError());
+            }
+        }
+    }
+
+    /**
+     * @see Connection::getUpdateCount()
+     */
+    public function getUpdateCount()
+    {
+        if ($this->odbcresult === null)
+            return 0;
+
+        $n = @odbc_num_rows($this->odbcresult->getHandle());
+
+        if ($n == -1)
+            throw new SQLException('Could not retrieve update count', $this->nativeError());
+
+        return (int) $n;
+    }
+
+}
+
+/**
+ * This is a simple wrapper class to manage the lifetime of an ODBC result resource
+ * (returned by odbc_exec(), odbc_execute(), etc.) We use a separate class because
+ * the resource can be shared by both ODBCConnection and an ODBCResultSet at the
+ * same time. ODBCConnection hangs on to the last result resource to be used in
+ * its getUpdateCount() method. It also passes this resource to new instances of
+ * ODBCResultSet. At some point the resource has to be cleaned up via
+ * odbc_free_result(). Using this class as a wrapper, we can pass around multiple
+ * references to the same resource. PHP's reference counting mechanism will clean
+ * up the resource when its no longer used via ODBCResultResource::__destruct().
+ * @package   creole.drivers.odbc
+ */
+class ODBCResultResource
+{
+    /**
+     * @var resource ODBC result resource returned by {@link odbc_exec()}/{@link odbc_execute()}.
+     */
+    protected $handle = null;
+
+    public function __construct($handle)
+    {
+        if (is_resource($handle))
+            $this->handle = $handle;
+    }
+
+    public function __destruct()
+    {
+        if ($this->handle !== null)
+            @odbc_free_result($this->handle);
+    }
+
+    public function getHandle()
+    {
+        return $this->handle;
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,118 @@
+<?php
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * ODBC IdGenerator implimenation.
+ *
+ * NOTE: I tried keeping the SQL as basic as possible in this class.
+ *       If you need something more optimized, derive your own IdGenerator
+ *       and use {@link ODBCAdapter::getIdGenerator()} to use it.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCIdGenerator implements IdGenerator {
+
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return true;
+    }
+
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return false;
+    }
+
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::SEQUENCE;
+    }
+
+    /**
+     * @see IdGenerator::getId()
+     */
+    public function getId($seqname = null)
+    {
+        if ($seqname === null)
+            throw new SQLException('You must specify the sequence name when calling getId() method.');
+
+        $triedcreate = false;
+
+        while (1)
+        {
+            try
+            {
+                $n = $this->conn->executeUpdate("UPDATE $seqname SET id = id + 1", ResultSet::FETCHMODE_NUM);
+
+                if ($n == 0)
+                    throw new SQLException('Failed to update IdGenerator id', $this->conn->nativeError());
+
+                $rs = $this->conn->executeQuery("SELECT id FROM $seqname", ResultSet::FETCHMODE_NUM);
+            }
+            catch (SQLException $e)
+            {
+                //$odbcerr = odbc_error($this->conn->getResource());
+
+                if ($triedcreate)// || ($odbcerr != 'S0000' && $odbcerr != 'S0002'))
+                    throw $e;
+
+                $this->drop($seqname, true);
+                $this->create($seqname);
+                $triedcreate = true;
+                continue;
+            }
+
+            break;
+        }
+
+        $rs->first();
+
+        return $rs->getInt(1);
+    }
+
+    /**
+     * Creates the sequence emulation table.
+     */
+    public function create($seqname)
+    {
+        $this->conn->executeUpdate("CREATE TABLE $seqname ( id numeric(19,0) NOT NULL )");
+        $this->conn->executeUpdate("INSERT INTO $seqname ( id ) VALUES ( 0 )");
+    }
+
+    /**
+     * Drops the sequence emulation table.
+     */
+    public function drop($seqname, $ignoreerrs = false)
+    {
+        try {
+            $this->conn->executeUpdate("DROP TABLE $seqname");
+        } catch (Exception $e) {
+            if (!$ignoreerrs) throw $e;
+        }
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCPreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCPreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCPreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,243 @@
+<?php
+/*
+ *  $Id: ODBCPreparedStatement.php,v 1.3 2005/04/01 17:08:37 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+require_once 'creole/util/Lob.php';
+
+/**
+ * ODBC specific PreparedStatement functions.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCPreparedStatement extends PreparedStatementCommon implements PreparedStatement
+{
+    /**
+     * This does nothing since ODBC natively supports prepared statements.
+     * @see PreparedStatementCommon::replaceParams()
+     */
+    protected function replaceParams()
+    {
+        if ($this->conn->getAdapter()->emulatePrepareStmt())
+            return parent::replaceParams();
+        else
+            return $this->sql;
+    }
+
+    /**
+     * Internal function to call native ODBC prepare/execute functions.
+     */
+    protected function _execute($sql, $params, $fetchmode, $isupdate)
+    {
+        if ($this->resultSet)
+        {
+            $this->resultSet->close();
+            $this->resultSet = null;
+        }
+
+        $this->updateCount = null;
+
+        if ($this->conn->getAdapter()->emulatePrepareStmt())
+        {
+            $stmt = @odbc_exec($this->conn->getResource(), $sql);
+            $ret = ($stmt !== false);
+        }
+        else
+        {
+            // Trim surrounding quotes added from default set methods.
+            // Exception: for LOB-based parameters, odbc_execute() will
+            // accept a filename surrounded by single-quotes.
+            foreach ($this->boundInVars as $idx => $var)
+            {
+                if ($var instanceof Lob)
+                {
+                    $file = ($isupdate ? $var->getInputFile() : $var->getOutputFile());
+                    $this->boundInVars[$idx] = "'$file'";
+                }
+                else if (is_string($var))
+                {
+                    $this->boundInVars[$idx] = trim($var, "\"\'");
+                }
+            }
+
+            $stmt = @odbc_prepare($this->conn->getResource(), $sql);
+
+            if ($stmt === FALSE)
+                throw new SQLException('Could not prepare query', $this->conn->nativeError(), $sql);
+
+            $ret = @odbc_execute($stmt, $this->boundInVars);
+        }
+
+        if ($ret === FALSE)
+        {
+            @odbc_free_result($stmt);
+            throw new SQLException('Could not execute query', $this->conn->nativeError(), $sql);
+        }
+
+        return $this->conn->createResultSet(new ODBCResultResource($stmt), $fetchmode);
+    }
+
+    /**
+     * @see PreparedStatement::executeQuery()
+     */
+    public function executeQuery()
+    {
+        switch (func_num_args()) {
+        case 2:
+        list($params, $fetchmode) = func_get_args();
+            if (!is_array($params)) {
+                unset($params);
+            }
+            break;
+        case 1:
+            $params = null;
+            list($fetchmode) = func_get_args();
+            break;
+        case 0:
+            $params = null;
+            $fetchmode = null;
+            break;
+        }	
+        
+        // Set any params passed directly
+        if (isset($params)) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+        
+        $sql = $this->replaceParams();
+        
+        if ($this->conn->getAdapter()->hasLimitOffset())
+        {
+            if ($this->limit > 0 || $this->offset > 0)
+                $this->conn->applyLimit($sql, $this->offset, $this->limit);
+        }
+
+        $this->resultSet = $this->_execute($sql, $params, $fetchmode, false);
+
+        if (!$this->conn->getAdapter()->hasLimitOffset())
+        {
+            $this->resultSet->_setOffset($this->offset);
+            $this->resultSet->_setLimit($this->limit);
+        }
+
+        return $this->resultSet;
+    }
+
+    /**
+     * @see PreparedStatement::executeUpdate()
+     */
+    public function executeUpdate($params = null)
+    {
+        // Set any params passed directly
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+
+        $sql = $this->replaceParams();
+        $this->_execute($sql, $params, 0, true);
+        $this->updateCount = $this->conn->getUpdateCount();
+
+        return $this->updateCount;
+    }
+
+    /**
+     * @see PreparedStatementCommon::escape()
+     */
+    protected function escape($str)
+    {
+        if ($this->conn->getAdapter()->emulatePrepareStmt())
+            return $this->conn->getAdapter()->escape($str);
+            
+        // Nothing to do here. odbc_execute() takes care of escaping strings.
+        return $str;
+    }
+
+    /**
+     * @see PreparedStatement::setNull()
+     */
+    function setNull($paramIndex)
+    {
+        $this->boundInVars[$paramIndex] = null;
+    }
+
+    /**
+     * @see PreparedStatement::setBlob()
+     */
+    function setBlob($paramIndex, $blob)
+    {
+        if ($this->conn->getAdapter()->emulatePrepareStmt())
+            return parent::setBlob($paramIndex, $blob);
+            
+        if ($blob === null)
+        {
+            $this->setNull($paramIndex);
+            return;
+        }
+
+        if ($blob instanceof Blob)
+        {
+            if ($blob->isFromFile() && !$blob->isModified())
+            {
+                $this->boundInVars[$paramIndex] = $blob;
+                return;
+            }
+
+            $blob = $blob->__toString();
+        }
+
+        $this->boundInVars[$paramIndex] = "'" . $this->escape($blob) . "'";
+    }
+
+    /**
+     * @see PreparedStatement::setClob()
+     */
+    function setClob($paramIndex, $clob)
+    {
+        if ($this->conn->getAdapter()->emulatePrepareStmt())
+            return parent::setClob($paramIndex, $clob);
+
+        if ($clob === null)
+        {
+            $this->setNull($paramIndex);
+            return;
+        }
+
+        if ($clob instanceof Clob)
+        {
+            if ($clob->isFromFile() && !$clob->isModified())
+            {
+                $this->boundInVars[$paramIndex] = $clob;
+                return;
+            }
+
+            $clob = $clob->__toString();
+        }
+
+        $this->boundInVars[$paramIndex] = "'" . $this->escape($clob) . "'";
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,209 @@
+<?php
+/*
+ *  $Id: ODBCResultSet.php,v 1.2 2005/04/01 17:10:42 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/drivers/odbc/ODBCResultSetCommon.php';
+
+/**
+ * ODBC implementation of ResultSet.
+ *
+ * If the current ODBC driver does not support LIMIT or OFFSET natively,
+ * the methods in here perform some adjustments and extra checking to make
+ * sure that this behaves the same as RDBMS drivers using native OFFSET/LIMIT.
+ *
+ * This class also emulates a row count if the driver is not capable of 
+ * providing one natively.
+ * 
+ * NOTE: This class only works with drivers that support absolute cursor 
+ *       positioning (SQL_FETCH_DIRECTION = SQL_FD_FETCH_ABSOLUTE). If the
+ *       driver you are using does not support reverse/absolute cursor 
+ *       scrolling, you should use the {@link ODBCCachedResultSet} class instead.
+ *       See the documentation for ODBCCachedResultSet for instructions on how
+ *       to use it.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCResultSet extends ODBCResultSetCommon implements ResultSet
+{
+    /**
+     * Number of rows in resultset.
+     *
+     * @var int
+     */
+    protected $numRows = -1;
+
+    /**
+     * True if ODBC driver supports odbc_num_rows().
+     *
+     * @var boolean
+     */
+    protected $hasRowCount = false;
+    
+    /**
+     * @see ResultSet::__construct()
+     */
+    public function __construct(Connection $conn, $result, $fetchmode = null)
+    {
+        parent::__construct($conn, $result, $fetchmode);
+
+        /**
+         * Some ODBC drivers appear not to handle odbc_num_rows() very well when
+         * more than one result handle is active at once. For example, the MySQL
+         * ODBC driver always returns the number of rows for the last executed
+         * result. For this reason, we'll store the row count here.
+         *
+         * Note also that many ODBC drivers do not support this method. In this
+         * case, getRecordCount() will perform a manual count.
+         */
+        $this->numRows = @odbc_num_rows($result->getHandle());
+        $this->hasRowCount = $this->numRows != -1;
+    }
+
+    /**
+     * @see ODBCResultSetCommon::close()
+     */
+    function close()
+    {
+        parent::close();
+        $numRows = -1;
+    }
+
+    /**
+     * @see ResultSet::seek()
+     */
+    public function seek($rownum)
+    {
+        if ($rownum < 0 || $this->limit > 0 && $rownum > $this->limit)
+            return false;
+        
+        $this->cursorPos = $rownum;
+
+        return true;
+    }
+
+    /**
+     * @see ResultSet::next()
+     */
+    public function next()
+    {
+        $this->cursorPos++;
+        
+        if ($this->limit > 0 && $this->cursorPos > $this->limit) {
+            $this->cursorPos = $this->limit+1;
+            return false;
+        }
+
+        $rowNum = $this->offset + $this->cursorPos;
+        $fields = null;
+        
+        $cols = @odbc_fetch_into($this->result->getHandle(), $fields, $rowNum);
+
+        if ($cols === false) {
+            $this->cursorPos = -1;
+            return false;
+        }
+
+        $this->fields =& $this->checkFetchMode($fields);
+        
+        return true;
+    }
+
+    /**
+     * @see ResultSet::isAfterLast()
+     */
+    public function isAfterLast()
+    {
+        // Force calculation of last record pos.
+        if ($this->cursorPos == -1)
+            $this->getRecordCount();
+            
+        return parent::isAfterLast();
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    function getRecordCount()
+    {
+        if ($this->hasRowCount)
+        {
+            // Use driver row count if provided.
+            $numRows = $this->numRows - $this->offset;
+
+            if ($this->limit > 0 && $numRows > $this->limit)
+                $numRows = $this->limit;
+        }
+        else 
+        {
+            // Do manual row count if driver doesn't provide one.
+            if ($this->numRows == -1) 
+            {
+                $this->numRows = 0;
+                $this->beforeFirst();
+            
+                while($this->next()) 
+                    $this->numRows++;
+            }
+                
+            $numRows = $this->numRows;
+        }
+
+        // Cursor pos is -1 when an attempt to fetch past the last row was made
+        // (or a fetch error occured).
+        
+        if ($this->cursorPos == -1)
+            $this->cursorPos = $numRows+1;
+            
+        return $numRows;
+    }
+
+    /**
+     * @see ResultSet::getBlob()
+     */
+    public function getBlob($column)
+    {
+        require_once 'creole/util/Blob.php';
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        $data = $this->readLobData($column, ODBC_BINMODE_RETURN, $this->fields[$idx]);
+        if (!$data) { return null; }
+        $b = new Blob();
+        $b->setContents($data);
+        return $b;
+    }
+
+    /**
+     * @see ResultSet::getClob()
+     */
+    public function getClob($column)
+    {
+        require_once 'creole/util/Clob.php';
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        $data = $this->readLobData($column, ODBC_BINMODE_CONVERT, $this->fields[$idx]);
+        if (!$data) { return null; }
+        $c = new Clob();
+        $c->setContents($data);
+        return $c;
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCResultSetCommon.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCResultSetCommon.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCResultSetCommon.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,187 @@
+<?php
+/*
+ *  $Id: ODBCResultSetCommon.php,v 1.2 2005/04/01 17:12:09 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * Base class for ODBC implementation of ResultSet.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.odbc
+ */
+abstract class ODBCResultSetCommon extends ResultSetCommon
+{
+    /**
+     * Offset at which to start reading rows (for emulated offset).
+     * @var int
+     */
+    protected $offset = 0;
+
+    /**
+     * Maximum rows to retrieve, or 0 if all (for emulated limit).
+     * @var int
+     */
+    protected $limit = 0;
+
+    /**
+     * @see ResultSet::__construct()
+     */
+    public function __construct(Connection $conn, $result, $fetchmode = null)
+    {
+        parent::__construct($conn, $result, $fetchmode);
+    }
+
+    /**
+     * @see ResultSet::close()
+     */
+    public function close()
+    {
+        $this->result = null;
+        $this->conn = null;
+        $this->fetchmode = null;
+        $this->cursorPos = 0;
+        $this->fields = null;
+        $this->ignoreAssocCase = false;
+        $this->limit = 0;
+        $this->offset = 0;
+    }
+
+    /**
+     * This function exists to set offset after ResultSet is instantiated.
+     * This function should be "protected" in Java sense: only available to classes in package.
+     * THIS METHOD SHOULD NOT BE CALLED BY ANYTHING EXCEPTION DRIVER CLASSES.
+     * @param int $offset New offset.
+     * @access protected
+     */
+    public function _setOffset($offset)
+    {
+        $this->offset = $offset;
+    }
+
+    /**
+     * This function exists to set limit after ResultSet is instantiated.
+     * This function should be "protected" in Java sense: only available to classes in package.
+     * THIS METHOD SHOULD NOT BE CALLED BY ANYTHING EXCEPTION DRIVER CLASSES.
+     * @param int $limit New limit.
+     * @access protected
+     */
+    public function _setLimit($limit)
+    {
+        $this->limit = $limit;
+    }
+
+    /**
+     * If fetchmode is FETCHMODE_ASSOC, returns the 1-based field index number
+     * for the specified column name. Otherwise returns 0 (false).
+     * @return int
+     */
+    function getFieldNum($colname)
+    {
+        $fieldnum = 0;
+
+        if ($this->fetchmode == ResultSet::FETCHMODE_ASSOC)
+        {
+            $keys = array_keys($this->fields);
+            $fieldnum = array_search($colname, $keys);
+        }
+
+        return $fieldnum;
+    }
+
+    /**
+     * Reads in any unread LOB data. For long char fields, we may already
+     * have up to odbc_longreadlen() bytes in the buffer. These are passed
+     * in via the $curdata parm. For long binary fields, no data is read
+     * initially since odbc_binmode() is set to ODBC_BINMODE_PASSTHRU.
+     * This method adjusts the binmode and longreadlen to finish reading
+     * these datatypes into the buffer. Returns a string with the complete
+     * contents.
+     *
+     * @param int|string $column Column index or name to read data from.
+     * @param int $binmode ODBC_BINMODE_RETURN for binary data, ODBC_BINMODE_CONVERT for char data.
+     * @param string $curdata Existing LOB data already in buffer.
+     * @return string
+     */
+    protected function readLobData($column, $binmode, $curdata = null)
+    {
+        // Retrieve field num
+        $fldNum = (is_int($column) ? $column : getFieldNum($column));
+
+        $data = $curdata;
+        $newdata = null;
+
+        // Adjust binmode and longreadlen
+        odbc_binmode($this->result->getHandle(), $binmode);
+        odbc_longreadlen($this->result->getHandle(), 4096);
+
+        while (1)
+        {
+            $newdata = odbc_result($this->result->getHandle(), $fldNum);
+
+            if ($newdata === false)
+                break;
+            else
+                $data .= $newdata;
+        }
+
+        // Restore the default binmode and longreadlen
+        odbc_binmode($this->result->getHandle(), ODBC_BINMODE_PASSTHRU);
+        odbc_longreadlen($this->result->getHandle(), ini_get('odbc.defaultlrl'));
+
+        // The ODBC driver I use seems to return a string with an escaped
+        // null char at the end for clob data.
+        $data = rtrim($data, "\x0");
+
+        return $data;
+    }
+    
+    /**
+     * Converts row fields to names if FETCHMODE_ASSOC is set.
+     *
+     * @param array& Row to convert.
+     *
+     * @return array& Converted row.
+     */
+    protected function checkFetchMode(&$row)
+    {
+        if ($this->fetchmode == ResultSet::FETCHMODE_ASSOC)
+        {
+            $newrow = array();
+            
+            for ($i = 0, $n = count($row); $i < $n; $i++)
+            {
+                $colname = @odbc_field_name($this->result->getHandle(), $i+1);
+                
+                if (!$this->ignoreAssocCase)
+                    $colname = strtolower($colname);
+                    
+                $newrow[$colname] = $row[$i];
+            }
+            
+            $row =& $newrow;
+        }
+        
+        return $row;
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCStatement.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,64 @@
+<?php
+/*
+ *  $Id: ODBCStatement.php,v 1.1 2004/07/27 23:08:30 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * ODBC Statement
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCStatement extends StatementCommon implements Statement
+{
+    /**
+     * @see Statement::executeQuery()
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {
+        if ($this->resultSet)
+        {
+            $this->resultSet->close();
+            $this->resultSet = null;
+        }
+
+        $this->updateCount = null;
+
+        if ($this->conn->getAdapter()->hasLimitOffset())
+        {
+            if ($this->limit > 0 || $this->offset > 0)
+                $this->conn->applyLimit($sql, $this->offset, $this->limit);
+        }
+
+        $this->resultSet = $this->conn->executeQuery($sql, $fetchmode);
+
+        if (!$this->conn->getAdapter()->hasLimitOffset())
+        {
+            $this->resultSet->_setOffset($this->offset);
+            $this->resultSet->_setLimit($this->limit);
+        }
+
+        return $this->resultSet;
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/ODBCTypes.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/ODBCTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/ODBCTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,189 @@
+<?php
+
+/*
+ *  $Id: ODBCTypes.php,v 1.1 2004/07/27 23:08:30 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * ODBC types / type map.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCTypes extends CreoleTypes {
+
+    /**
+     * Map ODBC native types to Creole (JDBC) types.
+     */
+    protected static $typeMap = null;
+
+    /**
+     * Reverse mapping, created on demand.
+     */
+    protected static $reverseMap = null;
+
+    /**
+     * Loads the map of ODBC data types to Creole (JDBC) types.
+     *
+     * NOTE: This function cannot map DBMS-specific datatypes. If you use a
+     *       driver which implements DBMS-specific datatypes, you will need
+     *       to modify/extend this class to add the correct mapping.
+     */
+    public static function loadTypeMap($conn = null)
+    {
+        if (self::$typeMap !== null && count(self::$typeMap) > 0)
+            return;
+
+        if ($conn == null)
+            throw new SQLException('No connection specified when loading ODBC type map.');
+
+        self::$typeMap = array();
+
+        $result = @odbc_gettypeinfo($conn->getResource());
+
+        if ($result === false)
+            throw new SQLException('Failed to retrieve type info.', $conn->nativeError());
+
+        $rowNum = 1;
+
+        while (odbc_fetch_row($result, $rowNum++))
+        {
+            $odbctypeid = odbc_result($result, 'DATA_TYPE');
+            $odbctypename = odbc_result($result, 'TYPE_NAME');
+
+            switch ($odbctypeid)
+            {
+                case SQL_CHAR:
+                    self::$typeMap[$odbctypename] = CreoleTypes::CHAR;
+                    break;
+                case SQL_VARCHAR:
+                    self::$typeMap[$odbctypename] = CreoleTypes::VARCHAR;
+                    break;
+                case SQL_LONGVARCHAR:
+                    self::$typeMap[$odbctypename] = CreoleTypes::LONGVARCHAR;
+                    break;
+                case SQL_DECIMAL:
+                    self::$typeMap[$odbctypename] = CreoleTypes::DECIMAL;
+                    break;
+                case SQL_NUMERIC:
+                    self::$typeMap[$odbctypename] = CreoleTypes::NUMERIC;
+                    break;
+                case SQL_BIT:
+                    self::$typeMap[$odbctypename] = CreoleTypes::BOOLEAN;
+                    break;
+                case SQL_TINYINT:
+                    self::$typeMap[$odbctypename] = CreoleTypes::TINYINT;
+                    break;
+                case SQL_SMALLINT:
+                    self::$typeMap[$odbctypename] = CreoleTypes::SMALLINT;
+                    break;
+                case SQL_INTEGER:
+                    self::$typeMap[$odbctypename] = CreoleTypes::INTEGER;
+                    break;
+                case SQL_BIGINT:
+                    self::$typeMap[$odbctypename] = CreoleTypes::BIGINT;
+                    break;
+                case SQL_REAL:
+                    self::$typeMap[$odbctypename] = CreoleTypes::REAL;
+                    break;
+                case SQL_FLOAT:
+                    self::$typeMap[$odbctypename] = CreoleTypes::FLOAT;
+                    break;
+                case SQL_DOUBLE:
+                    self::$typeMap[$odbctypename] = CreoleTypes::DOUBLE;
+                    break;
+                case SQL_BINARY:
+                    self::$typeMap[$odbctypename] = CreoleTypes::BINARY;
+                    break;
+                case SQL_VARBINARY:
+                    self::$typeMap[$odbctypename] = CreoleTypes::VARBINARY;
+                    break;
+                case SQL_LONGVARBINARY:
+                    self::$typeMap[$odbctypename] = CreoleTypes::LONGVARBINARY;
+                    break;
+                case SQL_DATE:
+                    self::$typeMap[$odbctypename] = CreoleTypes::DATE;
+                    break;
+                case SQL_TIME:
+                    self::$typeMap[$odbctypename] = CreoleTypes::TIME;
+                    break;
+                case SQL_TIMESTAMP:
+                    self::$typeMap[$odbctypename] = CreoleTypes::TIMESTAMP;
+                    break;
+                case SQL_TYPE_DATE:
+                    self::$typeMap[$odbctypename] = CreoleTypes::DATE;
+                    break;
+                case SQL_TYPE_TIME:
+                    self::$typeMap[$odbctypename] = CreoleTypes::TIME;
+                    break;
+                case SQL_TYPE_TIMESTAMP:
+                    self::$typeMap[$odbctypename] = CreoleTypes::TIMESTAMP;
+                    break;
+                default:
+                    self::$typeMap[$odbctypename] = CreoleTypes::OTHER;
+                    break;
+            }
+        }
+
+        @odbc_free_result($result);
+    }
+
+    /**
+     * This method returns the generic Creole (JDBC-like) type
+     * when given the native db type.
+     * @param string $nativeType DB native type (e.g. 'TEXT', 'byetea', etc.).
+     * @return int Creole native type (e.g. CreoleTypes::LONGVARCHAR, CreoleTypes::BINARY, etc.).
+     */
+    public static function getType($nativeType)
+    {
+        if (!self::$typeMap)
+            self::loadTypeMap();
+
+        $t = strtoupper($nativeType);
+
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::OTHER;
+        }
+    }
+
+    /**
+     * This method will return a native type that corresponds to the specified
+     * Creole (JDBC-like) type.
+     * If there is more than one matching native type, then the LAST defined
+     * native type will be returned.
+     * @param int $creoleType
+     * @return string Native type string.
+     */
+    public static function getNativeType($creoleType)
+    {
+        if (!self::$typeMap)
+            self::loadTypeMap();
+
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/README
===================================================================
--- trunk/vendor/creole/drivers/odbc/README	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/README	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,90 @@
+
+
+Creole ODBC Bridge Driver
+=========================
+
+
+I. Overview
+-----------
+
+In the text below, the word "driver" can get somewhat muddled since there are 
+two libraries concerned here (Creole & ODBC). So, we'll use the term "bridge 
+driver" to refer to Creole's ODBC bridge driver, and "ODBC driver" to refer to 
+an ODBC database driver.
+
+The Creole ODBC Bridge driver provides a solution for databases which 
+currently have no PHP-native interface. It is currently in an experimental
+stage of development. It has been tested with two ODBC drivers (Sequiter's
+CodeBase ODBC driver and the MySQL ODBC driver (as a baseline test)). To
+use any other ODBC drivers you may need to write your own ODBCAdapter-derived
+class (see below).
+
+
+II. ODBCAdapter
+---------------
+
+Because ODBC itself is a database abstraction library, the bridge driver needed
+a way of hiding ODBC driver-specific behavior. The solution to this was to 
+create an adapter layer (akin to how the Propel runtime engine works). Think of
+it as a sub-driver for the bridge driver. Any ODBC driver-specific behavior is
+handled by an ODBCAdapter-derived class. To use a specific adapter class, you
+specify its name via a parameter in the connection string:
+
+odbc://localhost/DSN=CodeBase;?adapter=CodeBase
+
+The string above will load the following file as the adapter to use with the
+bridge driver: creole/drivers/odbc/adapters/CodeBaseAdapter.php
+
+Some ODBC drivers are limited in support for various Creole features. The 
+ODBCAdapter also provides a method for emulation of some of these missing 
+features:
+
+    -The emulatePrepareStmt() method provides a switch for enabling prepared
+     statement emulation for drivers that do not support (or have trouble with)
+     prepared statements. This emulation is disabled by default.
+     
+    -The hasLimitOffset() method provides a switch for enabling LIMIT/OFFSET 
+     emulation for drivers that do not support this. This emulation is enabled
+     by default. The LIMIT/OFFSET emulation was borrowed from the MSSQL Creole 
+     driver.
+
+    -The createResultSet() method provides a switch for enabling cached 
+     result sets. To enable this feature, return an instance of 
+     ODBCCachedResultSet in the createResultSet() method of your ODBCAdapter-
+     derived class. This can be useful as a workaround for ODBC drivers which
+     lack support for record count retrieval, reverse/absolute cursor
+     scrolling, etc. In most cases, result rows are cached on-demand. So if 
+     you only read the first couple rows of a result, then only those rows will 
+     be cached.
+
+    -The getIdGenerator() method provides a switch for enabling sequence
+     emulation. This feature is enabled by default in ODBCAdapter and is 
+     implemented in the ODBCIdGenerator class. The emulation code was inspired
+     by the PEAR::DB nextID() method. If your database supports sequences or
+     autoincrement natively, you can return your own IdGenerator-derived class 
+     instead. Check out some of the other Creole drivers for IdGenerator 
+     examples.
+     
+     
+III. Incomplete Features
+------------------------
+
+    -The database metadata classes are not fully tested/complete. Specifically, 
+     the ODBCDatabaseInfo class does not currently set the database name. There 
+     may be other problems as well. 
+ 
+    -The Creole CallableStatement class (stored procedures) is not currently 
+     implemented. No immediate plans to do this in the future, but it looks
+     feasible.
+
+
+IV. Known Issues
+----------------
+
+This driver was developed using the PHP v5.0 final build. During the course 
+of testing I uncovered several bugs in the php_odbc module. I submitted
+patches for these bugs, but have not yet received word that they were 
+committed (they were just submitted this morning). If you want more details
+on the problems I encountered or would like a copy of the patches, please
+e-mail me (dlawson at masterytech.com).
+

Added: trunk/vendor/creole/drivers/odbc/adapters/CodeBaseAdapter.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/adapters/CodeBaseAdapter.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/adapters/CodeBaseAdapter.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,73 @@
+<?php
+/*
+ *  $Id: CodeBaseAdapter.php,v 1.3 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/drivers/odbc/adapters/ODBCAdapter.php';
+
+/**
+ * CodeBase driver-specific behavior.
+ *
+ * This adapter is for Sequiter's CodeBaseSQL product. It is a dBase ODBC
+ * driver. The driver only supports forward-only cursor scrolling so this
+ * adapter causes the ODBCCachedResultSet to be used.
+ *
+ * A couple other quirks exist: 
+ * 
+ * 1) Cannot get blobs to work correctly. If I try writing one to a 
+ *    LONGVARBINARY typed field, only the first few bytes are written.
+ *    This will cause the ResultSetTest::testGetBlob() test case to fail
+ *    when running tests for the driver.
+ *
+ * 2) For some reason the character count is off for the 
+ *    ResultSetTest::testSetClob() test case _only_ when running from the 
+ *    command line. If I run the same test through a web server it works fine.
+ *    Looks like it has something to do with line endings in Windows. The 
+ *    difference in file sizes is 9803 vs 10090.
+ *
+ * 3) Setting a clob field to null writes a space to the field in the table. 
+ *    This causes the PreparedStatementTest::testSetNull() test case to fail 
+ *    when running tests for the driver.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.odbc
+ */
+class CodeBaseAdapter extends ODBCAdapter
+{
+    /**
+     * @see ODBCAdapter::createResultSet()
+     */
+    public function preservesColumnCase()
+    {
+        return false;
+    }
+
+    /**
+     * @see ODBCAdapter::createResultSet()
+     */
+    public function createResultSet($conn, $odbcresult, $fetchmode)
+    {
+        require_once 'creole/drivers/odbc/ODBCResultSet.php';
+        return new ODBCResultSet($conn, $odbcresult, $fetchmode, true);
+    }
+
+}
+
+?>
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/adapters/MySQLAdapter.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/adapters/MySQLAdapter.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/adapters/MySQLAdapter.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,78 @@
+<?php
+/*
+ *  $Id: MySQLAdapter.php,v 1.1 2004/07/27 23:08:30 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/drivers/odbc/ODBCCachedResultSet.php';
+require_once 'creole/drivers/odbc/ODBCResultSet.php';
+require_once 'creole/drivers/odbc/adapters/ODBCAdapter.php';
+
+/**
+ * Implements MySQL driver-specific behavior.
+ *
+ * Obviously it would be much more efficient to simply use the Creole
+ * MySQL driver. This adapter was created for the sole purpose of testing
+ * the ODBC driver.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.odbc
+ */
+class MySQLAdapter extends ODBCAdapter
+{
+    /**
+     * @see ODBCAdapter::hasLimitOffset()
+     */
+    public function hasLimitOffset()
+    {
+        return true;
+    }
+
+    /**
+     * @see ODBCAdapter::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ( $limit > 0 ) {
+            $sql .= " LIMIT " . ($offset > 0 ? $offset . ", " : "") . $limit;
+        } else if ( $offset > 0 ) {
+            $sql .= " LIMIT " . $offset . ", 18446744073709551615";
+        }
+    }
+
+    /**
+     * @see ODBCAdapter::escape()
+     */
+    public function escape($str)
+    {
+        return addslashes($str);
+    }
+
+    /**
+     * @see ODBCAdapter::createResultSet()
+     */
+    public function createResultSet($conn, $odbcresult, $fetchmode)
+    {
+//        return new ODBCCachedResultSet($conn, $odbcresult, $fetchmode, true);
+        return new ODBCResultSet($conn, $odbcresult, $fetchmode);
+    }
+
+}
+
+?>
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/adapters/ODBCAdapter.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/adapters/ODBCAdapter.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/adapters/ODBCAdapter.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,115 @@
+<?php
+/*
+ *  $Id: ODBCAdapter.php,v 1.3 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Default class for ODBC driver-specific behavior.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.odbc
+ */
+class ODBCAdapter
+{
+    /**
+     * Returns true if column case is preserved in the database when a table
+     * is first created. Returns false if table does not preserve case (i.e.
+     * ProductID => PRODUCTID).
+     *
+     * @return boolean
+     */
+    public function preservesColumnCase()
+    {
+        return true;
+    }
+
+    /**
+     * Returns true if prepared statements should be emulated. This
+     * might be useful if your driver does not support (or has trouble with)
+     * prepared statements.
+     * 
+     * @return boolean
+     */
+    public function emulatePrepareStmt()
+    {
+        return false;
+    }
+    
+    /**
+     * Returns true if ODBC driver supports LIMIT/OFFSET via SQL.
+     *
+     * @return boolean
+     */
+    public function hasLimitOffset()
+    {
+        return false;
+    }
+
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+    }
+
+    /**
+     * @see PreparedStatementCommon::escape()
+     */
+    public function escape($str)
+    {
+        // use this instead of magic_quotes_sybase + addslashes(),
+        // just in case multiple RDBMS being used at the same time
+        return str_replace("'", "''", $str);
+    }
+
+    /**
+     * Returns an instance of the default resultset.
+     *
+     * @return boolean
+     */
+    public function createResultSet($conn, $odbcresult, $fetchmode)
+    {
+        require_once 'creole/drivers/odbc/ODBCResultSet.php';
+        return new ODBCResultSet($conn, $odbcresult, $fetchmode);
+    }
+
+    /**
+     * Returns the default ODBCIdGenerator for emulating sequences.
+     *
+     * @return ODBCIdGenerator
+     */
+    public function getIdGenerator($conn)
+    {
+        require_once 'creole/drivers/odbc/ODBCIdGenerator.php';
+        return new ODBCIdGenerator($conn);
+    }
+
+    /**
+     * Returns true if driver support transactions.
+     * 
+     * @return boolean
+     */
+    public function supportsTransactions()
+    {
+        return true;
+    }
+}
+
+?>
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/metadata/ODBCDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/metadata/ODBCDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/metadata/ODBCDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,66 @@
+<?php
+/*
+ *  $Id: ODBCDatabaseInfo.php,v 1.1 2004/07/27 23:08:30 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * ODBC implementation of DatabaseInfo.
+ *
+ * @todo Still need a way to obtain the database name. Not sure how to do this yet.
+ * @todo This might need to be an {@link ODBCAdapter} method.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.odbc.metadata
+ */
+class ODBCDatabaseInfo extends DatabaseInfo {
+
+    /**
+     * @see DatabaseInfo::initTables()
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/odbc/metadata/ODBCTableInfo.php';
+
+        $result = @odbc_tables($this->dblink);
+
+        if (!$result)
+            throw new SQLException('Could not list tables', $this->conn->nativeError());
+
+        while (odbc_fetch_row($result))
+        {
+            $tablename = strtoupper(odbc_result($result, 'TABLE_NAME'));
+            $this->tables[$tablename] = new ODBCTableInfo($this, $tablename);
+        }
+
+        @odbc_free_result($result);
+    }
+
+    /**
+     * @return void
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // Not sure how this is used yet.
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/odbc/metadata/ODBCTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/odbc/metadata/ODBCTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/odbc/metadata/ODBCTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,140 @@
+<?php
+/*
+ *  $Id: ODBCTableInfo.php,v 1.1 2004/07/27 23:08:30 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * ODBC implementation of TableInfo.
+ *
+ * @author    Dave Lawson <dlawson at masterytech.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.odbc.metadata
+ */
+class ODBCTableInfo extends TableInfo {
+
+    /**
+     * @see TableInfo::initColumns()
+     */
+    protected function initColumns()
+    {
+        include_once 'creole/metadata/ColumnInfo.php';
+        include_once 'creole/drivers/odbc/ODBCTypes.php';
+
+        ODBCTypes::loadTypeMap($this->conn);
+
+        $result = @odbc_columns($this->dblink, $this->dbname, '', $this->name);
+
+        if (!$result)
+            throw new SQLException('Could not get column names', $this->conn->nativeError());
+
+        while (odbc_fetch_row($result))
+        {
+            $name = odbc_result($result, 'COLUMN_NAME');
+            $type = odbc_result($result, 'TYPE_NAME');
+            $length = odbc_result($result, 'LENGTH');
+            $is_nullable = odbc_result($result, 'NULLABLE');
+            $default = '';
+            $precision = odbc_result($result, 'PRECISION');
+            $this->columns[$name] = new ColumnInfo($this, $name, ODBCTypes::getType($type), $type, $length, $precision, $is_nullable, $default);
+        }
+
+        @odbc_free_result($result);
+
+        $this->colsLoaded = true;
+    }
+
+    /**
+     * @see TableInfo::initPrimaryKey()
+     */
+    protected function initPrimaryKey()
+    {
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+        $result = @odbc_primarykeys($this->dblink, $this->dbname, '', $this->name);
+
+        while (odbc_fetch_row($result))
+        {
+            $name = odbc_result($result, 'COLUMN_NAME');
+
+            if (!isset($this->primaryKey))
+                $this->primaryKey = new PrimaryKeyInfo($name);
+
+            $this->primaryKey->addColumn($this->columns[$name]);
+        }
+
+        @odbc_free_result($result);
+
+        $this->pkLoaded = true;
+    }
+
+    /**
+     * @see TableInfo::initIndexes()
+     */
+    protected function initIndexes()
+    {
+        // Not sure if this can be implemented in a driver-independent way.
+    }
+
+    /**
+     * @see TableInfo::initForeignKeys()
+     */
+    protected function initForeignKeys()
+    {
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+        $result = @odbc_foreignkeys($this->dblink, '', '', '', $this->dbname, '', $this->name);
+
+        while (odbc_fetch_row($result))
+        {
+            $name = odbc_result($result, 'COLUMN_NAME');
+            $ftbl = odbc_result($result, 'FKTABLE_NAME');
+            $fcol = odbc_result($result, 'FKCOLUMN_NAME');
+
+            if (!isset($this->foreignKeys[$name]))
+            {
+                $this->foreignKeys[$name] = new ForeignKeyInfo($name);
+
+                if (($foreignTable = $this->database->getTable($ftbl)) === null)
+                {
+                    $foreignTable = new TableInfo($ltbl);
+                    $this->database->addTable($foreignTable);
+                }
+
+                if (($foreignCol = $foreignTable->getColumn($name)) === null)
+                {
+                    $foreignCol = new ColumnInfo($foreignTable, $name);
+                    $foreignTable->addColumn($foreignCol);
+                }
+
+                $this->foreignKeys[$name]->addReference($this->columns[$name], $foreignCol);
+            }
+        }
+
+        @odbc_free_result($result);
+
+        $this->fksLoaded = true;
+    }
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/oracle/OCI8Connection.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8Connection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8Connection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,386 @@
+<?php
+
+/**
+ *  $Id: OCI8Connection.php,v 1.18 2005/10/17 19:03:51 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+include_once 'creole/drivers/oracle/OCI8ResultSet.php';
+
+/**
+ * Oracle implementation of Connection.
+ * 
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @author    Stig Bakken <ssb at fast.no> 
+ * @author    Lukas Smith
+ * @version   $Revision: 1.18 $
+ * @package   creole.drivers.oracle
+ */ 
+class OCI8Connection extends ConnectionCommon implements Connection
+{        
+    protected $lastStmt			= null;    
+
+    /**
+     * Auto commit mode for oci_execute
+     * @var int
+     */
+    protected $execMode			= OCI_COMMIT_ON_SUCCESS;
+
+    /**
+     * Connect to a database and log in as the specified user.
+     *
+     * @param array $dsn The data source hash.
+     * @param int $flags Any connection flags.
+     * @access public
+     * @throws SQLException
+     * @return void
+     */
+    function connect( $dsninfo, $flags = 0 )
+    {
+        if ( !extension_loaded( 'oci8' ) )
+		{
+            throw new SQLException( 'oci8 extension not loaded' );
+        }
+
+        $this->dsn				= $dsninfo;
+        $this->flags			= $flags;
+        
+        $persistent				=
+			( $flags & Creole::PERSISTENT === Creole::PERSISTENT );
+        
+        $user					= $dsninfo[ 'username' ];
+        $pw						= $dsninfo[ 'password' ];
+        $hostspec				= $dsninfo[ 'hostspec' ];
+
+        $connect_function		= ( $persistent )
+									? 'oci_pconnect'
+									: 'oci_connect';
+
+		@ini_set( 'track_errors', true );
+
+        if ( $hostspec && $user && $pw )
+		{
+			$conn				= @$connect_function( $user, $pw, $hostspec );
+        }
+		
+		elseif ( $user || $pw )
+		{
+			$conn				= @$connect_function( $user, $pw );
+        }
+		
+		else
+		{
+			$conn				= false;
+        }
+
+        @ini_restore( 'track_errors' );
+        
+        if ( $conn == false )
+		{
+            $error				= oci_error();
+            $error				= ( is_array( $error ) )
+									? $error[ 'message' ]
+									: null;
+
+            throw new SQLException( 'connect failed', $error );
+        }
+
+        $this->dblink			= $conn;
+
+        //connected ok, need to set a few environment settings
+        //please note, if this is changed, the function setTimestamp and setDate in OCI8PreparedStatement.php
+        //must be changed to match
+        $sql = "ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD HH24:MI:SS'";
+        $this->executeQuery($sql);
+    }
+
+
+    /**
+     * @see Connection::disconnect()
+     */
+    function close()
+    {
+        $ret = @oci_close( $this->dblink );
+        $this->dblink = null;
+        return $ret;
+    }        
+    
+    /**
+     * @see Connection::executeQuery()
+     */
+    function executeQuery( $sql, $fetchmode = null )
+    {
+        $this->lastQuery		= $sql;
+
+        // $result = @oci_parse( $this->dblink, $sql );
+        $result					= oci_parse( $this->dblink, $sql );
+
+        if ( ! $result )
+		{
+            throw new SQLException( 'Unable to prepare query'
+				, $this->nativeError()
+				, $sql
+			);
+        }
+
+        $success				= oci_execute( $result, $this->execMode );
+
+        if ( ! $success )
+		{
+            throw new SQLException( 'Unable to execute query'
+				, $this->nativeError( $result )
+				, $sql
+			);
+        }
+        
+        return new OCI8ResultSet( $this, $result, $fetchmode );
+    }
+
+    
+    /**
+     * @see Connection::simpleUpdate()
+     */
+    
+    function executeUpdate( $sql )
+    {    
+        $this->lastQuery		= $sql;
+
+        $statement				= oci_parse( $this->dblink, $sql );
+		
+        if ( ! $statement )
+		{
+            throw new SQLException( 'Unable to prepare update'
+				, $this->nativeError()
+				, $sql
+			);
+        }
+                
+        $success				= oci_execute( $statement, $this->execMode );
+
+        if ( ! $success )
+		{
+            throw new SQLException( 'Unable to execute update'
+				, $this->nativeError( $statement )
+				, $sql
+			);
+        }
+
+        $this->lastStmt			= $statement;
+
+        return oci_num_rows( $statement );
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        $this->execMode			= OCI_DEFAULT;
+    }
+        
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        $result					= oci_commit( $this->dblink );
+
+        if ( ! $result )
+		{
+            throw new SQLException( 'Unable to commit transaction'
+				, $this->nativeError()
+			);
+        }
+
+        $this->execMode			= OCI_COMMIT_ON_SUCCESS;
+    }
+
+    
+    /**
+     * Roll back ( undo ) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        $result					= oci_rollback( $this->dblink );
+
+        if ( ! $result )
+		{
+            throw new SQLException( 'Unable to rollback transaction'
+				, $this->nativeError()
+			);
+        }
+
+        $this->execMode			= OCI_COMMIT_ON_SUCCESS;
+    }
+
+    
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     *
+     * @return int Number of rows affected by the last query.
+     * @todo -cOCI8Connection Figure out whether getUpdateCount() should throw exception on error or just return 0.
+     */
+    function getUpdateCount()
+    {
+        if ( ! $this->lastStmt )
+		{
+            return 0;
+        }
+
+        $result					= oci_num_rows( $this->lastStmt );
+
+        if ( $result === false )
+		{
+            throw new SQLException( 'Update count failed'
+				, $this->nativeError( $this->lastStmt )
+			);
+        }
+
+        return $result;
+    }
+
+
+   /**
+    * Build Oracle-style query with limit or offset.
+    * If the original SQL is in variable: query then the requlting
+    * SQL looks like this:
+    * <pre>
+    * SELECT B.* FROM ( 
+    *          SELECT A.*, rownum as TORQUE$ROWNUM FROM ( 
+    *                  query
+    *           ) A
+    *      ) B WHERE B.TORQUE$ROWNUM > offset AND B.TORQUE$ROWNUM
+    *     <= offset + limit
+    * </pre>
+    *
+    * @param string &$sql the query
+    * @param int $offset
+    * @param int $limit
+    * @return void ( $sql parameter is currently manipulated directly )
+    */
+   public function applyLimit( &$sql, $offset, $limit )
+   {
+        $sql					=
+			'SELECT B.* FROM (  '
+			.  'SELECT A.*, rownum AS CREOLE$ROWNUM FROM (  '
+			. $sql
+			. '  ) A '
+			.  ' ) B WHERE ';
+
+        if ( $offset > 0 )
+		{
+            $sql				.= ' B.CREOLE$ROWNUM > ' . $offset;            
+
+            if ( $limit > 0 )
+			{
+                $sql			.= ' AND B.CREOLE$ROWNUM <= '
+									. ( $offset + $limit );
+            }
+        }
+
+		else
+		{
+			$sql				.= ' B.CREOLE$ROWNUM <= ' . $limit;
+		}
+   } 
+
+    /**
+     * Get the native Oracle Error Message as a string.
+     *
+     * @param string $msg The Internal Error Message
+     * @param mixed $errno The Oracle Error resource
+     */
+    public function nativeError( $result = null )
+	{
+		if ( $result !== null )
+		{
+			$error				= oci_error( $result );
+		}
+	
+		else
+		{
+			$error				= oci_error( $this->dblink );
+		}         
+
+		return $error[ 'code' ] . ': ' . $error[ 'message' ];
+	}
+    
+    
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/oracle/metadata/OCI8DatabaseInfo.php';
+
+        return new OCI8DatabaseInfo( $this );
+    }
+    
+    /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/oracle/OCI8IdGenerator.php';
+
+        return new OCI8IdGenerator( $this );
+    }
+    
+    /**
+     * Oracle supports native prepared statements, but the oci_parse call
+     * is actually called by the OCI8PreparedStatement class because
+     * some additional SQL processing may be necessary ( e.g. to apply limit ).
+     * @see OCI8PreparedStatement::executeQuery()
+     * @see OCI8PreparedStatement::executeUpdate()
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement( $sql ) 
+    {
+        require_once 'creole/drivers/oracle/OCI8PreparedStatement.php';
+
+        return new OCI8PreparedStatement( $this, $sql );
+    }
+    
+    /**
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall( $sql )
+	{
+        throw new SQLException( 'Oracle driver does not yet support stored procedures using CallableStatement.' );
+    }
+    
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/oracle/OCI8Statement.php';
+
+        return new OCI8Statement( $this );
+    }
+}

Added: trunk/vendor/creole/drivers/oracle/OCI8IdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8IdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8IdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,65 @@
+<?php
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * Oracle (OCI8) IdGenerator implimenation.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.drivers.oracle
+ */
+class OCI8IdGenerator implements IdGenerator {
+    
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+    
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return true;
+    }    
+    
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return false;
+    }
+        
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::SEQUENCE;
+    }
+    
+    /**
+     * @see IdGenerator::getId()
+     */
+    public function getId($name = null)
+    {
+        if ($name === null) {
+            throw new SQLException("You must specify the sequence name when calling getId() method.");
+        }
+        $rs = $this->conn->executeQuery("select " . $name . ".nextval from dual", ResultSet::FETCHMODE_NUM);
+        $rs->next();
+        return $rs->getInt(1);
+    }
+    
+}
+

Added: trunk/vendor/creole/drivers/oracle/OCI8PreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8PreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8PreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,413 @@
+<?php
+/*
+ *  $Id: OCI8PreparedStatement.php,v 1.23 2005/10/06 20:42:52 sethr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * Oracle (OCI8) implementation of PreparedStatement.
+ * 
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.23 $
+ * @package   creole.drivers.oracle
+ */
+class OCI8PreparedStatement extends PreparedStatementCommon implements PreparedStatement {
+
+    /**
+     * Descriptor holders for LOB values.
+     * There are other types of descriptors, but we need to keep
+     * them separate, because we need to execute the save()/savefile() method
+     * on lob descriptors.
+     * @var array object from oci_new_descriptor
+     */
+    private $lobDescriptors = array();
+    
+    /**
+     * Hold any Blob/Clob data.
+     * These can be matched (by key) to descriptors in $lobDescriptors.
+     * @var array Lob[]
+     */
+    private $lobs = array();        
+
+    /**
+     * Array to store the columns in an insert or update statement.
+     * This is necessary for the proper handling of lob variables
+     * @var arrary columns[]
+     */
+    private $columns = array();
+    
+    /**
+     * If the statement is set, free it.
+     * @see PreparedStatement::close()
+     */
+    function close()
+    {
+         if (isset($this->stmt))
+              @oci_free_statement($this->stmt);
+    }
+    
+    /**
+     * ' -> ''
+     * @param string $str
+     * @return string
+     */
+    protected function escape($str)
+    {
+        return str_replace("'","''", $str);
+    }
+
+    /**
+     * Executes the SQL query in this PreparedStatement object and returns the resultset generated by the query.
+     * @param mixed $p1 Either (array) Parameters that will be set using PreparedStatement::set() before query is executed or (int) fetchmode.
+     * @param int $fetchmode The mode to use when fetching the results (e.g. ResultSet::FETCHMODE_NUM, ResultSet::FETCHMODE_ASSOC).
+     * @return ResultSet
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeQuery($p1 = null, $fetchmode = null)
+    {
+        $params = null;
+        if ($fetchmode !== null) {
+            $params = $p1;
+        } elseif ($p1 !== null) {
+            if (is_array($p1)) $params = $p1;
+            else $fetchmode = $p1;
+        }
+        
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+
+        $this->updateCount = null; // reset        
+                
+        $sql = $this->sqlToOracleBindVars($this->sql);
+        
+        if ($this->limit > 0 || $this->offset > 0) {
+            $this->conn->applyLimit($sql, $this->offset, $this->limit);
+        }
+        
+        $result = oci_parse($this->conn->getResource(), $sql);
+        if (!$result) {
+            throw new SQLException("Unable to prepare query", $this->conn->nativeError(), $this->sqlToOracleBindVars($this->sql));
+        }
+        
+        // bind all variables
+        $this->bindVars($result);
+        
+        $success = oci_execute($result, OCI_DEFAULT);
+        if (!$success) {
+            throw new SQLException("Unable to execute query", $this->conn->nativeError($result), $this->sqlToOracleBindVars($this->sql));
+        }
+        
+        $this->resultSet = new OCI8ResultSet($this->conn, $result, $fetchmode);
+        
+        return $this->resultSet;
+    }
+    
+    /**
+     * Executes the SQL INSERT, UPDATE, or DELETE statement in this PreparedStatement object.
+     * 
+     * @param array $params Parameters that will be set using PreparedStatement::set() before query is executed.
+     * @return int Number of affected rows (or 0 for drivers that return nothing).
+     * @throws SQLException if a database access error occurs.
+     */
+    public function executeUpdate($params = null) 
+    {
+        if ($params) {
+            for($i=0,$cnt=count($params); $i < $cnt; $i++) {
+                $this->set($i+1, $params[$i]);
+            }
+        }
+
+        if($this->resultSet) $this->resultSet->close();
+        $this->resultSet = null; // reset
+        
+        $stmt = oci_parse($this->conn->getResource(), $this->sqlToOracleBindVars($this->sql));
+        if (!$stmt) {
+            throw new SQLException("Unable to prepare update", $this->conn->nativeError(), $this->sqlToOracleBindVars($this->sql));
+        }
+        
+        // bind all variables
+        $this->bindVars($stmt); 
+
+        // Even if autocommit is on, delay commit until after LOBS have been saved
+        $success = oci_execute($stmt, OCI_DEFAULT);
+        if (!$success) {
+            throw new SQLException("Unable to execute update", $this->conn->nativeError($stmt), $this->sqlToOracleBindVars($this->sql));
+        }        
+
+        // save data in any LOB descriptors, then free them
+        foreach($this->lobDescriptors as $paramIndex => $lobster) {
+            $lob = $this->lobs[$paramIndex]; // corresponding Blob/Clob
+            if ($lob->isFromFile()) {
+                $success = $lobster->savefile($lob->getInputFile());
+            } else {
+                $success = $lobster->save($lob->getContents());
+            }
+            if (!$success) {                
+                $lobster->free();
+                throw new SQLException("Error saving lob bound to " . $paramIndex);
+            }
+            $lobster->free();
+        }
+
+        if ($this->conn->getAutoCommit()) {
+            oci_commit($this->conn->getResource()); // perform deferred commit
+        }
+        
+        $this->updateCount = @oci_num_rows($stmt);
+
+        return $this->updateCount;
+    }
+
+    /**
+     * Performs the actual binding of variables using oci_bind_by_name().
+     * 
+     * This may seem like useless overhead, but the reason why calls to oci_bind_by_name() 
+     * are not performed in the set*() methods is that it is possible that the SQL will
+     * need to be modified -- e.g. by a setLimit() call -- and re-prepared.  We cannot assume
+     * that the statement has been prepared when the set*() calls are invoked.  This also means,
+     * therefore, that the set*() calls will not throw exceptions; all exceptions will be thrown
+     * when the statement is prepared.
+     * 
+     * @param resource $stmt The statement result of oci_parse to use for binding.
+     * @return void
+     */
+    private function bindVars($stmt)
+    {
+        foreach ($this->boundInVars as $idx => $val) {
+            $idxName = ":var" . $idx;
+            if (!oci_bind_by_name($stmt, $idxName, $this->boundInVars[$idx], -1)) {
+                throw new SQLException("Erorr binding value to placeholder " . $idx);
+            }            
+        } // foreach
+
+        foreach ($this->lobs as $idx => $val) {
+            $idxName = ":var" . $idx;
+            if (class_exists('Blob') && $val instanceof Blob){
+                if (!oci_bind_by_name($stmt, $idxName, $this->lobDescriptors[$idx], -1, OCI_B_BLOB))
+                    throw new SQLException("Erorr binding blob to placeholder " . $idx);
+            } elseif (class_exists('Clob') && $val instanceof Clob){
+                if (!oci_bind_by_name($stmt, $idxName, $this->lobDescriptors[$idx], -1, OCI_B_CLOB))
+                    throw new SQLException("Erorr binding clob to placeholder " . $idx);
+            }
+        } // foreach
+    }
+
+
+    /**
+     * Convert a Propel SQL into Oracle SQL
+     *
+     * Look for all of the '?' and replace with ":varX"
+     *
+     * @param string $sql SQL in Propel native format
+     * @return string SQL in Oracle Bind Var format
+     * @todo -cOCI8PreparedStatement Consider changing this implementation to use the fact that we
+     *                               already know where all the '?' chars are (in $positions array).
+     */
+    private function sqlToOracleBindVars($sql)
+    {
+        $out = "";
+        $in_literal = 0;
+        $idxNum = 1;
+        for ($i = 0; $i < strlen($sql); $i++) {
+            $char = $sql[$i];
+            if (strcmp($char,"'")==0) {
+                $in_literal = ~$in_literal;
+            }
+            if (strcmp($char,"?")==0 && !$in_literal) {
+                if (array_key_exists($idxNum, $this->lobs)){
+                    if (class_exists('Blob') && ($this->lobs[$idxNum] instanceof Blob))
+                        $out .= "empty_blob()";
+                    if (class_exists('Clob') && ($this->lobs[$idxNum] instanceof Clob))
+                        $out .= "empty_clob()";
+                } else
+                    $out .= ":var" . $idxNum;
+                $idxNum++;
+            } else {
+                $out .= $char;
+            }
+        }
+
+        if (isset($this->lobs) && !empty($this->lobs)) {
+            $this->setColumnArray();
+
+            $retstmt = " Returning ";
+            $collist = "";
+            $bindlist = "";
+            foreach ($this->lobs as $idx=>$val) {
+                $idxName = ":var" . $idx;
+                if ((class_exists('Blob') && $val instanceof Blob) || (class_exists('Clob') && $val instanceof Clob)) {
+                    //the columns array starts at zero instead of 1 like the lobs array
+                    $collist .= $this->columns[$idx-1] . ",";
+                    $bindlist .= $idxName . ",";
+                }
+            }
+
+            if (!empty($collist))
+                $out .= $retstmt . rtrim($collist, ",") . " into " . rtrim($bindlist, ",");
+        }
+
+        return $out;
+    }
+
+    /**
+     * @param string $paramIndex
+     * @param mixed $blob Blob object or string containing data.
+     * @return void
+     */
+    function setBlob($paramIndex, $blob) 
+    {
+        require_once 'creole/util/Blob.php';
+        if (!($blob instanceof Blob)) {
+            $b = new Blob();
+            $b->setContents($blob);
+            $blob = $b;
+        }
+        $this->lobDescriptors[$paramIndex] = oci_new_descriptor($this->conn->getResource(), OCI_D_LOB);
+        $this->lobs[$paramIndex] = $blob;        
+    }
+
+    /**
+     * @param string $paramIndex
+     * @param mixed $clob Clob object or string containing data.
+     * @return void
+     */
+    function setClob($paramIndex, $clob) 
+    {
+        require_once 'creole/util/Clob.php';
+        if (!($clob instanceof Clob)) {
+            $c = new Clob();
+            $c->setContents($clob);
+            $clob = $c;
+        }
+        $this->lobDescriptors[$paramIndex] = oci_new_descriptor($this->conn->getResource(), OCI_D_LOB);
+        $this->lobs[$paramIndex] = $clob;        
+    }
+
+    /**
+     * Since bind variables in oracle have no special characters, this setString method differs from the
+     * common one in that it does not single quote strings.
+     *
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setString($paramIndex, $value)
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // it's ok to have a fatal error here, IMO, if object doesn't have
+            // __toString() and is being passed to this method.
+            if ( is_object ( $value ) ) {
+                $this->boundInVars[$paramIndex] = $this->escape($value->__toString());
+            } else {
+                $this->boundInVars[$paramIndex] = $this->escape((string)$value);
+            }
+        }
+    }
+
+    /**
+     * Copied this function from common/PreparedStatement.php and modified to work with Oracle
+     * Please note the format used with date() matches that of NLS_DATE_FORMAT set in
+     * OCI8Connection.php
+     *
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setTimestamp($paramIndex, $value)
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date('Y-m-d H:i:s', $value);
+            elseif (is_object($value)) $value = date('Y-m-d H:i:s', $value->getTime());
+            $this->boundInVars[$paramIndex] = $this->escape($value);
+        }
+    }
+
+    /**
+     * Please note the format used with date() matches that of NLS_DATE_FORMAT set in
+     * OCI8Connection.php
+     *
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setDate($paramIndex, $value)
+    {
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if (is_numeric($value)) $value = date("Y-m-d", $value);
+            elseif (is_object($value)) $value = date("Y-m-d", $value->getTime());
+            $this->boundInVars[$paramIndex] = $this->escape($value);
+        }
+    }
+
+    /**
+     * In order to send lob data (clob/blob) to the Oracle data base, the 
+     * sqlToOracleBindVars function needs to have an ordered list of the
+     * columns being addressed in the sql statement.
+     * Since only insert and update statements require special handling,
+     * there are two ways to find the columns:
+     *  1) find the first set of () and parse out the columns names based on
+     *     the token ','
+     *  2) find all the text strings to the left of the equal signs.
+     *
+     * @param void
+     * @return void
+     */
+    private function setColumnArray()
+    {
+        $this->columns = array();
+
+        //handle the simple insert case first
+        if(strtoupper(substr($this->sql, 0, 6)) == 'INSERT') {
+            $firstPos = strpos($this->sql, '(');
+            $secPos = strpos($this->sql, ')');
+            $collist = substr($this->sql, $firstPos + 1, $secPos - $firstPos - 1);
+            $this->columns = explode(',', $collist);
+        }
+        if (strtoupper(substr($this->sql, 0, 6)) == 'UPDATE') {
+            //handle more complex update case
+            //first get the string setup so we can explode based on '=?'
+            //second split results from previous action based on ' '
+            // the last token from this should be a column name
+            $tmp = $this->sql;
+            $tmp = str_replace(" =", "=", $this->sql);
+            $tmp = str_replace("= ", "=", $tmp);
+            $tmp = str_replace(",", " ", $tmp);
+            $stage1 = explode("=?",$tmp);
+            
+            foreach($stage1 as $chunk) {
+                $stage2 = explode(' ', $chunk);
+                $this->columns[count($this->columns)] = $stage2[count($stage2) - 1];
+            }
+        }
+   }
+
+}
+

Added: trunk/vendor/creole/drivers/oracle/OCI8ResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8ResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8ResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,133 @@
+<?php
+/*
+ *  $Id: OCI8ResultSet.php,v 1.12 2004/11/02 23:31:49 comprock Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * Oracle (OCI8) implementation of ResultSet class.
+ *
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole.drivers.oracle
+ */
+class OCI8ResultSet extends ResultSetCommon implements ResultSet
+{
+    /**
+     * @see ResultSet::seek()
+     */ 
+    function seek($rownum)
+    {
+        if ( $rownum < $this->cursorPos )
+		{
+            // this will effectively disable previous(), first() and some calls to relative() or absolute()
+            throw new SQLException( 'Oracle ResultSet is FORWARD-ONLY' );
+        }
+        
+        // Oracle has no seek function imulate it here
+        while ( $this->cursorPos < $rownum )
+		{
+            $this->next();
+        }
+
+        $this->cursorPos		= $rownum;
+
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::next()
+     */ 
+    function next()
+    {   
+		// no specific result position available
+
+		// Returns an array, which corresponds to the next result row or FALSE
+		// in case of error or there is no more rows in the result.
+        $this->fields			= oci_fetch_array( $this->result
+									, $this->fetchmode
+										+ OCI_RETURN_NULLS
+										+ OCI_RETURN_LOBS
+								);
+
+		if ( ! $this->fields )
+		{
+			// grab error via array
+			$error				= oci_error( $this->result );
+
+			if ( ! $error )
+			{
+				// end of recordset
+				$this->afterLast();
+
+				return false;
+			}
+
+			else
+			{
+				throw new SQLException( 'Error fetching result'
+					, $error[ 'code' ] . ': ' . $error[ 'message' ]
+				);
+			}
+		}
+
+		// Oracle returns all field names in uppercase and associative indices
+		// in the result array will be uppercased too.
+        if ( ! $this->ignoreAssocCase )
+		{
+			$this->fields		= array_change_key_case( $this->fields
+									, CASE_LOWER
+								);
+        }
+        
+        // Advance cursor position
+        $this->cursorPos++;
+
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    function getRecordCount()
+    {
+        $rows					= oci_num_rows( $this->result );
+
+        if ( $rows === false )
+		{
+            throw new SQLException( 'Error fetching num rows'
+				, $this->conn->nativeError( $this->result )
+			);
+        }
+
+        return ( int ) $rows;
+    }
+
+    /**
+     * @see ResultSet::close()
+     */ 
+    function close()
+    {
+		$this->fields			= array();
+        @oci_free_statement( $this->result );
+    }
+}

Added: trunk/vendor/creole/drivers/oracle/OCI8Statement.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8Statement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8Statement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,34 @@
+<?php
+/*
+ *  $Id: OCI8Statement.php,v 1.2 2004/03/05 15:46:12 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * Oracle (OCI8) Statement implementation.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.2 $
+ * @package   creole.drivers.oracle
+ */ 
+class OCI8Statement extends StatementCommon implements Statement {
+    
+}

Added: trunk/vendor/creole/drivers/oracle/OCI8Types.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/OCI8Types.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/OCI8Types.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,88 @@
+<?php
+
+/*
+ *  $Id: OCI8Types.php,v 1.8 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * Oracle types / type map.
+ *
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.drivers.oracle
+ */
+class OCI8Types extends CreoleTypes {
+
+    /** Map Oracle native types to Creole (JDBC) types. */
+    private static $typeMap = array(
+                                'char' => CreoleTypes::CHAR,
+                                'varchar2' => CreoleTypes::VARCHAR,
+                                'long' => CreoleTypes::LONGVARCHAR,
+                                'number' => CreoleTypes::NUMERIC,
+                                'float' => CreoleTypes::FLOAT,
+                                'integer' => CreoleTypes::INTEGER,
+                                'smallint' => CreoleTypes::SMALLINT,
+                                'double' => CreoleTypes::DOUBLE,
+                                'raw' => CreoleTypes::VARBINARY,
+                                'longraw' => CreoleTypes::LONGVARBINARY,
+                                'date' => CreoleTypes::TIMESTAMP,
+                                'blob' => CreoleTypes::BLOB,
+                                'clob' => CreoleTypes::CLOB,
+                                'varray' => CreoleTypes::ARR,
+                                );
+    
+    /** Reverse mapping, created on demand. */
+    private static $reverseMap = null;
+    
+    /**
+     * This method returns the generic Creole (JDBC-like) type
+     * when given the native db type.
+     * @param string $nativeType DB native type (e.g. 'TEXT', 'byetea', etc.).
+     * @return int Creole native type (e.g. CreoleTypes::LONGVARCHAR, CreoleTypes::BINARY, etc.).
+     */
+    public static function getType($nativeType)
+    {
+        $t = strtolower($nativeType);
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::OTHER;
+        }
+    }
+            
+    /**
+     * This method will return a native type that corresponds to the specified
+     * Creole (JDBC-like) type.
+     * If there is more than one matching native type, then the LAST defined 
+     * native type will be returned.
+     * @param int $creoleType
+     * @return string Native type string.
+     */
+    public static function getNativeType($creoleType)
+    {
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+                                
+}

Added: trunk/vendor/creole/drivers/oracle/metadata/OCI8DatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/metadata/OCI8DatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/metadata/OCI8DatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,90 @@
+<?php
+/*
+ *  $Id: OCI8DatabaseInfo.php,v 1.10 2004/11/02 23:31:50 comprock Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * Oracle (OCI8) implementation of DatabaseInfo.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.10 $
+ * @package   creole.drivers.oracle.metadata
+ */ 
+class OCI8DatabaseInfo extends DatabaseInfo {
+    
+    private $schema;
+           
+    public function __construct(Connection $conn) {
+        parent::__construct($conn);
+        
+        $dsn = $conn->getDSN();
+        
+        // For Changing DB/Schema in Meta Data Interface
+        $this->schema = $dsn['database'];
+        // For Oracle Type DBs
+        if (!$this->schema) {
+            $this->schema = $dsn['username'];
+        }
+            
+		$this->schema = strtoupper( $this->schema );
+    }
+    
+    public function getSchema() {
+        return $this->schema;
+    }
+    
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/oracle/metadata/OCI8TableInfo.php';
+        
+        $sql = "SELECT table_name
+            FROM all_tables
+            WHERE owner = '{$this->schema}'";
+
+        $statement = @oci_parse($this->dblink,$sql);
+
+        $success = @oci_execute($statement,OCI_DEFAULT);        
+        if (!$success) {
+            throw new SQLException("Could not get tables", $this->dblink->nativeError($statement));
+        }
+        while ( $statement && $row = oci_fetch_assoc( $statement ) )
+		{
+            $row = array_change_key_case($row,CASE_LOWER);
+            $this->tables[strtoupper($row['table_name'])] = new OCI8TableInfo($this,$row['table_name']);
+        }
+    }            
+    
+    /**
+     * Oracle supports sequences.
+     *
+     * @return void 
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // throw new SQLException("MySQL does not support sequences natively.");
+    }
+        
+}

Added: trunk/vendor/creole/drivers/oracle/metadata/OCI8TableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/oracle/metadata/OCI8TableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/oracle/metadata/OCI8TableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,266 @@
+<?php
+/*
+ *  $Id: OCI8TableInfo.php,v 1.12 2004/11/03 21:49:56 comprock Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * Oracle (OCI8) implementation of TableInfo.
+ * 
+ * @author    David Giffin <david at giffin.org>
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.12 $
+ * @package   creole.drivers.oracle.metadata
+ */
+class OCI8TableInfo extends TableInfo {
+    
+    private $schema;
+        
+    public function __construct(OCI8DatabaseInfo $database, $name)
+    {
+        $this->schema = strtoupper( $database->getSchema() );
+        parent::__construct($database, $name);
+		$this->name = strtoupper( $this->name );
+    }
+    
+    /** Loads the columns for this table. */
+    protected function initColumns() 
+    {
+        
+        include_once 'creole/metadata/ColumnInfo.php';
+        include_once 'creole/drivers/oracle/OCI8Types.php';
+        
+
+        // To get all of the attributes we need, we'll actually do 
+        // two separate queries.  The first gets names and default values
+        // the second will fill in some more details.
+        
+        $sql = "
+			SELECT column_name
+				, data_type
+				, data_precision
+				, data_length
+				, data_default
+				, nullable 
+				, data_scale
+            FROM  all_tab_columns
+            WHERE table_name = '{$this->name}'
+                AND OWNER = '{$this->schema}'";
+
+        $statement = @oci_parse($this->dblink,$sql);
+        $success = @oci_execute($statement,OCI_DEFAULT);
+		if (!$success) {
+            throw new SQLException("Could Not Get Columns");
+        }
+
+        while ( $statement && $row = oci_fetch_array( $statement
+			, OCI_ASSOC + OCI_RETURN_NULLS ) ) {
+            $row = array_change_key_case($row, CASE_LOWER);
+            $this->columns[$row['column_name']] = new ColumnInfo( $this
+				, $row['column_name']
+				, OCI8Types::getType($row['data_type'])
+				, $row['data_type']
+				, $row['data_length']
+				, $row['data_scale']
+				, $row['nullable']
+				, $row['data_default']
+			);
+        }
+                
+        $this->colsLoaded = true;
+    }
+    
+    /** Loads the primary key information for this table. */
+    protected function initPrimaryKey()
+    {
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+        
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+        
+
+        // Primary Keys Query
+        $sql = "SELECT a.owner, a.table_name,
+                            a.constraint_name, a.column_name
+                        FROM all_cons_columns a, all_constraints b
+                        WHERE b.constraint_type = 'P'
+                        AND a.constraint_name = b.constraint_name
+                        AND b.table_name = '{$this->name}'
+            AND b.owner = '{$this->schema}'
+            ";
+
+
+        $statement = @oci_parse($this->dblink,$sql);
+        $success = @oci_execute($statement,OCI_DEFAULT);
+        if (!$success) {
+            throw new SQLException("Could Not Get Primary Keys");
+        }
+
+        while ( $statement && $row = oci_fetch_assoc( $statement )) {
+            $row = array_change_key_case($row,CASE_LOWER);
+
+            $name = $row['column_name'];
+
+            if (!isset($this->primaryKey)) {
+                $this->primaryKey = new PrimaryKeyInfo($name);
+            }
+
+            $this->primaryKey->addColumn($this->columns[$name]);
+        }
+        
+        $this->pkLoaded = true;
+    }
+    
+    /** Loads the indexes for this table. */
+    protected function initIndexes() {
+    
+        include_once 'creole/metadata/IndexInfo.php';    
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();        
+
+        // Indexes
+        $sql = "SELECT
+            index_name,
+            table_name,
+            index_type,
+            uniqueness
+            FROM all_indexes
+            WHERE table_owner = '{$this->schema}'
+            AND table_name = '{$this->name}'
+            AND index_name NOT IN (SELECT
+                    constraint_name
+                    FROM all_constraints
+                    WHERE constraint_type = 'P')";
+
+        $statement = @oci_parse($this->dblink,$sql);
+        $success = @oci_execute($statement,OCI_DEFAULT);
+        if (!$success) {
+            throw new SQLException("Could Not Get Primary Keys");
+        }
+
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+
+        while ( $statement && $row = oci_fetch_assoc( $statement )) {
+            $row = array_change_key_case($row,CASE_LOWER);
+
+            $name = $row['index_name'];            
+
+            if (!isset($this->indexes[$name])) {
+                $this->indexes[$name] = new IndexInfo($name);
+            }
+
+            $this->indexes[$name]->addColumn($this->columns[ $name ]);
+        }
+        
+                
+        $this->indexesLoaded = true;
+    }
+    
+    /** Load foreign keys */
+    protected function initForeignKeys() {
+        
+        include_once 'creole/metadata/ForeignKeyInfo.php';    
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();        
+        
+        // Foreign keys
+		// TODO resolve cross schema references
+		// use all_cons... to do so, however, very slow queries then
+		// optimizations are very ugly
+        $sql					= "
+			SELECT a.owner AS local_owner
+				, a.table_name AS local_table
+				, c.column_name AS local_column
+				, a.constraint_name AS foreign_key_name
+				, b.owner AS foreign_owner
+				, b.table_name AS foreign_table
+				, d.column_name AS foreign_column
+				, b.constraint_name AS foreign_constraint_name
+				, a.delete_rule AS on_delete
+            FROM user_constraints a
+				, user_constraints b
+				, user_cons_columns c
+				, user_cons_columns d
+            WHERE a.r_constraint_name = b.constraint_name
+                AND c.constraint_name = a.constraint_name
+                AND d.constraint_name = b.constraint_name
+                AND a.r_owner = b.owner
+                AND a.constraint_type='R'
+				AND a.table_name = '{$this->name}'
+				AND a.owner = '{$this->schema}'
+		";
+
+        $statement = @oci_parse($this->dblink,$sql);
+        $success = @oci_execute($statement,OCI_DEFAULT);
+        if (!$success) {
+            throw new SQLException("Could Not Get Primary Keys");
+        }
+
+        // Loop through the returned results, grouping the same key_name
+		// together adding each column for that key.
+
+        while ( $statement && $row = oci_fetch_assoc( $statement )) {
+            $row = array_change_key_case($row,CASE_LOWER);
+
+            $name = $row['foreign_key_name'];            
+
+            $foreignTable = $this->database->getTable($row['foreign_table']);
+            $foreignColumn = $foreignTable->getColumn($row['foreign_column']);
+
+            $localTable   = $this->database->getTable($row['local_table']);    
+            $localColumn   = $localTable->getColumn($row['local_column']);
+
+            if (!isset($this->foreignKeys[$name])) {
+                $this->foreignKeys[$name] = new ForeignKeyInfo($name);
+            }
+
+			switch ( $row[ 'on_delete' ] )
+			{
+				case 'CASCADE':
+					$onDelete	= ForeignKeyInfo::CASCADE;
+					break;
+
+				case 'SET NULL':
+					$onDelete	= ForeignKeyInfo::SETNULL;
+					break;
+
+				default:
+				case 'NO ACTION':
+					$onDelete	= ForeignKeyInfo::NONE;
+					break;
+			}
+
+			// addReference( local, foreign, onDelete, onUpdate )
+			// Oracle doesn't support 'on update'
+            $this->foreignKeys[ $name ]->addReference(
+				$localColumn
+				, $foreignColumn
+				, $onDelete
+			);
+        }
+        
+        $this->fksLoaded = true;
+    }
+    
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLConnection.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,260 @@
+<?php
+/*
+ *  $Id: PgSQLConnection.php,v 1.21 2005/08/03 17:56:22 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+include_once 'creole/drivers/pgsql/PgSQLResultSet.php';
+
+/**
+ * PgSQL implementation of Connection.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org> (Creole)
+ * @author    Stig Bakken <ssb at fast.no> (PEAR::DB)
+ * @author    Lukas Smith (PEAR::MDB)
+ * @version   $Revision: 1.21 $
+ * @package   creole.drivers.pgsql
+ */ 
+class PgSQLConnection extends ConnectionCommon implements Connection {        
+                
+    /** 
+     * Affected Rows of last executed query.
+     * Postgres needs this for getUpdateCount()
+     * We used to store the entire result set
+     * instead but that can be a large dataset.
+     * @var int
+     */
+    private $result_affected_rows;
+    
+    /**
+     * Connect to a database and log in as the specified user.
+     *
+     * @param array $dsn The datasource hash.
+     * @param $flags Any connection flags.
+     * @access public
+     * @throws SQLException
+     * @return void
+     */
+    function connect($dsninfo, $flags = 0)
+    {    
+        global $php_errormsg;
+                
+        if (!extension_loaded('pgsql')) {
+            throw new SQLException('pgsql extension not loaded');
+        }
+
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+        
+        $persistent = ($flags & Creole::PERSISTENT === Creole::PERSISTENT);
+                
+        $protocol = (isset($dsninfo['protocol'])) ? $dsninfo['protocol'] : 'tcp';
+        $connstr = '';
+
+        if ($protocol == 'tcp') {
+            if (!empty($dsninfo['hostspec'])) {
+                $connstr = 'host=' . $dsninfo['hostspec'];
+            }
+            if (!empty($dsninfo['port'])) {
+                $connstr .= ' port=' . $dsninfo['port'];
+            }
+        }
+
+        if (isset($dsninfo['database'])) {
+            $connstr .= ' dbname=\'' . addslashes($dsninfo['database']) . '\'';
+        }
+        if (!empty($dsninfo['username'])) {
+            $connstr .= ' user=\'' . addslashes($dsninfo['username']) . '\'';
+        }
+        if (!empty($dsninfo['password'])) {
+            $connstr .= ' password=\'' . addslashes($dsninfo['password']) . '\'';
+        }
+        if (!empty($dsninfo['options'])) {
+            $connstr .= ' options=' . $dsninfo['options'];
+        }
+        if (!empty($dsninfo['tty'])) {
+            $connstr .= ' tty=' . $dsninfo['tty'];
+        }
+        
+        if ($persistent) {
+            $conn = @pg_pconnect($connstr);
+        } else {
+            $conn = @pg_connect($connstr);
+        }
+        
+        if (!$conn) {
+			// hide the password from connstr
+			$cleanconnstr = preg_replace('/password=\'.*?\'($|\s)/', 'password=\'*********\'', $connstr);
+            throw new SQLException('Could not connect', $php_errormsg, $cleanconnstr);
+        }
+        
+        $this->dblink = $conn;        
+    }
+    
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ( $limit > 0 ) {
+            $sql .= " LIMIT ".$limit;
+        }
+        if ( $offset > 0 ) {
+            $sql .= " OFFSET ".$offset;
+        }
+    }
+    
+    /**
+     * @see Connection::disconnect()
+     */
+    function close()
+    {
+        $ret = @pg_close($this->dblink);
+	$this->result_affected_rows = null;
+        $this->dblink = null;
+        return $ret;
+    }
+    
+    /**
+     * @see Connection::simpleQuery()
+     */
+    function executeQuery($sql, $fetchmode = null)
+    {
+        $result = @pg_query($this->dblink, $sql);
+        if (!$result) {
+            throw new SQLException('Could not execute query', pg_last_error($this->dblink), $sql);
+        }
+	$this->result_affected_rows = @pg_affected_rows($result);
+
+        return new PgSQLResultSet($this, $result, $fetchmode);
+    }        
+
+    /**
+     * @see Connection::simpleUpdate()
+     */
+    function executeUpdate($sql)
+    {            
+        $result = @pg_query($this->dblink, $sql);
+        if (!$result) {
+            throw new SQLException('Could not execute update', pg_last_error($this->dblink), $sql);
+        }
+	$this->result_affected_rows = (int) @pg_affected_rows($result);
+
+	return $this->result_affected_rows;
+    }
+
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        $result = @pg_query($this->dblink, "begin");
+        if (!$result) {
+            throw new SQLException('Could not begin transaction', pg_last_error($this->dblink));
+        }
+    }
+        
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        $result = @pg_query($this->dblink, "end");
+        if (!$result) {
+            throw new SQLException('Could not commit transaction', pg_last_error($this->dblink));
+        }
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        $result = @pg_query($this->dblink, "abort");
+        if (!$result) {
+            throw new SQLException('Could not rollback transaction', pg_last_error($this->dblink));
+        }
+    }
+
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     * @see Statement::getUpdateCount()
+     * @return int Number of rows affected by the last query.
+     */
+    function getUpdateCount()
+    {
+	if ( $this->result_affected_rows === null ) {
+		throw new SQLException('getUpdateCount called before any sql queries were executed');
+	}
+	return $this->result_affected_rows;
+    }    
+
+    
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/pgsql/metadata/PgSQLDatabaseInfo.php';
+        return new PgSQLDatabaseInfo($this);
+    }
+    
+    /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/pgsql/PgSQLIdGenerator.php';
+        return new PgSQLIdGenerator($this);
+    }
+    
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql) 
+    {
+        require_once 'creole/drivers/pgsql/PgSQLPreparedStatement.php';
+        return new PgSQLPreparedStatement($this, $sql);
+    }
+    
+    /**
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall($sql) {
+        throw new SQLException('PostgreSQL does not support stored procedures.');
+    }
+    
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/pgsql/PgSQLStatement.php';
+        return new PgSQLStatement($this);
+    }
+    
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,84 @@
+<?php
+/*
+ *  $Id: PgSQLIdGenerator.php,v 1.5 2004/03/19 14:19:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/IdGenerator.php';
+
+/**
+ * PostgreSQL IdGenerator implemenation.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.drivers.pgsql
+ */
+class PgSQLIdGenerator implements IdGenerator {
+    
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+    
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return true;
+    }    
+    
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return false;
+    }
+        
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::SEQUENCE;
+    }
+    
+    /**
+     * @see IdGenerator::getId()
+     */
+    public function getId($name = null)
+    {
+        if ($name === null) {
+            throw new SQLException("You must specify the sequence name when calling getId() method.");
+        }
+        $rs = $this->conn->executeQuery("select nextval('" . $name . "')", ResultSet::FETCHMODE_NUM);
+        $rs->next();
+        return $rs->getInt(1);
+    }
+    
+}
+

Added: trunk/vendor/creole/drivers/pgsql/PgSQLPreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLPreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLPreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,157 @@
+<?php
+/*
+ *  $Id: PgSQLPreparedStatement.php,v 1.14 2005/04/16 18:55:28 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * PgSQL subclass for prepared statements.
+ * 
+ * @author Hans Lellelid <hans at xmpl.org>
+ * @version $Revision: 1.14 $
+ * @package creole.drivers.pgsql
+ */
+class PgSQLPreparedStatement extends PreparedStatementCommon implements PreparedStatement {
+    
+    /**
+     * Quotes string using native pgsql function (pg_escape_string).
+     * @param string $str
+     * @return string
+     */
+    protected function escape($str)
+    {
+        return pg_escape_string($str);
+    }
+    
+    /**
+     * Recursive function to turn multi-dim array into str representation.
+     * @param array $arr
+     * @return string Array in pgsql-friendly string notation: {val1, val2} or {{sub1,sub2}, {sub3, sub4}}
+     */
+    private function arrayToStr($arr)
+    {
+        $parts = array();
+        foreach((array)$arr as $el) {
+            if (is_array($el)) {
+                $parts[] = $this->arrayToStr($el);
+            } else {
+                if (is_string($el)) {
+                    $parts[] = '"' . pg_escape_string($el) . '"';
+                } else {
+                    $parts[] = $el;
+                }                
+            }
+        }        
+        return '{' . implode(',', $parts) . '}';
+    }
+    
+    /**
+     * Sets an array.
+     * Unless a driver-specific method is used, this means simply serializing
+     * the passed parameter and storing it as a string.
+     * @param int $paramIndex
+     * @param array $value
+     * @return void
+     * @see PreparedStatement::setArray()
+     */
+    function setArray($paramIndex, $value) 
+    {
+        if( $paramIndex > $this->positionsCount || $paramIndex < 1) {
+            throw new SQLException('Cannot bind to invalid param index: '.$paramIndex);
+        }
+        if ($value === null)
+            $this->setNull($paramIndex);
+        else
+            $this->boundInVars[$paramIndex] = "'" . $this->arrayToStr($value) . "'";        
+    }
+
+    /**
+     * For setting value of Postgres BOOLEAN column.
+     * @param int $paramIndex
+     * @param boolean $value
+     * @return void
+     */
+    function setBoolean($paramIndex, $value) 
+    {
+        if( $paramIndex > $this->positionsCount || $paramIndex < 1) {
+            throw new SQLException('Cannot bind to invalid param index: '.$paramIndex);
+        }        
+        if ($value === null)
+            $this->setNull($paramIndex);
+        else
+            $this->boundInVars[$paramIndex] = ($value ? "'t'" : "'f'");
+    }
+
+    /**
+     * Applies sqlite_udf_encode_binary() to ensure that binary contents will be handled correctly by sqlite.
+     * @param int $paramIndex
+     * @param mixed $blob Blob object or string containing data.
+     * @return void
+     */
+    function setBlob($paramIndex, $blob) 
+    {    
+        if ($blob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // they took magic __toString() out of PHP5.0.0; this sucks
+            if (is_object($blob)) {
+                $blob = $blob->__toString();
+            }            
+            $this->boundInVars[$paramIndex] = "'" . pg_escape_bytea( $blob ) . "'";
+        }    
+        
+    }
+	
+	/**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setTime($paramIndex, $value) 
+    {        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+            if ( is_numeric ( $value ) ) {
+	    	$value = date ( "H:i:s O", $value );
+	    } elseif ( is_object ( $value ) ) {
+	    	$value = date ( "H:i:s O", $value->getTime ( ) );
+	    }
+            $this->boundInVars [ $paramIndex ] = "'" . $this->escape ( $value ) . "'";
+        }
+    }
+    
+    /**
+     * @param int $paramIndex
+     * @param string $value
+     * @return void
+     */
+    function setTimestamp($paramIndex, $value) 
+    {        
+        if ($value === null) {
+            $this->setNull($paramIndex);
+        } else {
+       	    if (is_numeric($value)) $value = date('Y-m-d H:i:s O', $value);
+       	    elseif (is_object($value)) $value = date("Y-m-d H:i:s O", $value->getTime());
+            $this->boundInVars[$paramIndex] = "'".$this->escape($value)."'";
+        }
+    }
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,200 @@
+<?php
+/*
+ *  $Id: PgSQLResultSet.php,v 1.27 2005/01/07 19:04:46 micha Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * PostgreSQL implementation of ResultSet.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.27 $
+ * @package   creole.drivers.pgsql
+ */
+class PgSQLResultSet extends ResultSetCommon implements ResultSet {
+
+
+    /**
+     * Gets optimized PgSQLResultSetIterator.
+     * @return PgSQLResultSetIterator
+     */
+    public function getIterator()
+    {   
+        require_once 'creole/drivers/pgsql/PgSQLResultSetIterator.php';
+        return new PgSQLResultSetIterator($this);
+    }
+
+    /**
+     * Postgres doesn't actually move the db pointer.  The specific row
+     * is fetched by call to pg_fetch_array() rather than by a seek and
+     * then an unspecified pg_fetch_array() call.
+     * 
+     * The only side-effect of this situation is that we don't really know 
+     * if the seek will fail or succeed until we have called next().  This
+     * behavior is acceptible - and explicitly documented in 
+     * ResultSet::seek() phpdoc.
+     * 
+     * @see ResultSet::seek()
+     */ 
+    public function seek($rownum)
+    {
+        if ($rownum < 0) {
+            return false;
+        }
+        
+        // PostgreSQL rows start w/ 0, but this works, because we are
+        // looking to move the position _before_ the next desired position
+        $this->cursorPos = $rownum;
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::next()
+     */ 
+    public function next()
+    {
+        // must suppress errors here because we are jumping to rownum that may not exist w/ fetch_array command
+        $this->fields = @pg_fetch_array($this->result, $this->cursorPos, $this->fetchmode);
+
+           if (!$this->fields) {
+            $err = @pg_result_error($this->result);
+            if (!$err) {
+                // We've advanced beyond end of recordset.
+                $this->afterLast();
+                return false;
+            } else {
+                throw new SQLException("Error fetching result", $err);                
+            }
+        }
+        
+        // Advance cursor position
+        $this->cursorPos++;    
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    public function getRecordCount()
+    {
+        $rows = @pg_num_rows($this->result);
+        if ($rows === null) {
+            throw new SQLException("Error fetching num rows", pg_result_error($this->result));
+        }
+        return (int) $rows;
+    }    
+
+    /**
+     * @see ResultSet::close()
+     */
+    public function close()
+    {
+        $this->fields = array();
+        @pg_free_result($this->result);
+    }
+        
+    /**
+     * Convert Postgres string representation of array into native PHP array.
+     * @param string $str Postgres string array rep: {1223, 2343} or {{"welcome", "home"}, {"test2", ""}}
+     * @return array
+     */
+    private function strToArray($str)
+    {
+        $str = substr($str, 1, -1); // remove { }
+        $res = array();
+        
+        $subarr = array();
+        $in_subarr = 0;
+        
+        $toks = explode(',', $str);
+        foreach($toks as $tok) {                    
+            if ($in_subarr > 0) { // already in sub-array?
+                $subarr[$in_subarr][] = $tok;
+                if ('}' === substr($tok, -1, 1)) { // check to see if we just added last component                    
+                    $res[] = $this->strToArray(implode(',', $subarr[$in_subarr]));
+                    $in_subarr--;
+                }
+            } elseif ($tok{0} === '{') { // we're inside a new sub-array                               
+                if ('}' !== substr($tok, -1, 1)) {
+                    $in_subarr++;
+                    // if sub-array has more than one element
+                    $subarr[$in_subarr] = array();
+                    $subarr[$in_subarr][] = $tok;                    
+                } else {
+                    $res[] = $this->strToArray($tok);
+                }
+            } else { // not sub-array
+                $val = trim($tok, '"'); // remove " (surrounding strings)
+                // perform type castng here?
+                $res[] = $val;
+            }
+        }
+        
+        return $res;
+    }
+
+    /**
+     * Reads a column as an array.
+     * The value of the column is unserialized & returned as an array.
+     * @param mixed $column Column name (string) or index (int) starting with 1.
+     * @return array
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getArray($column) 
+    {
+        if (is_int($column)) { $column--; } // because Java convention is to start at 1 
+        if (!array_key_exists($column, $this->fields)) { throw new SQLException("Invalid resultset column: " . (is_int($column) ? $column + 1 : $column)); }
+        if ($this->fields[$column] === null) { return null; }
+        return $this->strToArray($this->fields[$column]);
+    } 
+    
+    /**
+     * Returns Blob with contents of column value.
+     * 
+     * @param mixed $column Column name (string) or index (int) starting with 1 (if ResultSet::FETCHMODE_NUM was used).
+     * @return Blob New Blob with data from column.
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getBlob($column) 
+    {
+        if (is_int($column)) { $column--; } // because Java convention is to start at 1 
+        if (!array_key_exists($column, $this->fields)) { throw new SQLException("Invalid resultset column: " . (is_int($column) ? $column + 1 : $column)); }
+        if ($this->fields[$column] === null) { return null; }
+        require_once 'creole/util/Blob.php';
+        $b = new Blob();
+        $b->setContents(pg_unescape_bytea($this->fields[$column]));
+        return $b;
+    }     
+
+    /**
+     * @param mixed $column Column name (string) or index (int) starting with 1.
+     * @return boolean
+     * @throws SQLException - If the column specified is not a valid key in current field array.
+     */
+    public function getBoolean($column) 
+    {
+        if (is_int($column)) { $column--; } // because Java convention is to start at 1 
+        if (!array_key_exists($column, $this->fields)) { throw new SQLException("Invalid resultset column: " . (is_int($column) ? $column + 1 : $column)); }
+        if ($this->fields[$column] === null) { return null; }
+        return ($this->fields[$column] === 't');
+    }
+            
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLResultSetIterator.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLResultSetIterator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLResultSetIterator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,101 @@
+<?php
+/*
+ *  $Id: PgSQLResultSetIterator.php,v 1.1 2004/12/04 05:58:53 gamr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Optimized iterator for PostgreSQL, based off of SQLite iterator.
+ * Testing with SeekableIterator, no idea if it will keep this
+ * functionality or what uses it or even how to use it as yet.
+ * 
+ * @author    Cameron Brunner <webmaster at animetorrents.com>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.pgsql
+ */
+class PgSQLResultSetIterator implements SeekableIterator {
+
+    private $result;
+    private $pos = 0;
+    private $fetchmode;
+    private $row;
+    private $row_count;
+    
+    /**
+     * Construct the iterator.
+     * @param PgSQLResultSet $rs
+     */
+    public function __construct(PgSQLResultSet $rs)
+    {
+        $this->result = $rs->getResource();
+        $this->fetchmode = $rs->getFetchmode();
+	$this->row_count = $rs->getRecordCount();
+    }
+    
+    /**
+     * This method actually has no effect, since we do not rewind ResultSet for iteration.
+     */
+    function rewind()
+    {        
+        $this->pos = 0;
+    }
+    
+    function valid()
+    {
+	return ( $this->pos < $this->row_count );
+    }
+    
+    /**
+     * Returns the cursor position.  Note that this will not necessarily
+     * be 1 for the first row, since no rewind is performed at beginning
+     * of iteration.
+     * @return int
+     */
+    function key()
+    {
+        return $this->pos;
+    }
+    
+    /**
+     * Returns the row (assoc array) at current cursor pos.
+     * @return array
+     */
+    function current()
+    {
+       return pg_fetch_array($this->result, $this->pos, $this->fetchmode);
+    }
+    
+    /**
+     * Advances internal cursor pos.
+     */
+    function next()
+    {
+        $this->pos++;
+    }
+
+    /**
+     * Sets cursor to specific value.
+     */
+    function seek ( $index )
+    {
+	if ( $index < 0 || $index > $this->row_count ) {
+		throw new Exception('Seeking to an unavailable index.');
+	}
+	$this->pos = $index;
+    }
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLStatement.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,34 @@
+<?php
+/*
+ *  $Id: PgSQLStatement.php,v 1.1 2004/02/19 02:49:42 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * PostgreSQL Statement implementation.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.pgsql
+ */ 
+class PgSQLStatement extends StatementCommon implements Statement {
+    
+}

Added: trunk/vendor/creole/drivers/pgsql/PgSQLTypes.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/PgSQLTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/PgSQLTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,101 @@
+<?php
+
+/*
+ *  $Id: PgSQLTypes.php,v 1.8 2004/04/09 19:16:05 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * PostgreSQL types / type map.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.drivers.pgsql
+ */
+class PgSQLTypes extends CreoleTypes {
+
+    /** Map PostgreSQL native types to Creole (JDBC) types. */
+    private static $typeMap = array (
+                "int2" => CreoleTypes::SMALLINT,
+                "int4" => CreoleTypes::INTEGER, 
+                "oid" => CreoleTypes::INTEGER,
+                "int8" => CreoleTypes::BIGINT,
+                "cash"  => CreoleTypes::DOUBLE,
+                "money"  => CreoleTypes::DOUBLE,
+                "numeric" => CreoleTypes::NUMERIC,
+                "float4" => CreoleTypes::REAL,
+                "float8" => CreoleTypes::DOUBLE,
+                "bpchar" => CreoleTypes::CHAR, 
+                "char" => CreoleTypes::CHAR, 
+                "char2" => CreoleTypes::CHAR, 
+                "char4" => CreoleTypes::CHAR, 
+                "char8" => CreoleTypes::CHAR, 
+                "char16" => CreoleTypes::CHAR,
+                "varchar" => CreoleTypes::VARCHAR, 
+                "text" => CreoleTypes::VARCHAR, 
+                "name" => CreoleTypes::VARCHAR, 
+                "filename" => CreoleTypes::VARCHAR,
+                "bytea" => CreoleTypes::BINARY,
+                "bool" => CreoleTypes::BOOLEAN,
+                "date" => CreoleTypes::DATE,
+                "time" => CreoleTypes::TIME,
+                "abstime" => CreoleTypes::TIMESTAMP, 
+                "timestamp" => CreoleTypes::TIMESTAMP, 
+                "timestamptz" => CreoleTypes::TIMESTAMP,
+                "_bool" => CreoleTypes::ARR,     
+                "_char" => CreoleTypes::ARR, 
+                "_int2" => CreoleTypes::ARR, 
+                "_int4" => CreoleTypes::ARR, 
+                "_text" => CreoleTypes::ARR,
+                "_oid" => CreoleTypes::ARR, 
+                "_varchar" => CreoleTypes::ARR, 
+                "_int8" => CreoleTypes::ARR, 
+                "_float4" => CreoleTypes::ARR, 
+                "_float8" => CreoleTypes::ARR,
+                "_abstime" => CreoleTypes::ARR, 
+                "_date" => CreoleTypes::ARR, 
+                "_time" => CreoleTypes::ARR, 
+                "_timestamp" => CreoleTypes::ARR, 
+                "_numeric" => CreoleTypes::ARR,
+                "_bytea" => CreoleTypes::ARR,
+            );
+                
+    /** Reverse lookup map, created on demand. */
+    private static $reverseMap = null;
+    
+    public static function getType($pgsqlType)
+    {
+        $t = strtolower($pgsqlType);
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::OTHER;
+        }
+    }
+    
+    public static function getNativeType($creoleType)
+    {
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+    
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/pgsql/metadata/PgSQLDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/metadata/PgSQLDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/metadata/PgSQLDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,88 @@
+<?php
+/*
+ *  $Id: PgSQLDatabaseInfo.php,v 1.9 2005/03/30 11:45:26 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * MySQL implementation of DatabaseInfo.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.9 $
+ * @package   creole.drivers.pgsql.metadata
+ */
+class PgSQLDatabaseInfo extends DatabaseInfo {
+
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/pgsql/metadata/PgSQLTableInfo.php';
+        
+        // Get Database Version
+        $result = pg_exec ($this->dblink, "SELECT version() as ver");
+        
+        if (!$result)
+        {
+        	throw new SQLException ("Failed to select database version");
+        } // if (!$result)
+        $row = pg_fetch_assoc ($result, 0);
+        $arrVersion = sscanf ($row['ver'], '%*s %d.%d');
+        $version = sprintf ("%d.%d", $arrVersion[0], $arrVersion[1]);
+        // Clean up
+        $arrVersion = null;
+        $row = null;
+        pg_free_result ($result);
+        $result = null;
+
+        $result = pg_exec($this->dblink, "SELECT oid, relname FROM pg_class
+										WHERE relkind = 'r' AND relnamespace = (SELECT oid
+										FROM pg_namespace
+										WHERE
+										     nspname NOT IN ('information_schema','pg_catalog')
+										     AND nspname NOT LIKE 'pg_temp%'
+										     AND nspname NOT LIKE 'pg_toast%'
+										LIMIT 1)
+										ORDER BY relname");
+
+        if (!$result) {
+            throw new SQLException("Could not list tables", pg_last_error($this->dblink));
+        }
+
+        while ($row = pg_fetch_assoc($result)) {
+            $this->tables[strtoupper($row['relname'])] = new PgSQLTableInfo($this, $row['relname'], $version, $row['oid']);
+        }
+    }
+
+    /**
+     * PgSQL sequences.
+     *
+     * @return void
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        throw new SQLException("Sequences are currently unsupported.");
+    }
+
+}
+

Added: trunk/vendor/creole/drivers/pgsql/metadata/PgSQLTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/pgsql/metadata/PgSQLTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/pgsql/metadata/PgSQLTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,416 @@
+<?php
+/*
+ *  $Id: PgSQLTableInfo.php,v 1.30 2005/04/21 14:48:44 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * PgSQL implementation of TableInfo.
+ *
+ * See this Python code by David M. Cook for some good reference on Pgsql metadata
+ * functions:
+ * @link http://www.sandpyt.org/pipermail/sandpyt/2003-March/000008.html
+ *
+ * Here's some more information from postgresql:
+ * @link http://developer.postgresql.org/docs/pgsql/src/backend/catalog/information_schema.sql
+ *
+ * @todo -c Eventually move to supporting only Postgres >= 7.4, which has the information_schema
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.30 $
+ * @package   creole.drivers.pgsql.metadata
+ */
+class PgSQLTableInfo extends TableInfo {
+	
+    /**
+     * Database Version.
+     * @var String
+     */
+    private $version;
+	
+    /**
+     * Table OID
+     * @var Integer
+     */
+    private $oid;
+
+    /**
+     * @param string $table The table name.
+     * @param string $database The database name.
+     * @param resource $dblink The db connection resource.
+     */
+    function __construct(DatabaseInfo $database, $name, $version, $intOID) {
+        parent::__construct ($database, $name);
+        $this->version = $version;
+        $this->oid = $intOID;
+    } // function __construct(DatabaseInfo $database, $name) {
+
+    /** Load the columns for this table */
+    protected function initColumns () {
+    	// Include dependencies
+    	include_once ('creole/metadata/ColumnInfo.php');
+    	include_once ('creole/drivers/pgsql/PgSQLTypes.php');
+
+    	// Get the columns, types, etc.
+    	// Based on code from pgAdmin3 (http://www.pgadmin.org/)
+    	$result = pg_query ($this->dblink, sprintf ("SELECT 
+    								att.attname,
+    								att.atttypmod,
+    								att.atthasdef,
+    								att.attnotnull,
+    								def.adsrc, 
+    								CASE WHEN att.attndims > 0 THEN 1 ELSE 0 END AS isarray, 
+    								CASE 
+    									WHEN ty.typname = 'bpchar' 
+    										THEN 'char' 
+    									WHEN ty.typname = '_bpchar' 
+	    									THEN '_char' 
+    									ELSE 
+	    									ty.typname 
+    								END AS typname,
+    								ty.typtype
+								FROM pg_attribute att
+									JOIN pg_type ty ON ty.oid=att.atttypid
+									LEFT OUTER JOIN pg_attrdef def ON adrelid=att.attrelid AND adnum=att.attnum
+								WHERE att.attrelid = %d AND att.attnum > 0
+									AND att.attisdropped IS FALSE
+								ORDER BY att.attnum", $this->oid));
+
+        if (!$result) {
+            throw new SQLException("Could not list fields for table: " . $this->name, pg_last_error($this->dblink));
+        }
+        while($row = pg_fetch_assoc($result)) {
+        	// Check to ensure that this column isn't an array data type
+        	if (((int) $row['isarray']) === 1)
+        	{
+        		throw new SQLException (sprintf ("Array datatypes are not currently supported [%s.%s]", $this->name, $row['attname']));
+        	} // if (((int) $row['isarray']) === 1)
+            $name = $row['attname'];
+            // If they type is a domain, Process it
+            if (strtolower ($row['typtype']) == 'd')
+            {
+            	$arrDomain = $this->processDomain ($row['typname']);
+            	$type = $arrDomain['type'];
+            	$size = $arrDomain['length'];
+            	$scale = $arrDomain['precision'];
+            	$boolHasDefault = (strlen (trim ($row['atthasdef'])) > 0) ? $row['atthasdef'] : $arrDomain['hasdefault'];
+            	$default = (strlen (trim ($row['adsrc'])) > 0) ? $row['adsrc'] : $arrDomain['default'];
+            	$is_nullable = (strlen (trim ($row['attnotnull'])) > 0) ? $row['attnotnull'] : $arrDomain['notnull'];
+            	$is_nullable = (($is_nullable == 't') ? false : true);
+            } // if (strtolower ($row['typtype']) == 'd')
+            else
+            {
+	            $type = $row['typname'];
+	            $arrLengthPrecision = $this->processLengthPrecision ($row['atttypmod'], $type);
+	            $size = $arrLengthPrecision['length'];
+	            $scale = $arrLengthPrecision['precision'];
+	            $boolHasDefault = $row['atthasdef'];
+	            $default = $row['adsrc'];
+	            $is_nullable = (($row['attnotnull'] == 't') ? false : true);
+            } // else (strtolower ($row['typtype']) == 'd')
+
+            $autoincrement = null;
+                       
+            // if column has a default
+            if (($boolHasDefault == 't') && (strlen (trim ($default)) > 0))
+            {
+	            if (!preg_match('/^nextval\(/', $default))
+	            {
+	            	$strDefault= preg_replace ('/::[\W\D]*/', '', $default);
+	            	$default = str_replace ("'", '', $strDefault);
+	            } // if (!preg_match('/^nextval\(/', $row['atthasdef']))
+	            else
+	            {
+	            	$autoincrement = true;
+	            	$default = null;
+	            } // else
+            } // if (($boolHasDefault == 't') && (strlen (trim ($default)) > 0))
+            else
+            {
+            	$default = null;
+            } // else (($boolHasDefault == 't') && (strlen (trim ($default)) > 0))
+
+            $this->columns[$name] = new ColumnInfo($this, $name, PgSQLTypes::getType($type), $type, $size, $scale, $is_nullable, $default, $autoincrement);
+        }
+
+        $this->colsLoaded = true;
+    } // protected function initColumns ()
+
+    private function processLengthPrecision ($intTypmod, $strName)
+    {
+    	// Define the return array
+    	$arrRetVal = array ('length'=>null, 'precision'=>null);
+
+    	// Some datatypes don't have a Typmod
+    	if ($intTypmod == -1)
+    	{
+    		return $arrRetVal;
+    	} // if ($intTypmod == -1)
+
+    	// Numeric Datatype?
+    	if ($strName == PgSQLTypes::getNativeType (CreoleTypes::NUMERIC))
+    	{
+    		$intLen = ($intTypmod - 4) >> 16;
+    		$intPrec = ($intTypmod - 4) & 0xffff;
+    		$intLen = sprintf ("%ld", $intLen);
+    		if ($intPrec)
+    		{
+    			$intPrec = sprintf ("%ld", $intPrec);
+    		} // if ($intPrec)
+    		$arrRetVal['length'] = $intLen;
+    		$arrRetVal['precision'] = $intPrec;
+    	} // if ($strName == PgSQLTypes::getNativeType (CreoleTypes::NUMERIC))
+    	elseif ($strName == PgSQLTypes::getNativeType (CreoleTypes::TIME) || $strName == 'timetz'
+    		|| $strName == PgSQLTypes::getNativeType (CreoleTypes::TIMESTAMP) || $strName == 'timestamptz'
+    		|| $strName == 'interval' || $strName == 'bit')
+    	{
+    		$arrRetVal['length'] = sprintf ("%ld", $intTypmod);
+    	} // elseif (TIME, TIMESTAMP, INTERVAL, BIT)
+    	else
+    	{
+    		$arrRetVal['length'] = sprintf ("%ld", ($intTypmod - 4));
+    	} // else
+    	return $arrRetVal;
+    } // private function processLengthPrecision ($intTypmod, $strName)
+
+    private function processDomain ($strDomain)
+    {
+    	if (strlen (trim ($strDomain)) < 1)
+    	{
+    		throw new SQLException ("Invalid domain name [" . $strDomain . "]");
+    	} // if (strlen (trim ($strDomain)) < 1)
+    	$result = pg_query ($this->dblink, sprintf ("SELECT
+														d.typname as domname,
+														b.typname as basetype,
+														d.typlen,
+														d.typtypmod,
+														d.typnotnull,
+														d.typdefault
+													FROM pg_type d
+														INNER JOIN pg_type b ON b.oid = CASE WHEN d.typndims > 0 then d.typelem ELSE d.typbasetype END
+													WHERE
+														d.typtype = 'd'
+														AND d.typname = '%s'
+													ORDER BY d.typname", $strDomain));
+
+        if (!$result) {
+            throw new SQLException("Query for domain [" . $strDomain . "] failed.", pg_last_error($this->dblink));
+        }
+
+        $row = pg_fetch_assoc ($result);
+        if (!$row)
+        {
+        	throw new SQLException ("Domain [" . $strDomain . "] not found.");
+        } // if (!$row)
+        $arrDomain = array ();
+        $arrDomain['type'] = $row['basetype'];
+	    $arrLengthPrecision = $this->processLengthPrecision ($row['typtypmod'], $row['basetype']);
+	    $arrDomain['length'] = $arrLengthPrecision['length'];
+	    $arrDomain['precision'] = $arrLengthPrecision['precision'];
+	    $arrDomain['notnull'] = $row['typnotnull'];
+	    $arrDomain['default'] = $row['typdefault'];
+	    $arrDomain['hasdefault'] = (strlen (trim ($row['typdefault'])) > 0) ? 't' : 'f';
+
+	    pg_free_result ($result);
+	    return $arrDomain;
+    } // private function processDomain ($strDomain)
+
+    /** Load foreign keys for this table. */
+    protected function initForeignKeys()
+    {
+        include_once 'creole/metadata/ForeignKeyInfo.php';
+
+        $result = pg_query ($this->dblink, sprintf ("SELECT
+						      conname,
+						      confupdtype,
+						      confdeltype,
+						      cl.relname as fktab,
+						      a2.attname as fkcol,
+						      cr.relname as reftab,
+						      a1.attname as refcol
+						FROM pg_constraint ct
+						     JOIN pg_class cl ON cl.oid=conrelid
+						     JOIN pg_class cr ON cr.oid=confrelid
+						     LEFT JOIN pg_catalog.pg_attribute a1 ON a1.attrelid = ct.confrelid
+						     LEFT JOIN pg_catalog.pg_attribute a2 ON a2.attrelid = ct.conrelid
+						WHERE
+						     contype='f'
+						     AND conrelid = %d
+						     AND a2.attnum = ct.conkey[1]
+						     AND a1.attnum = ct.confkey[1]
+						ORDER BY conname", $this->oid));
+        if (!$result) {
+            throw new SQLException("Could not list foreign keys for table: " . $this->name, pg_last_error($this->dblink));
+        }
+
+        while($row = pg_fetch_assoc($result)) {
+            $name = $row['conname'];
+            $local_table = $row['fktab'];
+            $local_column = $row['fkcol'];
+            $foreign_table = $row['reftab'];
+            $foreign_column = $row['refcol'];
+
+            // On Update
+            switch ($row['confupdtype']) {
+              case 'c':
+                $onupdate = ForeignKeyInfo::CASCADE; break;
+              case 'd':
+                $onupdate = ForeignKeyInfo::SETDEFAULT; break;
+              case 'n':
+                $onupdate = ForeignKeyInfo::SETNULL; break;
+              case 'r':
+                $onupdate = ForeignKeyInfo::RESTRICT; break;
+              default:
+              case 'a':
+                //NOACTION is the postgresql default
+                $onupdate = ForeignKeyInfo::NONE; break;
+            }
+            // On Delete
+            switch ($row['confdeltype']) {
+              case 'c':
+                $ondelete = ForeignKeyInfo::CASCADE; break;
+              case 'd':
+                $ondelete = ForeignKeyInfo::SETDEFAULT; break;
+              case 'n':
+                $ondelete = ForeignKeyInfo::SETNULL; break;
+              case 'r':
+                $ondelete = ForeignKeyInfo::RESTRICT; break;
+              default:
+              case 'a':
+                //NOACTION is the postgresql default
+                $ondelete = ForeignKeyInfo::NONE; break;
+            }
+
+
+            $foreignTable = $this->database->getTable($foreign_table);
+            $foreignColumn = $foreignTable->getColumn($foreign_column);
+
+            $localTable   = $this->database->getTable($local_table);
+            $localColumn   = $localTable->getColumn($local_column);
+
+            if (!isset($this->foreignKeys[$name])) {
+                $this->foreignKeys[$name] = new ForeignKeyInfo($name);
+            }
+            $this->foreignKeys[$name]->addReference($localColumn, $foreignColumn, $ondelete, $onupdate);
+        }
+
+        $this->fksLoaded = true;
+    }
+
+    /** Load indexes for this table */
+    protected function initIndexes()
+    {
+        include_once 'creole/metadata/IndexInfo.php';
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+		$result = pg_query ($this->dblink, sprintf ("SELECT
+													      DISTINCT ON(cls.relname)
+													      cls.relname as idxname,
+													      indkey,
+													      indisunique
+													FROM pg_index idx
+													     JOIN pg_class cls ON cls.oid=indexrelid
+													WHERE indrelid = %d AND NOT indisprimary
+													ORDER BY cls.relname", $this->oid));
+
+
+        if (!$result) {
+            throw new SQLException("Could not list indexes keys for table: " . $this->name, pg_last_error($this->dblink));
+        }
+
+        while($row = pg_fetch_assoc($result)) {
+            $name = $row["idxname"];
+            $unique = ($row["indisunique"] == 't') ? true : false;
+            if (!isset($this->indexes[$name])) {
+                $this->indexes[$name] = new IndexInfo($name, $unique);
+            }
+            $arrColumns = explode (' ', $row['indkey']);
+            foreach ($arrColumns as $intColNum)
+            {
+	            $result2 = pg_query ($this->dblink, sprintf ("SELECT a.attname
+															FROM pg_catalog.pg_class c JOIN pg_catalog.pg_attribute a ON a.attrelid = c.oid
+															WHERE c.oid = '%s' AND a.attnum = %d AND NOT a.attisdropped
+															ORDER BY a.attnum", $this->oid, $intColNum));
+				if (!$result2)
+				{
+            		throw new SQLException("Could not list indexes keys for table: " . $this->name, pg_last_error($this->dblink));
+				}
+				$row2 = pg_fetch_assoc($result2);
+	            $this->indexes[$name]->addColumn($this->columns[ $row2['attname'] ]);
+			} // foreach ($arrColumns as $intColNum)
+        }
+
+        $this->indexesLoaded = true;
+    }
+
+    /** Loads the primary keys for this table. */
+    protected function initPrimaryKey() {
+
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();
+
+        // Primary Keys
+        
+        $result = pg_query($this->dblink, sprintf ("SELECT
+													      DISTINCT ON(cls.relname)
+													      cls.relname as idxname,
+													      indkey,
+													      indisunique
+													FROM pg_index idx
+													     JOIN pg_class cls ON cls.oid=indexrelid
+													WHERE indrelid = %s AND indisprimary
+													ORDER BY cls.relname", $this->oid));
+        if (!$result) {
+            throw new SQLException("Could not list primary keys for table: " . $this->name, pg_last_error($this->dblink));
+        }
+
+        // Loop through the returned results, grouping the same key_name together
+        // adding each column for that key.
+
+        while($row = pg_fetch_assoc($result)) {
+            $arrColumns = explode (' ', $row['indkey']);
+            foreach ($arrColumns as $intColNum)
+            {
+	            $result2 = pg_query ($this->dblink, sprintf ("SELECT a.attname
+															FROM pg_catalog.pg_class c JOIN pg_catalog.pg_attribute a ON a.attrelid = c.oid
+															WHERE c.oid = '%s' AND a.attnum = %d AND NOT a.attisdropped
+															ORDER BY a.attnum", $this->oid, $intColNum));
+				if (!$result2)
+				{
+            		throw new SQLException("Could not list indexes keys for table: " . $this->name, pg_last_error($this->dblink));
+				}
+				$row2 = pg_fetch_assoc($result2);
+				if (!isset($this->primaryKey)) {
+					$this->primaryKey = new PrimaryKeyInfo($row2['attname']);
+				}
+	            $this->primaryKey->addColumn($this->columns[ $row2['attname'] ]);
+			} // foreach ($arrColumns as $intColNum)
+        }
+        $this->pkLoaded = true;
+    }
+
+    
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/sqlite/SQLiteConnection.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteConnection.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteConnection.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,245 @@
+<?php
+/*
+ *  $Id: SQLiteConnection.php,v 1.14 2005/10/18 11:26:28 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Connection.php';
+require_once 'creole/common/ConnectionCommon.php';
+
+/**
+ * SQLite implementation of Connection.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @author    Stig Bakken <ssb at fast.no> 
+ * @author    Lukas Smith
+ * @version   $Revision: 1.14 $
+ * @package   creole.drivers.sqlite
+ */ 
+class SQLiteConnection extends ConnectionCommon implements Connection {   
+    
+    /**
+     * The case to use for SQLite results.
+     * (0=nochange, 1=upper, 2=lower) 
+     * This is set in each call to executeQuery() in order to ensure that different
+     * Connections do not overwrite each other's settings
+     */
+    private $sqliteAssocCase;
+    
+    /**
+     * @see Connection::connect()
+     */
+    function connect($dsninfo, $flags = 0)
+    {        
+        if (!extension_loaded('sqlite')) {
+            throw new SQLException('sqlite extension not loaded');
+        }
+
+        $file = $dsninfo['database'];
+        
+        $this->dsn = $dsninfo;
+        $this->flags = $flags;
+        
+        $persistent = ($flags & Creole::PERSISTENT === Creole::PERSISTENT);
+        
+        if (PHP_VERSION == '5.0.4' || PHP_VERSION == '5.0.5') {
+            $nochange = TRUE;
+        } else {
+            $nochange = (($flags & Creole::NO_ASSOC_LOWER) === Creole::NO_ASSOC_LOWER);
+        }
+        
+        if ($nochange) {     
+            $this->sqliteAssocCase = 0;
+        } else {
+            $this->sqliteAssocCase = 2;
+        }
+        
+        if ($file === null) {
+            throw new SQLException("No SQLite database specified.");
+        }
+        
+        $mode = (isset($dsninfo['mode']) && is_numeric($dsninfo['mode'])) ? $dsninfo['mode'] : 0644;
+        
+        if ($file != ':memory:') {
+            if (!file_exists($file)) {
+                touch($file);
+                chmod($file, $mode);
+                if (!file_exists($file)) {
+                    throw new SQLException("Unable to create SQLite database.");
+                }
+            }
+            if (!is_file($file)) {
+                throw new SQLException("Unable to open SQLite database: not a valid file.");
+            }
+            if (!is_readable($file)) {
+                throw new SQLException("Unable to read SQLite database.");
+            }
+        }
+
+        $connect_function = $persistent ? 'sqlite_popen' : 'sqlite_open';
+        if (!($conn = @$connect_function($file, $mode, $errmsg) )) {
+            throw new SQLException("Unable to connect to SQLite database", $errmsg);
+        }
+        
+        $this->dblink = $conn;
+    }   
+
+    /**
+     * @see Connection::getDatabaseInfo()
+     */
+    public function getDatabaseInfo()
+    {
+        require_once 'creole/drivers/sqlite/metadata/SQLiteDatabaseInfo.php';
+        return new SQLiteDatabaseInfo($this);
+    }
+    
+     /**
+     * @see Connection::getIdGenerator()
+     */
+    public function getIdGenerator()
+    {
+        require_once 'creole/drivers/sqlite/SQLiteIdGenerator.php';
+        return new SQLiteIdGenerator($this);
+    }
+    
+    /**
+     * @see Connection::prepareStatement()
+     */
+    public function prepareStatement($sql) 
+    {
+        require_once 'creole/drivers/sqlite/SQLitePreparedStatement.php';
+        return new SQLitePreparedStatement($this, $sql);
+    }
+    
+    /**
+     * @see Connection::prepareCall()
+     */
+    public function prepareCall($sql) {
+        throw new SQLException('SQLite does not support stored procedures using CallableStatement.');        
+    }
+    
+    /**
+     * @see Connection::createStatement()
+     */
+    public function createStatement()
+    {
+        require_once 'creole/drivers/sqlite/SQLiteStatement.php';
+        return new SQLiteStatement($this);
+    }
+        
+    /**
+     * @see Connection::close()
+     */
+    function close()
+    {
+        $ret = @sqlite_close($this->dblink);
+        $this->dblink = null;
+        return $ret;
+    }
+    
+    /**
+     * @see Connection::applyLimit()
+     */
+    public function applyLimit(&$sql, $offset, $limit)
+    {
+        if ( $limit > 0 ) {
+            $sql .= " LIMIT " . $limit . ($offset > 0 ? " OFFSET " . $offset : "");
+        } elseif ( $offset > 0 ) {
+            $sql .= " LIMIT -1 OFFSET " . $offset;
+        }
+    } 
+
+    /**
+     * @see Connection::executeQuery()
+     */
+    public function executeQuery($sql, $fetchmode = null)
+    {    
+        ini_set('sqlite.assoc_case', $this->sqliteAssocCase);
+        $this->lastQuery = $sql;
+        $result = @sqlite_query($this->dblink, $this->lastQuery);
+        if (!$result) {
+            throw new SQLException('Could not execute query', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
+        }
+        require_once 'creole/drivers/sqlite/SQLiteResultSet.php';
+        return new SQLiteResultSet($this, $result, $fetchmode);    
+    }    
+    
+    /**
+     * @see Connection::executeUpdate()
+     */
+    function executeUpdate($sql)
+    {
+        $this->lastQuery = $sql;
+        $result = @sqlite_query($this->dblink, $this->lastQuery);
+        if (!$result) {            
+            throw new SQLException('Could not execute update', $php_errormsg, $this->lastQuery); //sqlite_error_string(sqlite_last_error($this->dblink))
+        }
+        return (int) @sqlite_changes($this->dblink);
+    }
+    
+    /**
+     * Start a database transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function beginTrans()
+    {
+        $result = @sqlite_query($this->dblink, 'BEGIN');
+        if (!$result) {
+            throw new SQLException('Could not begin transaction', $php_errormsg); //sqlite_error_string(sqlite_last_error($this->dblink))
+        }
+    }
+    
+    /**
+     * Commit the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function commitTrans()
+    {
+        $result = @sqlite_query($this->dblink, 'COMMIT');
+        if (!$result) {
+            throw new SQLException('Can not commit transaction', $php_errormsg); // sqlite_error_string(sqlite_last_error($this->dblink))
+        }
+    }
+
+    /**
+     * Roll back (undo) the current transaction.
+     * @throws SQLException
+     * @return void
+     */
+    protected function rollbackTrans()
+    {
+        $result = @sqlite_query($this->dblink, 'ROLLBACK');
+        if (!$result) {
+            throw new SQLException('Could not rollback transaction', $php_errormsg); // sqlite_error_string(sqlite_last_error($this->dblink))
+        }
+    }
+
+    /**
+     * Gets the number of rows affected by the data manipulation
+     * query.
+     *
+     * @return int Number of rows affected by the last query.
+     */
+    function getUpdateCount()
+    {
+        return (int) @sqlite_changes($this->dblink);
+    }
+    
+}

Added: trunk/vendor/creole/drivers/sqlite/SQLiteIdGenerator.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteIdGenerator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteIdGenerator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,60 @@
+<?php
+
+require_once 'creole/IdGenerator.php';
+
+/**
+ * SQLite IdGenerator implimenation.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.4 $
+ * @package   creole.drivers.sqlite
+ */
+class SQLiteIdGenerator implements IdGenerator {
+    
+    /** Connection object that instantiated this class */
+    private $conn;
+
+    /**
+     * Creates a new IdGenerator class, saves passed connection for use
+     * later by getId() method.
+     * @param Connection $conn
+     */
+    public function __construct(Connection $conn)
+    {
+        $this->conn = $conn;
+    }
+    
+    /**
+     * @see IdGenerator::isBeforeInsert()
+     */
+    public function isBeforeInsert()
+    {
+        return false;
+    }    
+    
+    /**
+     * @see IdGenerator::isAfterInsert()
+     */
+    public function isAfterInsert()
+    {
+        return true;
+    }
+       
+    /**
+     * @see IdGenerator::getIdMethod()
+     */
+    public function getIdMethod()
+    {
+        return self::AUTOINCREMENT;
+    }
+    
+    /**
+     * @see IdGenerator::getId()
+     */
+    public function getId($unused = null)
+    {
+        return sqlite_last_insert_rowid($this->conn->getResource());
+    }
+    
+}
+

Added: trunk/vendor/creole/drivers/sqlite/SQLitePreparedStatement.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLitePreparedStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLitePreparedStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,61 @@
+<?php
+/*
+ *  $Id: SQLitePreparedStatement.php,v 1.7 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/PreparedStatement.php';
+require_once 'creole/common/PreparedStatementCommon.php';
+
+/**
+ * MySQL subclass for prepared statements.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.7 $
+ * @package   creole.drivers.sqlite
+ */
+class SQLitePreparedStatement extends PreparedStatementCommon implements PreparedStatement {
+    
+    /**
+     * Quotes string using native sqlite_escape_string() function.
+     * @see ResultSetCommon::escape()
+     */
+    protected function escape($str)
+    {
+        return sqlite_escape_string($str);
+    }
+    
+    /**
+     * Applies sqlite_udf_encode_binary() to ensure that binary contents will be handled correctly by sqlite.
+     * @see PreparedStatement::setBlob()
+     * @see ResultSet::getBlob()
+     */
+    function setBlob($paramIndex, $blob) 
+    {    
+        if ($blob === null) {
+            $this->setNull($paramIndex);
+        } else {
+            // they took magic __toString() out of PHP5.0.0; this sucks
+            if (is_object($blob)) {
+                $blob = $blob->__toString();
+            }
+            $this->boundInVars[$paramIndex] = "'" . sqlite_udf_encode_binary( $blob ) . "'";
+        }
+    }
+    
+}

Added: trunk/vendor/creole/drivers/sqlite/SQLiteResultSet.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteResultSet.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteResultSet.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,119 @@
+<?php
+/*
+ *  $Id: SQLiteResultSet.php,v 1.9 2004/11/29 13:41:24 micha Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/ResultSet.php';
+require_once 'creole/common/ResultSetCommon.php';
+
+/**
+ * SQLite implementation of ResultSet class.
+ *
+ * SQLite supports OFFSET / LIMIT natively; this means that no adjustments or checking
+ * are performed.  We will assume that if the lmitSQL() operation failed that an
+ * exception was thrown, and that OFFSET/LIMIT will never be emulated for SQLite.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.9 $
+ * @package   creole.drivers.sqlite
+ */
+class SQLiteResultSet extends ResultSetCommon implements ResultSet {
+    
+    /**
+     * Gets optimized SQLiteResultSetIterator.
+     * @return SQLiteResultSetIterator
+     */
+    public function getIterator()
+    {
+        require_once 'creole/drivers/sqlite/SQLiteResultSetIterator.php';
+        return new SQLiteResultSetIterator($this);
+    }
+           
+    /**
+     * @see ResultSet::seek()
+     */ 
+    public function seek($rownum)
+    {
+        // MySQL rows start w/ 0, but this works, because we are
+        // looking to move the position _before_ the next desired position
+         if (!@sqlite_seek($this->result, $rownum)) {
+                return false;
+        }
+        $this->cursorPos = $rownum;
+        return true;
+    }
+    
+    /**
+     * @see ResultSet::next()
+     */ 
+    function next()
+    {
+        $this->fields = sqlite_fetch_array($this->result, $this->fetchmode); // (ResultSet::FETCHMODE_NUM = SQLITE_NUM, etc.)
+           if (!$this->fields) {
+            $errno = sqlite_last_error($this->conn->getResource());
+            if (!$errno) {
+                // We've advanced beyond end of recordset.
+                $this->afterLast();
+                return false;
+            } else {
+                throw new SQLException("Error fetching result", sqlite_error_string($errno));
+            }
+        }
+        
+        // Advance cursor position
+        $this->cursorPos++;
+        return true;
+    }
+
+    /**
+     * @see ResultSet::getRecordCount()
+     */
+    public function getRecordCount()
+    {
+        $rows = @sqlite_num_rows($this->result);
+        if ($rows === null) {
+            throw new SQLException("Error fetching num rows", sqlite_error_string(sqlite_last_error($this->conn->getResource())));
+        }
+        return (int) $rows;
+    }    
+
+    /**
+     * Performs sqlite_udf_decode_binary on binary data.
+     * @see ResultSet::getBlob()
+     */
+    public function getBlob($column) 
+    {
+        $idx = (is_int($column) ? $column - 1 : $column);
+        if (!array_key_exists($idx, $this->fields)) { throw new SQLException("Invalid resultset column: " . $column); }
+        if ($this->fields[$idx] === null) { return null; }
+        require_once 'creole/util/Blob.php';
+        $b = new Blob();
+        $b->setContents(sqlite_udf_decode_binary($this->fields[$idx]));
+        return $b;
+    }    
+    
+    /**
+     * Simply empties array as there is no result free method for sqlite.
+     * @see ResultSet::close()
+     */
+    public function close()
+    {
+        $this->fields = array();
+    }
+}

Added: trunk/vendor/creole/drivers/sqlite/SQLiteResultSetIterator.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteResultSetIterator.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteResultSetIterator.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,89 @@
+<?php
+/*
+ *  $Id: SQLiteResultSetIterator.php,v 1.6 2004/12/03 16:57:54 gamr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Optimized iterator for SQLite.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.6 $
+ * @package   creole.drivers.sqlite
+ */
+class SQLiteResultSetIterator implements Iterator {
+
+    private $result;
+    private $pos = 0;
+    private $fetchmode;
+    private $row;
+    private $row_count;
+    
+    /**
+     * Construct the iterator.
+     * @param SQLiteResultSet $rs
+     */
+    public function __construct(SQLiteResultSet $rs)
+    {
+        $this->result = $rs->getResource();
+        $this->fetchmode = $rs->getFetchmode();
+	$this->row_count = $rs->getRecordCount();
+    }
+    
+    /**
+     * This method actually has no effect, since we do not rewind ResultSet for iteration.
+     */
+    function rewind()
+    {        
+        sqlite_rewind($this->result);
+    }
+    
+    function valid()
+    {
+	return ( $this->pos < $this->row_count );
+    }
+    
+    /**
+     * Returns the cursor position.  Note that this will not necessarily
+     * be 1 for the first row, since no rewind is performed at beginning
+     * of iteration.
+     * @return int
+     */
+    function key()
+    {
+        return $this->pos;
+    }
+    
+    /**
+     * Returns the row (assoc array) at current cursor pos.
+     * @return array
+     */
+    function current()
+    {
+       return sqlite_fetch_array($this->result, $this->fetchmode);
+    }
+    
+    /**
+     * Advances internal cursor pos.
+     */
+    function next()
+    {
+        $this->pos++;
+    }
+
+}

Added: trunk/vendor/creole/drivers/sqlite/SQLiteStatement.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteStatement.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteStatement.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,34 @@
+<?php
+/*
+ *  $Id: SQLiteStatement.php,v 1.1 2004/02/19 02:49:43 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/Statement.php';
+require_once 'creole/common/StatementCommon.php';
+
+/**
+ * SQLite Statement
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.1 $
+ * @package   creole.drivers.sqlite
+ */ 
+class SQLiteStatement extends StatementCommon implements Statement {   
+    
+}

Added: trunk/vendor/creole/drivers/sqlite/SQLiteTypes.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/SQLiteTypes.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/SQLiteTypes.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,108 @@
+<?php
+
+/*
+ *  $Id: SQLiteTypes.php,v 1.3 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/CreoleTypes.php';
+
+/**
+ * MySQL types / type map.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.sqlite
+ */
+class SQLiteTypes extends CreoleTypes {
+
+    /** 
+     * Map some fake SQLite types CreoleTypes. 
+     * SQLite is typeless so this is really only for "hint" / readability
+     * purposes.    
+     * @var array
+     */
+    private static $typeMap = array(
+                                'tinyint' => CreoleTypes::TINYINT,
+                                'smallint' => CreoleTypes::SMALLINT,
+                                'mediumint' => CreoleTypes::SMALLINT,
+                                'int' => CreoleTypes::INTEGER,
+                                'integer' => CreoleTypes::INTEGER,
+                                'bigint' => CreoleTypes::BIGINT,
+                                'int24' => CreoleTypes::BIGINT,
+                                'real' => CreoleTypes::REAL,
+                                'float' => CreoleTypes::FLOAT,
+                                'decimal' => CreoleTypes::DECIMAL,
+                                'numeric' => CreoleTypes::NUMERIC,
+                                'double' => CreoleTypes::DOUBLE,
+                                'char' => CreoleTypes::CHAR,
+                                'varchar' => CreoleTypes::VARCHAR,
+                                'date' => CreoleTypes::DATE,
+                                'time' => CreoleTypes::TIME,
+                                'year' => CreoleTypes::YEAR,
+                                'datetime' => CreoleTypes::TIMESTAMP,
+                                'timestamp' => CreoleTypes::TIMESTAMP,                                
+                                'tinyblob' => CreoleTypes::BINARY,
+                                'blob' => CreoleTypes::VARBINARY,
+                                'mediumblob' => CreoleTypes::VARBINARY,
+                                'longblob' => CreoleTypes::VARBINARY,
+                                'tinytext' => CreoleTypes::VARCHAR,
+                                'mediumtext' => CreoleTypes::LONGVARCHAR,
+                                'text' => CreoleTypes::LONGVARCHAR,
+                                );
+    
+    /** Reverse mapping, created on demand. */
+    private static $reverseMap = null;
+    
+    /**
+     * This method returns the generic Creole (JDBC-like) type
+     * when given the native db type.  If no match is found then we just
+     * return CreoleTypes::TEXT because SQLite is typeless.
+     * @param string $nativeType DB native type (e.g. 'TEXT', 'byetea', etc.).
+     * @return int Creole native type (e.g. CreoleTypes::LONGVARCHAR, CreoleTypes::BINARY, etc.).
+     */
+    public static function getType($nativeType)
+    {
+        $t = strtolower($nativeType);
+        if (isset(self::$typeMap[$t])) {
+            return self::$typeMap[$t];
+        } else {
+            return CreoleTypes::TEXT; // because SQLite is typeless
+        }
+    }
+            
+    /**
+     * This method will return a native type that corresponds to the specified
+     * Creole (JDBC-like) type.  Remember that this is really only for "hint" purposes
+     * as SQLite is typeless.
+     * 
+     * If there is more than one matching native type, then the LAST defined 
+     * native type will be returned.
+     * 
+     * @param int $creoleType
+     * @return string Native type string.
+     */
+    public static function getNativeType($creoleType)
+    {
+        if (self::$reverseMap === null) {
+            self::$reverseMap = array_flip(self::$typeMap);
+        }
+        return @self::$reverseMap[$creoleType];
+    }
+                                
+}
\ No newline at end of file

Added: trunk/vendor/creole/drivers/sqlite/metadata/SQLiteDatabaseInfo.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/metadata/SQLiteDatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/metadata/SQLiteDatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,64 @@
+<?php
+/*
+ *  $Id: SQLiteDatabaseInfo.php,v 1.3 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/metadata/DatabaseInfo.php';
+
+/**
+ * SQLite implementation of DatabaseInfo.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.3 $
+ * @package   creole.drivers.sqlite.metadata
+ */ 
+class SQLiteDatabaseInfo extends DatabaseInfo {
+    
+    /**
+     * @throws SQLException
+     * @return void
+     */
+    protected function initTables()
+    {
+        include_once 'creole/drivers/sqlite/metadata/SQLiteTableInfo.php';        
+        
+        $sql = "SELECT name FROM sqlite_master WHERE type='table' UNION ALL SELECT name FROM sqlite_temp_master WHERE type='table' ORDER BY name;";
+        $result = sqlite_query($this->dblink, $sql);
+            
+        if (!$result) {
+            throw new SQLException("Could not list tables", sqlite_error_string(sqlite_last_error($this->dblink)));
+        }
+        
+        while ($row = sqlite_fetch_array($result)) {
+            $this->tables[strtoupper($row[0])] = new SQLiteTableInfo($this, $row[0]);
+        }
+    }
+    
+    /**
+     * SQLite does not support sequences.
+     *
+     * @return void 
+     * @throws SQLException
+     */
+    protected function initSequences()
+    {
+        // throw new SQLException("MySQL does not support sequences natively.");
+    }
+        
+}

Added: trunk/vendor/creole/drivers/sqlite/metadata/SQLiteTableInfo.php
===================================================================
--- trunk/vendor/creole/drivers/sqlite/metadata/SQLiteTableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/drivers/sqlite/metadata/SQLiteTableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,133 @@
+<?php
+/*
+ *  $Id: SQLiteTableInfo.php,v 1.8 2005/10/18 02:27:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+require_once 'creole/metadata/TableInfo.php';
+
+/**
+ * MySQL implementation of TableInfo.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.8 $
+ * @package   creole.drivers.sqlite.metadata
+ */
+class SQLiteTableInfo extends TableInfo {
+    
+    /** Loads the columns for this table. */
+    protected function initColumns() 
+    {
+        
+        include_once 'creole/metadata/ColumnInfo.php';
+        include_once 'creole/metadata/PrimaryKeyInfo.php';
+        include_once 'creole/drivers/sqlite/SQLiteTypes.php';                
+        
+        // To get all of the attributes we need, we'll actually do 
+        // two separate queries.  The first gets names and default values
+        // the second will fill in some more details.
+        
+        $sql = 'PRAGMA table_info('.$this->name.')';
+                
+        $res = sqlite_query($this->conn->getResource(), $sql);
+        
+        
+        while($row = sqlite_fetch_array($res, SQLITE_ASSOC)) {
+        
+            $name = $row['name'];
+            
+            $fulltype = $row['type'];            
+            $size = null;
+            $scale = null;
+            if (preg_match('/^([^\(]+)\(\s*(\d+)\s*,\s*(\d+)\s*\)$/', $fulltype, $matches)) {
+                $type = $matches[1];
+                $size = $matches[2];
+                $scale = $matches[3]; // aka precision    
+            } elseif (preg_match('/^([^\(]+)\(\s*(\d+)\s*\)$/', $fulltype, $matches)) {
+                $type = $matches[1];
+                $size = $matches[2];
+            } else {
+                $type = $fulltype;
+            }
+            
+            $not_null = $row['notnull'];
+            $is_nullable = !$not_null;
+            
+            $default_val = $row['dflt_value'];
+            
+            $this->columns[$name] = new ColumnInfo($this, $name, SQLiteTypes::getType($type), $type, $size, $scale, $is_nullable, $default_val);
+            
+            if (($row['pk'] == 1) || (strtolower($type) == 'integer primary key')) {
+                if ($this->primaryKey === null) {
+                    $this->primaryKey = new PrimaryKeyInfo($name);
+                }
+                $this->primaryKey->addColumn($this->columns[ $name ]);
+            }
+            
+        }        
+                
+        $this->colsLoaded = true;
+    }
+    
+    /** Loads the primary key information for this table. */
+    protected function initPrimaryKey()
+    {        
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();                        
+        // keys are loaded by initColumns() in this class.
+        $this->pkLoaded = true;
+    }
+    
+    /** Loads the indexes for this table. */
+    protected function initIndexes() {
+    
+        include_once 'creole/metadata/IndexInfo.php';        
+
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();        
+
+        $sql = 'PRAGMA index_list('.$this->name.')';
+        $res = sqlite_query($this->conn->getResource(), $sql);
+        
+        while($row = sqlite_fetch_array($res, SQLITE_ASSOC)) {        
+            $name = $row['name'];
+            $this->indexes[$name] = new IndexInfo($name);
+            
+            // get columns for that index
+            $res2 = sqlite_query($this->conn->getResource(), 'PRAGMA index_info('.$name.')');
+            while($row2 = sqlite_fetch_array($res2, SQLITE_ASSOC)) {
+                $colname = $row2['name'];
+                $this->indexes[$name]->addColumn($this->columns[ $colname ]);
+            }
+        }        
+                
+        $this->indexesLoaded = true;
+    }
+    
+    /** Load foreign keys (unsupported in SQLite). */
+    protected function initForeignKeys() {
+        
+        // columns have to be loaded first
+        if (!$this->colsLoaded) $this->initColumns();        
+        
+        // No fkeys in SQLite
+        
+        $this->fksLoaded = true;
+    }
+    
+}

Added: trunk/vendor/creole/metadata/ColumnInfo.php
===================================================================
--- trunk/vendor/creole/metadata/ColumnInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/ColumnInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,218 @@
+<?php
+
+/*
+ *  $Id: ColumnInfo.php,v 1.13 2005/02/25 15:47:02 pachanga Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Represents a Column.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.13 $
+ * @package   creole.metadata
+ */
+class ColumnInfo {
+
+     // FIXME
+     //    - Currently all member attributes are public.  This should be fixed
+     // when PHP's magic __sleep() and __wakeup() functions & serialization support
+     // handles protected/private members. (if ever)
+
+    /** Column name */
+    public $name;
+
+    /** Column Creole type. */
+    public $type;
+
+    /** Column native type */
+    public $nativeType;
+
+    /** Column length */
+    public $size;
+
+    /** Column scale (number of digits after decimal ) */
+    public $scale;
+
+    /** Is nullable? */
+    public $isNullable;
+
+    /** Default value */
+    public $defaultValue;
+
+    /** Is autoincrement? */
+    public $isAutoIncrement;
+
+    /** Table */
+    public $table;
+
+    /**
+     * Additional and optional vendor specific information.
+     * @var vendorSpecificInfo
+     */
+    protected $vendorSpecificInfo = array();
+
+    /**
+     * Construct a new ColumnInfo object.
+     *
+     * @param TableInfo $table The table that owns this column.
+     * @param string $name Column name.
+     * @param int $type Creole type.
+     * @param string $nativeType Native type name.
+     * @param int $size Column length.
+     * @param int $scale Column scale (number of digits after decimal).
+     * @param boolean $is_nullable Whether col is nullable.
+     * @param mixed $default Default value.
+     * @param boolean $is_auto_increment Whether col is of autoIncrement type.
+     */
+    function __construct(TableInfo
+                         $table,
+                         $name,
+                         $type = null,
+                         $nativeType = null,
+                         $size = null,
+                         $scale = null,
+                         $is_nullable = null,
+                         $default = null,
+                         $is_auto_increment = null,
+                         $vendorInfo = array())
+    {
+        $this->table = $table;
+        $this->name = $name;
+        $this->type = $type;
+        $this->nativeType = $nativeType;
+        $this->size = $size;
+        $this->scale = $scale;
+        $this->isNullable = $is_nullable;
+        $this->defaultValue = $default;
+        $this->isAutoIncrement = $is_auto_increment;
+        $this->vendorSpecificInfo = $vendorInfo;
+    }
+
+    /**
+     * This "magic" method is invoked upon serialize().
+     * Because the Info class hierarchy is recursive, we must handle
+     * the serialization and unserialization of this object.
+     * @return array The class variables that should be serialized (all must be public!).
+     */
+    function __sleep()
+    {
+        return array('name', 'type', 'nativeType', 'size', 'precision', 'isNullable', 'defaultValue');
+    }
+
+    /**
+     * Get column name.
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Get column type.
+     * @return int
+     */
+    public function getType()
+    {
+        return $this->type;
+    }
+
+    /**
+     * Gets the native type name.
+     * @return string
+     */
+    public function getNativeType()
+    {
+        return $this->nativeType;
+    }
+
+    /**
+     * Get column size.
+     * @return int
+     */
+    public function getSize()
+    {
+        return $this->size;
+    }
+
+    /**
+     * Get column scale.
+     * Scale refers to number of digits after the decimal.  Sometimes this is referred
+     * to as precision, but precision is the total number of digits (i.e. length).
+     * @return int
+     */
+    public function getScale()
+    {
+        return $this->scale;
+    }
+
+    /**
+     * Get the default value.
+     * @return mixed
+     */
+    public function getDefaultValue()
+    {
+        return $this->defaultValue;
+    }
+
+    /**
+     * Is column nullable?
+     * @return boolean
+     */
+    public function isNullable()
+    {
+        return $this->isNullable;
+    }
+
+    /**
+     * Is column of autoincrement type?
+     * @return boolean
+     */
+    public function isAutoIncrement()
+    {
+        return $this->isAutoIncrement === true;
+    }
+
+    /**
+     * Get vendor specific optional information for this column.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        return $this->vendorSpecificInfo;
+    }
+
+    /**
+     * @return string
+     */
+    public function toString()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Get parent table.
+     * @return TableInfo
+     */
+    public function getTable()
+    {
+        return $this->table;
+    }
+
+}

Added: trunk/vendor/creole/metadata/DatabaseInfo.php
===================================================================
--- trunk/vendor/creole/metadata/DatabaseInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/DatabaseInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,212 @@
+<?php
+
+/*
+ *  $Id: DatabaseInfo.php,v 1.14 2005/10/26 10:30:47 gamr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * "Info" metadata class for a database.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.14 $
+ * @package   creole.metadata
+ */
+abstract class DatabaseInfo {
+
+    protected $tables = array();
+
+    protected $sequences = array();
+
+    /** have tables been loaded */
+    protected $tablesLoaded = false;
+
+    /** have sequences been loaded */
+    protected $seqsLoaded = false;
+
+    /** additional vendor specific information */
+    private $vendorSpecificInfo = array();
+
+    /**
+     * The database Connection.
+     * @var Connection
+     */
+    protected $conn;
+
+    /** Database name. */
+    protected $dbname;
+
+    /**
+     * Database link
+     * @var resource
+     */
+    protected $dblink;
+
+    /**
+     * @param Connection $dbh
+     */
+    public function __construct(Connection $conn, $vendorInfo = array())
+    {
+        $this->conn = $conn;
+        $this->dblink = $conn->getResource();
+        $dsn = $conn->getDSN();
+        $this->dbname = $dsn['database'];
+        $this->vendorSpecificInfo = $vendorInfo;
+    }
+
+    /**
+     * Get name of database.
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->dbname;
+    }
+
+    /**
+     * This method is invoked upon serialize().
+     * Because the Info class hierarchy is recursive, we must handle
+     * the serialization and unserialization of this object.
+     * @return array The class variables that should be serialized (all must be public!).
+     */
+    function __sleep()
+    {
+        return array('tables','conn');
+    }
+
+    /**
+     * This method is invoked upon unserialize().
+     * This method re-hydrates the object and restores the recursive hierarchy.
+     */
+    function __wakeup()
+    {
+        // Re-init vars from serialized connection
+        $this->dbname = $conn->database;
+        $this->dblink = $conn->connection;
+
+        // restore chaining
+        foreach($this->tables as $tbl) {
+            $tbl->database = $this;
+            $tbl->dbname = $this->dbname;
+            $tbl->dblink = $this->dblink;
+            $tbl->schema = $this->schema;
+        }
+    }
+
+    /**
+     * Returns Connection being used.
+     * @return Connection
+     */
+    public function getConnection()
+    {
+        return $this->conn;
+    }
+
+    /**
+     * Get the TableInfo object for specified table name.
+     * @param string $name The name of the table to retrieve.
+     * @return TableInfo
+     * @throws SQLException - if table does not exist in this db.
+     */
+    public function getTable($name)
+    {
+        if(!$this->tablesLoaded) $this->initTables();
+        if (!isset($this->tables[strtoupper($name)])) {
+            throw new SQLException("Database `".$this->dbname."` has no table `".$name."`");
+        }
+        return $this->tables[ strtoupper($name) ];
+    }
+
+  /**
+   * Return whether database contains specified table.
+   * @param string $name The table name.
+   * @return boolean
+   */
+  public function hasTable($name)
+  {
+    return isset($this->tables[strtoupper($name)]);
+  }
+
+    /**
+     * Gets array of TableInfo objects.
+     * @return array TableInfo[]
+     */
+    public function getTables()
+    {
+        if(!$this->tablesLoaded) $this->initTables();
+        return array_values($this->tables); //re-key [numerically]
+    }
+
+    /**
+     * Adds a table to this db.
+     * Table name is case-insensitive.
+     * @param TableInfo $table
+     */
+    public function addTable(TableInfo $table)
+    {
+        $this->tables[strtoupper($table->getName())] = $table;
+    }
+
+    /**
+     * @return void
+     * @throws SQLException
+     */
+    abstract protected function initTables();
+
+    // FIXME
+    // Figure out sequences.  What are they exactly?  Simply columns?
+    // Should this logic really be at the db level (yes & no, i think).  Maybe
+    // also a Column::isSequence() method ?  PosgreSQL supports sequences obviously,
+    // but currently this part of dbinfo classes is not being used.
+
+    /**
+     * @return void
+     * @throws SQLException
+     */
+    abstract protected function initSequences();
+
+    /**
+     * @return boolean
+     * @throws SQLException
+     */
+    public function isSequence($key)
+    {
+        if(!$this->seqsLoaded) $this->initSequences();
+        return isset($this->sequences[ strtoupper($key) ]);
+    }
+
+    /**
+     * Gets array of ? objects.
+     * @return array ?[]
+     */
+    public function getSequences()
+    {
+        if(!$this->seqsLoaded) $this->initSequences();
+        return array_values($this->sequences); //re-key [numerically]
+    }
+
+    /**
+     * Get vendor specific optional information for this primary key.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        return $this->vendorSpecificInfo;
+    }
+}
+

Added: trunk/vendor/creole/metadata/ForeignKeyInfo.php
===================================================================
--- trunk/vendor/creole/metadata/ForeignKeyInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/ForeignKeyInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,103 @@
+<?php
+
+/*
+ *  $Id: ForeignKeyInfo.php,v 1.9 2005/08/02 14:42:36 sethr Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Represents a foreign key.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.9 $
+ * @package   creole.metadata
+ */
+class ForeignKeyInfo {
+
+    private $name;
+    private $references = array();
+
+    /**
+     * Additional and optional vendor specific information.
+     * @var vendorSpecificInfo
+     */
+    protected $vendorSpecificInfo = array();
+
+
+    const NONE       = "";            // No "ON [ DELETE | UPDATE]" behaviour specified.
+    const NOACTION   = "NO ACTION";
+    const CASCADE    = "CASCADE";
+    const RESTRICT   = "RESTRICT";
+    const SETDEFAULT = "SET DEFAULT";
+    const SETNULL    = "SET NULL";
+
+    /**
+     * @param string $name The name of the foreign key.
+     */
+    function __construct($name, $vendorInfo = array())
+    {
+        $this->name = $name;
+        $this->vendorSpecificInfo = $vendorInfo;
+    }
+
+    /**
+     * Get foreign key name.
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Adds a foreign-local mapping.
+     * @param ColumnInfo $local
+     * @param ColumnInfo $foreign
+     */
+    public function addReference(ColumnInfo $local, ColumnInfo $foreign, $onDelete = self::NONE, $onUpdate = self::NONE)
+    {
+        $this->references[] = array($local, $foreign, $onDelete, $onUpdate);
+    }
+
+    /**
+     * Gets the local-foreign column mapping.
+     * @return array array( [0] => array([0] => local ColumnInfo object, [1] => foreign ColumnInfo object, [2] => onDelete, [3] => onUpdate) )
+     */
+    public function getReferences()
+    {
+        return $this->references;
+    }
+
+    /**
+     * Get vendor specific optional information for this primary key.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        return $this->vendorSpecificInfo;
+    }
+
+    /**
+     * @return string
+     */
+    public function toString()
+    {
+        return $this->name;
+    }
+
+}

Added: trunk/vendor/creole/metadata/IndexInfo.php
===================================================================
--- trunk/vendor/creole/metadata/IndexInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/IndexInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,84 @@
+<?php
+/*
+ *  $Id: IndexInfo.php,v 1.7 2005/02/25 15:47:02 pachanga Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Represents an index.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.7 $
+ * @package   creole.metadata
+ */
+class IndexInfo {
+
+    /** name of the index */
+    private $name;
+
+    /** columns in this index */
+    private $columns = array();
+
+    /** uniqueness flag */
+    private $isUnique = false;
+
+    /** additional vendor specific information */
+    private $vendorSpecificInfo = array();
+
+    function __construct($name, $isUnique = false, $vendorInfo = array())
+    {
+        $this->name = $name;
+        $this->isUnique = $isUnique;
+        $this->vendorSpecificInfo = $vendorInfo;
+    }
+
+    public function isUnique()
+    {
+        return $this->isUnique;
+    }
+
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Get vendor specific optional information for this index.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        return $this->vendorSpecificInfo;
+    }
+
+    public function addColumn($column)
+    {
+        $this->columns[] = $column;
+    }
+
+    public function getColumns()
+    {
+        return $this->columns;
+    }
+
+    public function toString()
+    {
+        return $this->name;
+    }
+
+}

Added: trunk/vendor/creole/metadata/PrimaryKeyInfo.php
===================================================================
--- trunk/vendor/creole/metadata/PrimaryKeyInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/PrimaryKeyInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,91 @@
+<?php
+/*
+ *  $Id: PrimaryKeyInfo.php,v 1.6 2005/02/25 15:47:02 pachanga Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Represents a PrimaryKey
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.6 $
+ * @package   creole.metadata
+ */
+class PrimaryKeyInfo {
+
+    /** name of the primary key */
+    private $name;
+
+    /** columns in the primary key */
+    private $columns = array();
+
+    /** additional vendor specific information */
+    private $vendorSpecificInfo = array();
+
+    /**
+     * @param string $name The name of the foreign key.
+     */
+    function __construct($name, $vendorInfo = array())
+    {
+        $this->name = $name;
+        $this->vendorSpecificInfo = $vendorInfo;
+    }
+
+    /**
+     * Get foreign key name.
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * @param Column $column
+     * @return void
+     */
+    public function addColumn($column)
+    {
+        $this->columns[] = $column;
+    }
+
+    /**
+     * @return array Column[]
+     */
+    public function getColumns()
+    {
+        return $this->columns;
+    }
+
+    /**
+     * Get vendor specific optional information for this primary key.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        return $this->vendorSpecificInfo;
+    }
+
+    /**
+     * @return string
+     */
+    public function toString()
+    {
+        return $this->name;
+    }
+}

Added: trunk/vendor/creole/metadata/TableInfo.php
===================================================================
--- trunk/vendor/creole/metadata/TableInfo.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/metadata/TableInfo.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,305 @@
+<?php
+
+/*
+ *  $Id: TableInfo.php,v 1.16 2005/10/17 19:05:10 dlawson_mi Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * Represents a table.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.16 $
+ * @package   creole.metadata
+ */
+abstract class TableInfo {
+
+    protected $name;
+    protected $columns = array();
+    protected $foreignKeys = array();
+    protected $indexes = array();
+    protected $primaryKey;
+
+    protected $pkLoaded = false;
+    protected $fksLoaded = false;
+    protected $indexesLoaded = false;
+    protected $colsLoaded = false;
+    protected $vendorLoaded = false;
+
+    /**
+     * Additional and optional vendor specific information.
+     * @var vendorSpecificInfo
+     */
+    protected $vendorSpecificInfo = array();
+
+    /**
+     * Database Connection.
+     * @var Connection
+     */
+    protected $conn;
+
+    /**
+     * The parent DatabaseInfo object.
+     * @var DatabaseInfo
+     */
+    protected $database;
+
+    /** Shortcut to db resource link id (needed by drivers for queries). */
+    protected $dblink;
+
+    /** Shortcut to db name (needed by many drivers for queries). */
+    protected $dbname;
+
+    /**
+     * @param string $table The table name.
+     * @param string $database The database name.
+     * @param resource $dblink The db connection resource.
+     */
+    function __construct(DatabaseInfo $database, $name) {
+        $this->database = $database;
+        $this->name = $name;
+        $this->conn = $database->getConnection(); // shortcut because all drivers need this for the queries
+        $this->dblink = $this->conn->getResource();
+        $this->dbname = $database->getName();
+    }
+
+    /**
+     * This "magic" method is invoked upon serialize().
+     * Because the Info class hierarchy is recursive, we must handle
+     * the serialization and unserialization of this object.
+     * @return array The class variables that should be serialized (all must be public!).
+     */
+    function __sleep()
+    {
+        return array('name', 'columns', 'foreignKeys', 'indexes', 'primaryKey');
+    }
+
+    /**
+     * This "magic" method is invoked upon unserialize().
+     * This method re-hydrates the object and restores the recursive hierarchy.
+     */
+    function __wakeup()
+    {
+        // restore chaining
+        foreach($this->columns as $col) {
+            $col->table = $this;
+        }
+    }
+
+    /**
+     * Loads the columns.
+     * @return void
+     */
+    abstract protected function initColumns();
+
+    /**
+     * Loads the primary key information for this table.
+     * @return void
+     */
+    abstract protected function initPrimaryKey();
+
+    /**
+     * Loads the foreign keys for this table.
+     * @return void
+     */
+    abstract protected function initForeignKeys();
+
+    /**
+     * Loads the indexes information for this table.
+     * @return void
+     */
+    abstract protected function initIndexes();
+
+    /**
+     * Loads the vendor specific information for this table.
+     * @return void
+     */
+    //it must be asbtract and be implemented in every vendor specific driver,
+    //however since it's an experimental stuff it has an empty body in order
+    //not to break BC
+    /*abstract*/ protected function initVendorSpecificInfo(){}
+
+    /**
+     * Get parimary key in this table.
+     * @throws Exception - if foreign keys are unsupported by DB.
+     * @return array ForeignKeyInfo[]
+     */
+    public function getPrimaryKey()
+    {
+        if(!$this->pkLoaded) $this->initPrimaryKey();
+        return $this->primaryKey;
+    }
+
+    /**
+     * Get the ColumnInfo object for specified column.
+     * @param string $name The column name.
+     * @return ColumnInfo
+     * @throws SQLException - if column does not exist for this table.
+     */
+    public function getColumn($name)
+    {
+        if(!$this->colsLoaded) $this->initColumns();
+        if (!isset($this->columns[$name])) {
+            throw new SQLException("Table `".$this->name."` has no column `".$name."`");
+        }
+        return $this->columns[$name];
+    }
+
+    /**
+     * Return whether table contains specified column.
+     * @param string $name The column name.
+     * @return boolean
+     */
+    public function hasColumn($name)
+    {
+        if(!$this->colsLoaded) $this->initColumns();
+        return isset($this->columns[$name]);
+    }
+
+    /**
+     * Get array of columns for this table.
+     * @return array ColumnInfo[]
+     */
+    public function getColumns()
+    {
+        if(!$this->colsLoaded) $this->initColumns();
+        return array_values($this->columns); // re-key numerically
+    }
+
+    /**
+     * Get specified fk for this table.
+     * @param string $name The foreign key name to retrieve.
+     * @return ForeignKeyInfo
+     * @throws SQLException - if fkey does not exist for this table.
+     */
+    public function getForeignKey($name)
+    {
+        if(!$this->fksLoaded) $this->initForeignKeys();
+        if (!isset($this->foreignKeys[$name])) {
+            throw new SQLException("Table `".$this->name."` has no foreign key `".$name."`");
+        }
+        return $this->foreignKeys[$name];
+    }
+
+    /**
+     * Get all foreign keys.
+     * @return array ForeignKeyInfo[]
+     */
+    public function getForeignKeys()
+    {
+        if(!$this->fksLoaded) $this->initForeignKeys();
+        return array_values($this->foreignKeys);
+    }
+
+    /**
+     * Gets the IndexInfo object for a specified index.
+     * @param string $name The index name to retrieve.
+     * @return IndexInfo
+     * @throws SQLException - if index does not exist for this table.
+     */
+    public function getIndex($name)
+    {
+        if(!$this->indexesLoaded) $this->initIndexes();
+        if (!isset($this->indexes[$name])) {
+            throw new SQLException("Table `".$this->name."` has no index `".$name."`");
+        }
+        return $this->indexes[$name];
+    }
+
+    /**
+     * Get array of IndexInfo objects for this table.
+     * @return array IndexInfo[]
+     */
+    public function getIndexes()
+    {
+        if(!$this->indexesLoaded) $this->initIndexes();
+        return array_values($this->indexes);
+    }
+
+    /**
+     * Alias for getIndexes() method.
+     * @return array
+     */
+    public function getIndices()
+    {
+        return $this->getIndexes();
+    }
+
+    /**
+     * Get table name.
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * @return string
+     */
+    public function toString()
+    {
+        return $this->name;
+    }
+
+    /** Have foreign keys been loaded? */
+    public function foreignKeysLoaded()
+    {
+        return $this->fksLoaded;
+    }
+
+    /** Has primary key info been loaded? */
+    public function primaryKeyLoaded()
+    {
+        return $this->pkLoaded;
+    }
+
+    /** Have columns been loaded? */
+    public function columnsLoaded()
+    {
+        return $this->colsLoaded;
+    }
+
+    /** Has index information been loaded? */
+    public function indexesLoaded()
+    {
+        return $this->indexesLoaded;
+    }
+
+    /**
+     * Get vendor specific optional information for this table.
+     * @return array vendorSpecificInfo[]
+     */
+    public function getVendorSpecificInfo()
+    {
+        if(!$this->vendorLoaded) $this->initVendorSpecificInfo();
+        return $this->vendorSpecificInfo;
+    }
+
+    /** Adds a column to this table. */
+    public function addColumn(ColumnInfo $column)
+    {
+        $this->columns[$column->getName()] = $column;
+    }
+
+    /** Get the parent DatabaseInfo object. */
+    public function getDatabase()
+    {
+        return $this->database;
+    }
+}

Added: trunk/vendor/creole/util/Blob.php
===================================================================
--- trunk/vendor/creole/util/Blob.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/util/Blob.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,62 @@
+<?php
+/*
+ *  $Id: Blob.php,v 1.5 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/util/Lob.php';
+
+/**
+ * A class for handling binary LOBs.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.util
+ */
+class Blob extends Lob {            
+    
+    /**
+     * Dump the contents of the file using fpassthru().
+     *
+     * @return void
+     * @throws Exception if no file or contents.
+     */
+    function dump()
+    {
+        if (!$this->data) {            
+            // hmmm .. must be a file that needs to read in
+            if ($this->inFile) {
+                $fp = @fopen($this->inFile, "rb");
+                if (!$fp) {
+                    throw new Exception('Unable to open file: '.$this->inFile);
+                }
+                fpassthru($fp);
+                @fclose($fp);
+            } else {
+                throw new Exception('No data to dump');
+            }
+        
+        } else {            
+            echo $this->data;
+        }        
+        
+    }
+    
+    
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/util/Clob.php
===================================================================
--- trunk/vendor/creole/util/Clob.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/util/Clob.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,112 @@
+<?php
+/*
+ *  $Id: Clob.php,v 1.6 2004/07/27 23:15:13 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+require_once 'creole/util/Lob.php';
+
+/**
+ * A class for handling character (ASCII) LOBs.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.6 $
+ * @package   creole.util
+ */
+class Clob extends Lob {
+
+    /**
+     * Read LOB data from file.
+     * @param string $file Filename may also be specified here (if not specified using setInputFile()).
+     * @return void
+     * @throws Exception - if no file specified or error on read.
+     * @see setInputFile()
+     */
+    public function readFromFile($file = null)
+    {
+        if ($file !== null) {
+            $this->setInputFile($file);
+        }
+        if (!$this->inFile) {
+            throw Exception('No file specified for read.');
+        }
+        $data = null;
+        $file = fopen($this->inFile, "rt");
+        while (!feof($file)) $data .= fgets($file, 4096);
+        fclose($file);
+        if ($data === false) {
+            throw new Exception('Unable to read from file: '.$this->inFile);
+        }
+        $this->setContents($data);
+    }
+
+
+    /**
+     * Write LOB data to file.
+     * @param string $file Filename may also be specified here (if not set using setOutputFile()).
+     * @throws Exception - if no file specified, no contents to write, or error on write.
+     * @see setOutputFile()
+     */
+    public function writeToFile($file = null)
+    {
+        if ($file !== null) {
+            $this->setOutputFile($file);
+        }
+        if (!$this->outFile) {
+            throw new Exception('No file specified for write');
+        }
+        if ($this->data === null) {
+            throw new Exception('No data to write to file');
+        }
+        $file = fopen($this->inFile, "wt");
+        if (fputs($file, $data) === false)
+            throw new Exception('Unable to write to file: '.$this->outFile);
+        fclose($file);
+    }
+
+    /**
+     * Dump the contents of the file using fpassthru().
+     *
+     * @return void
+     * @throws Exception if no file or contents.
+     */
+    function dump()
+    {
+        if (!$this->data) {
+
+            // is there a file name set?
+            if ($this->inFile) {
+                $fp = @fopen($this->inFile, "r");
+                if (!$fp) {
+                    throw new Exception('Unable to open file: '.$this->inFile);
+                }
+                fpassthru($fp);
+                @fclose($fp);
+            } else {
+                throw new Exception('No data to dump');
+            }
+
+        } else {
+            echo $this->data;
+        }
+
+    }
+
+
+
+}
\ No newline at end of file

Added: trunk/vendor/creole/util/Lob.php
===================================================================
--- trunk/vendor/creole/util/Lob.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/util/Lob.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,243 @@
+<?php
+/*
+ *  $Id: Lob.php,v 1.10 2004/03/20 04:16:50 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+
+/**
+ * An abstract class for handling LOB (Locator Object) columns.
+ * 
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.10 $
+ * @package   creole.util
+ */
+abstract class Lob {
+
+    /** 
+     * The contents of the Lob.
+     * DO NOT SET DIRECTLY (or you will disrupt the
+     * ability of isModified() to give accurate results).
+     * @var string
+     */
+    protected $data;
+    
+    /** 
+     * File that blob should be written out to.
+     * @var string
+     */
+    protected $outFile;
+    
+    /** 
+     * File that blob should be read in from 
+     * @var string
+     */
+    protected $inFile;
+    
+    /**
+     * This is a 3-state value indicating whether column has been
+     * modified.
+     * Initially it is NULL.  Once first call to setContents() is made
+     * it is FALSE, because this will be initial state of Lob.  Once
+     * a subsequent call to setContents() is made it is TRUE.
+     * @var boolean
+     */
+    private $modified = null;
+    
+    /**
+     * Construct a new Lob.
+     * @param sttring $data The data contents of the Lob.
+     * @see setContents()
+     */
+    public function __construct($data = null)
+    {
+        if ($data !== null) {
+            $this->setContents($data);
+        }
+    }
+    
+    /**
+     * Get the contents of the LOB.
+     * @return string The characters in this LOB.
+     * @throws Exception
+     */
+    public function getContents()
+    {
+        if ($this->data === null && $this->isFromFile()) {
+            $this->readFromFile();
+        }
+        return $this->data;
+    }
+    
+    /**
+     * Set the contents of this LOB.
+     * Sets the modified flag to FALSE if this is the first call
+     * to setContents() for this object.  Sets the bit to TRUE if
+     * this any subsequent call to setContents().
+     * @param string $bytes
+     */
+    public function setContents($data)
+    {
+        $this->data = $data;
+               
+        if ($this->modified === null) {
+             // if modified bit hasn't been set yet,
+            // then it should now be set to FALSE, since
+            // we just did inital population
+            $this->modified = false;
+        } elseif ($this->modified === false) {
+            // if it was already FALSE, then it should
+            // now be set to TRUE, since this is a subsequent
+            // modfiication.
+            $this->modified = true;
+        }
+    }
+        
+    /**
+     * Dump the contents of the file to stdout.
+     * Must be implemented by subclasses so that binary status is handled
+     * correctly. (i.e. ignored for Clob, handled for Blob)
+     * @return void
+     * @throws Exception if no file or contents.
+     */
+    abstract public function dump();
+    
+    /**
+     * Specify the file that we want this LOB read from.
+     * @param string $filePath The location of the file.
+     * @return void
+     */
+    public function setInputFile($filePath)
+    {
+        $this->inFile = $filePath;
+    }    
+
+    /**
+     * Get the file that we want this LOB read from.
+     * @return string The location of the file.
+     */
+    public function getInputFile()
+    {
+        return $this->inFile;
+    }    
+    
+    /**
+     * Specify the file that we want this LOB saved to.
+     * @param string $filePath The location of the file.
+     * @return void
+     */
+    public function setOutputFile($filePath)
+    {
+        $this->outFile = $filePath;        
+    }
+    
+    /**
+     * Get the file that we want this LOB saved to.
+     * @return string $filePath The location of the file.
+     */
+    public function getOutputFile()
+    {
+        return $this->outFile;
+    }
+
+    /**
+     * Returns whether this Lob is loaded from file.
+     * This is useful for bypassing need to read in the contents of the Lob.
+     * @return boolean Whether this LOB is to be read from a file.
+     */
+    public function isFromFile()
+    {
+        return ($this->inFile !== null);
+    }
+    
+    /**
+     * Read LOB data from file (binary safe).
+     * (Implementation may need to be moved into Clob / Blob subclasses, but 
+     * since file_get_contents() is binary-safe, it hasn't been necessary so far.)
+     * @param string $file Filename may also be specified here (if not specified using setInputFile()).
+     * @return void
+     * @throws Exception - if no file specified or error on read.
+     * @see setInputFile()
+     */
+    public function readFromFile($file = null)
+    {
+        if ($file !== null) {
+            $this->setInputFile($file);
+        }
+        if (!$this->inFile) {
+            throw Exception('No file specified for read.');
+        }        
+        $data = @file_get_contents($this->inFile);
+        if ($data === false) {
+            throw new Exception('Unable to read from file: '.$this->inFile);
+        }        
+        $this->setContents($data);                
+    }
+    
+    
+    /**
+     * Write LOB data to file (binary safe).
+     * (Impl may need to move into subclasses, but so far not necessary.)
+     * @param string $file Filename may also be specified here (if not set using setOutputFile()).
+     * @throws Exception - if no file specified, no contents to write, or error on write.
+     * @see setOutputFile()
+     */
+    public function writeToFile($file = null)
+    {
+        if ($file !== null) {
+            $this->setOutputFile($file);
+        }        
+        if (!$this->outFile) {
+            throw new Exception('No file specified for write');
+        }
+        if ($this->data === null) {
+            throw new Exception('No data to write to file');
+        }        
+        if (false === @file_put_contents($this->outFile, $this->data)) {
+            throw new Exception('Unable to write to file: '.$this->outFile);
+        }
+    }
+    
+    /**
+     * Convenience method to get contents of LOB as string.
+     * @return string
+     */
+    public function __toString()
+    {
+        return $this->getContents();
+    }
+    
+    /**
+     * Set whether LOB contents have been modified after initial setting.
+     * @param boolean $b
+     */
+    public function setModified($b)
+    {
+        $this->modified = $b;
+    }
+    
+    /**
+     * Whether LOB contents have been modified after initial setting.
+     * @return boolean TRUE if the contents have been modified after initial setting. 
+     *                  FALSE if contents have not been modified or if no contents have bene set.
+     */
+    public function isModified()
+    {
+        // cast it so that NULL will also eval to false
+        return (boolean) $this->modified;
+    }
+}

Added: trunk/vendor/creole/util/sql/SQLStatementExtractor.php
===================================================================
--- trunk/vendor/creole/util/sql/SQLStatementExtractor.php	2005-10-29 09:54:10 UTC (rev 242)
+++ trunk/vendor/creole/util/sql/SQLStatementExtractor.php	2005-10-29 09:55:23 UTC (rev 243)
@@ -0,0 +1,164 @@
+<?php
+/*
+ *  $Id: SQLStatementExtractor.php,v 1.5 2004/07/27 23:13:46 hlellelid Exp $
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This software consists of voluntary contributions made by many individuals
+ * and is licensed under the LGPL. For more information please see
+ * <http://creole.phpdb.org>.
+ */
+ 
+/**
+ * Static class for extracting SQL statements from a string or file.
+ *
+ * @author    Hans Lellelid <hans at xmpl.org>
+ * @version   $Revision: 1.5 $
+ * @package   creole.util.sql
+ */
+class SQLStatementExtractor {
+    
+    protected static $delimiter = ';';
+    
+    /**
+     * Get SQL statements from file.
+     * 
+     * @param string $filename Path to file to read.
+     * @return array SQL statements
+     */
+    public static function extractFile($filename) {
+        $buffer = file_get_contents($filename);
+        if ($buffer === false) {
+           throw new Exception("Unable to read file: " . $filename);
+        }
+        return self::extractStatements(self::getLines($buffer));
+    }
+    
+    /**
+     * Extract statements from string.
+     * 
+     * @param string $txt
+     * @return array
+     */
+    public static function extract($buffer) {
+        return self::extractStatements(self::getLines($buffer));
+    }
+    
+    /**
+     * Extract SQL statements from array of lines.
+     *
+     * @param array $lines Lines of the read-in file.
+     * @return string
+     */
+    protected static function extractStatements($lines) {
+        
+        $statements = array();
+        $sql = "";
+               
+        foreach($lines as $line) {
+        
+                $line = trim($line);
+                
+                if (self::startsWith("//", $line) || 
+                    self::startsWith("--", $line) ||
+                    self::startsWith("#", $line)) {
+                    continue;
+                }
+                
+                if (strlen($line) > 4 && strtoupper(substr($line,0, 4)) == "REM ") {
+                    continue;
+                }
+
+                $sql .= " " . $line;
+                $sql = trim($sql);
+
+                // SQL defines "--" as a comment to EOL
+                // and in Oracle it may contain a hint
+                // so we cannot just remove it, instead we must end it
+                if (strpos($line, "--") !== false) {
+                    $sql .= "\n";
+                }
+    
+                if (self::endsWith(self::$delimiter, $sql)) {
+                    $statements[] = self::substring($sql, 0, strlen($sql)-1 - strlen(self::$delimiter));
+                    $sql = "";
+                }
+            }
+        return $statements;           
+    }
+    
+    //
+    // Some string helper methods
+    // 
+    
+    /**
+     * Tests if a string starts with a given string.
+     * @param string $check The substring to check.
+     * @param string $string The string to check in (haystack).
+     * @return boolean True if $string starts with $check, or they are equal, or $check is empty.
+     */
+    protected static function startsWith($check, $string) {
+        if ($check === "" || $check === $string) {
+            return true;
+        } else {
+            return (strpos($string, $check) === 0) ? true : false;
+        }
+    }
+    
+    /**
+     * Tests if a string ends with a given string.
+     * @param string $check The substring to check.
+     * @param string $string The string to check in (haystack).
+     * @return boolean True if $string ends with $check, or they are equal, or $check is empty.
+     */
+    protected static function endsWith($check, $string) {
+        if ($check === "" || $check === $string) {
+            return true;
+        } else {
+            return (strpos(strrev($string), strrev($check)) === 0) ? true : false;
+        }
+    } 
+
+    /**
+     * a natural way of getting a subtring, php's circular string buffer and strange
+     * return values suck if you want to program strict as of C or friends 
+     */
+    protected static function substring($string, $startpos, $endpos = -1) {
+        $len    = strlen($string);
+        $endpos = (int) (($endpos === -1) ? $len-1 : $endpos);
+        if ($startpos > $len-1 || $startpos < 0) {
+            trigger_error("substring(), Startindex out of bounds must be 0<n<$len", E_USER_ERROR);
+        }
+        if ($endpos > $len-1 || $endpos < $startpos) {
+            trigger_error("substring(), Endindex out of bounds must be $startpos<n<".($len-1), E_USER_ERROR);
+        }
+        if ($startpos === $endpos) {
+            return (string) $string{$startpos};
+        } else {
+            $len = $endpos-$startpos;
+        }
+        return substr($string, $startpos, $len+1);
+    }
+    
+    /**
+     * Convert string buffer into array of lines.
+     * 
+     * @param string $filename
+     * @return array string[] lines of file.
+     */
+    protected static function getLines($buffer) {       
+       $lines = preg_split("/\r?\n|\r/", $buffer);
+       return $lines;
+    }
+    
+}
\ No newline at end of file



From aurelian at berlios.de  Sat Oct 29 12:07:50 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 12:07:50 +0200
Subject: [Medick-svn] r244 - trunk
Message-ID: <200510291007.j9TA7oMF022033@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 12:07:49 +0200 (Sat, 29 Oct 2005)
New Revision: 244

Modified:
   trunk/CHANGELOG
Log:
 CHANGELOG updated.

Modified: trunk/CHANGELOG
===================================================================
--- trunk/CHANGELOG	2005-10-29 09:55:23 UTC (rev 243)
+++ trunk/CHANGELOG	2005-10-29 10:07:49 UTC (rev 244)
@@ -1,12 +1,16 @@
 $Id$
-* work in progress.
-^ small wish-list
+(*) SVM version
 
-0.0.3(*)
-    - Unit test ActiveRecordBase (*)
+0.0.3 (*)
+    - more UnitTests and a better organization of tests.
     - Minor code clean-up in Logger and XMLConfigurator => better testing.
-    - ActiveRecordBase implemented has_and_belongs_to_many association (read-only)
-    - Custom ErrorHandler
+    - Initial import of an INI style file configurator (INIConfigurator)
+    - ActiveRecordBase:
+        implemented has_and_belongs_to_many association (read-only)
+        fix broken behavior when trying to return an empty result set in __find() method
+    - ActionController: added process_with_exception method.
+    - Custom ErrorHandler, added more specialized Errors and Exceptions, for better debugging.
+    - bundled creole, creole is a DB Abstraction layer for PHP5 released under LGPL licence, more details on http://creole.phpdb.org
 
 0.0.2 (14.Oct.2005)
     - initial import of Session



From aurelian at berlios.de  Sat Oct 29 17:49:59 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 17:49:59 +0200
Subject: [Medick-svn] r245 - in trunk: libs/action/controller test/application/models test/test/action/controller
Message-ID: <200510291549.j9TFnxvC020117@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 17:49:59 +0200 (Sat, 29 Oct 2005)
New Revision: 245

Added:
   trunk/test/application/models/fakemodelone.php
   trunk/test/application/models/fakemodeltwo.php
   trunk/test/test/action/controller/InjectorTest.php
Modified:
   trunk/libs/action/controller/Injector.php
Log:
 [ AR/Injector ] :
    -> if the find method is not defined a InhectorException is thrown
    -> the same exception is thrown also if the find method is not declared as beeing static and public.
    -> added UnitTest.


Modified: trunk/libs/action/controller/Injector.php
===================================================================
--- trunk/libs/action/controller/Injector.php	2005-10-29 10:07:49 UTC (rev 244)
+++ trunk/libs/action/controller/Injector.php	2005-10-29 15:49:59 UTC (rev 245)
@@ -64,9 +64,21 @@
         }
           
         $model_object = new ReflectionClass(ucfirst($model));
-        if ($model_object->getParentClass()->name != 'ActiveRecordBase') {
-            throw new InjectorException ('Wrong Definition of your Model, `' . $model_name . '` must extend ActiveRecordBase object!');
+
+        if (@$model_object->getParentClass()->name != 'ActiveRecordBase') {
+            throw new InjectorException ('Wrong Definition of your Model, `' . ucfirst($model) . '` must extend ActiveRecordBase object!');
         }
+        // if (!$model_object->hasMethod('find')) { XXX. php 5.1 only.
+        try {
+            $method= $model_object->getMethod('find');
+            if (!$method->isStatic() && !$method->isPublic()) {
+                throw new InjectorException('Class method: ' . ucfirst($model) . '::find() should be declared static and public!');
+            }
+        } catch (ReflectionException $rex) {
+            throw new InjectorException (
+                'Cannot Inject your Model, `' . ucfirst($model) . '`!
+                The dummy `find` method is not defined! [ User Info: ' . $rex->getMessage() . ']');
+        }
     }
   
     /** prepare static members for our model

Added: trunk/test/application/models/fakemodelone.php
===================================================================
--- trunk/test/application/models/fakemodelone.php	2005-10-29 10:07:49 UTC (rev 244)
+++ trunk/test/application/models/fakemodelone.php	2005-10-29 15:49:59 UTC (rev 245)
@@ -0,0 +1,3 @@
+<?php
+    // $Id$
+    class fakemodelone{     }


Property changes on: trunk/test/application/models/fakemodelone.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/application/models/fakemodeltwo.php
===================================================================
--- trunk/test/application/models/fakemodeltwo.php	2005-10-29 10:07:49 UTC (rev 244)
+++ trunk/test/application/models/fakemodeltwo.php	2005-10-29 15:49:59 UTC (rev 245)
@@ -0,0 +1,8 @@
+<?php
+
+// $Id$
+    
+include_once('active/record/Base.php');
+
+class fakemodeltwo extends ActiveRecordBase {   }
+


Property changes on: trunk/test/application/models/fakemodeltwo.php
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/test/test/action/controller/InjectorTest.php
===================================================================
--- trunk/test/test/action/controller/InjectorTest.php	2005-10-29 10:07:49 UTC (rev 244)
+++ trunk/test/test/action/controller/InjectorTest.php	2005-10-29 15:49:59 UTC (rev 245)
@@ -0,0 +1,52 @@
+<?php
+
+// $Id$
+
+include_once('logger/Logger.php');
+include_once('mock/MockConfigurator.php');
+include_once('action/controller/Injector.php');
+
+/** Test Injector */
+class InjectorTest extends UnitTestCase {
+
+    /** set up */
+    public function setUp() {
+        Registry::put(new MockConfigurator(), '__configurator');
+        Registry::put(new Logger(), '__logger');
+    }
+    
+    /** tearDown */
+    public function tearDown() {
+        Registry::close();
+    }
+
+    /** Inject a non existent model */
+    public function testFileNotFound() {
+        try {
+            Injector::inject('non_existent_model.php');
+            $this->fail('A FileNotFound Exception should be thrown!');
+        } catch (Exception $ex) {
+            $this->assertIsA($ex, 'FileNotFoundException');
+        }
+    }
+
+    /** A model that don`t extends ActiveRecordBase */
+    public function testWrongModel() {
+        try {
+            Injector::inject('fakemodelone');
+            $this->fail('An InjectorException should be thrown!');
+        } catch (Exception $ex) {
+            $this->assertIsA($ex, 'InjectorException');
+        }
+    }
+
+    /** A model without find method */
+    public function testWrongModelTwo() {
+        try {
+            Injector::inject('fakemodeltwo');
+            $this->fail('An InjectorException should be thrown!');
+        } catch (Exception $ex) {
+            $this->assertIsA($ex, 'InjectorException');
+        }
+    }
+}


Property changes on: trunk/test/test/action/controller/InjectorTest.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sat Oct 29 18:26:19 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 18:26:19 +0200
Subject: [Medick-svn] r246 - trunk/test
Message-ID: <200510291626.j9TGQJVV024745@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 18:26:18 +0200 (Sat, 29 Oct 2005)
New Revision: 246

Modified:
   trunk/test/runner.php
Log:
 [ runner.php ] shebang to /usr/bin/env, this way we will can find php in the PATH

Modified: trunk/test/runner.php
===================================================================
--- trunk/test/runner.php	2005-10-29 15:49:59 UTC (rev 245)
+++ trunk/test/runner.php	2005-10-29 16:26:18 UTC (rev 246)
@@ -1,4 +1,4 @@
-#!/wwwroot/bin/php -q
+#!/usr/bin/env php
 <?php
 
 // $Id$



From aurelian at berlios.de  Sat Oct 29 20:08:33 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 20:08:33 +0200
Subject: [Medick-svn] r247 - trunk/libs/medick
Message-ID: <200510291808.j9TI8X7Y020079@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 20:08:31 +0200 (Sat, 29 Oct 2005)
New Revision: 247

Added:
   trunk/libs/medick/Version.php
Log:
 [ M/Version ] initial import

Added: trunk/libs/medick/Version.php
===================================================================
--- trunk/libs/medick/Version.php	2005-10-29 16:26:18 UTC (rev 246)
+++ trunk/libs/medick/Version.php	2005-10-29 18:08:31 UTC (rev 247)
@@ -0,0 +1,46 @@
+<?php
+// {{{ License
+//////////////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2005 Oancea Aurelian <aurelian at locknet.ro>
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//   * Redistributions of source code must retain the above copyright notice, 
+//   this list of conditions and the following disclaimer. 
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//   this list of conditions and the following disclaimer in the documentation 
+//   and/or other materials provided with the distribution. 
+//   * Neither the name of locknet.ro nor the names of its contributors may 
+//   be used to endorse or promote products derived from this software without 
+//   specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+// 
+// $Id$
+// 
+//////////////////////////////////////////////////////////////////////////////////
+// }}}
+
+/**
+ * @package locknet7.medick
+ */
+
+class Version extends Object {
+
+    public static function getVersion() {
+        return "0.0.3-svn";
+    }
+
+}
+


Property changes on: trunk/libs/medick/Version.php
___________________________________________________________________
Name: svn:keywords
   + Id



From aurelian at berlios.de  Sat Oct 29 21:32:26 2005
From: aurelian at berlios.de (oancea aurelian at BerliOS)
Date: Sat, 29 Oct 2005 21:32:26 +0200
Subject: [Medick-svn] r248 - trunk
Message-ID: <200510291932.j9TJWQQm002305@sheep.berlios.de>

Author: aurelian
Date: 2005-10-29 21:32:25 +0200 (Sat, 29 Oct 2005)
New Revision: 248

Modified:
   trunk/TODO
Log:
 TODO updated.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2005-10-29 18:08:31 UTC (rev 247)
+++ trunk/TODO	2005-10-29 19:32:25 UTC (rev 248)
@@ -13,29 +13,31 @@
 
 0.0.3 WishList:
 ~~~~~~~~~~~~~~~
-A. !! Fix Model by forcing the user to write a dummy static find method.
+A. * Fix Model by forcing the user to write a dummy static find method.
 
 B. !! Using magick __layout or __common shold be optional.
     Think about AJAX who needs to render some plain text or some complex XML document.
 
 C. Implement Session management
 D. Fix && Clean-up Routing System
-E. Clean-up test/* folder
+E. * Clean-up test/* folder
 
+F. !!! medick Web Site, use pmwiki?
+
 General TODO list:
 ~~~~~~~~~~~~~~~~~~
-1. Routing Mechanism.
+1. (0.0.4) Routing Mechanism.
     ! Must choose between some kind of RoR implementation or ivent a new and magick Routing system
     ! On setFailure use a Route as a parameter?
     ! Connect two Routes (a Failure Route and a Route) this way, the Route will know what to expect from Failure.
     
-2. Validators + Error messages.
+2. (0.0.4) Validators + Error messages.
     This task is related with task 1
     
-3. Auth.
+3. (0.0.4) Auth.
     This task is related with task 1.
     
-4. Caching system.
+4. (0.0.7) Caching system.
     This could be done using some sort of isRouteWalked methods.
     this task is related with task 1.
     
@@ -45,12 +47,22 @@
 6. XML template engine (?)
     Not so hard, must be without XSLT since there are a lot  of hosts that don't install this extension.
 
-7. Flash thing.
+7. (0.0.4) Flash thing. depends on Session implementation.
 
-8. Add a configurator alternative so we can remove (or provide an alternative) the simplexml dependency (XMLConfigurator)
+8. (0.0.5) Add a configurator alternative so we can remove (or provide an alternative) the simplexml dependency (XMLConfigurator)
+
     This way, we will also have to try to avoid the spl crap.
     The work on INIConfigurator is on progress.
+    
+    YAML? found a nice php class for parsing: /home/aurelian/Desktop/spyc-0.1.1.tar.gz
 
-9. Generator scripts, for applications, for generating Models/Controllers/Views (fix the old one).
+9. (0.0.6) Generator scripts, for applications, for generating Models/Controllers/Views (fix the old one).
 
+    Application Generator:
+            -> creates a base application skeleton.
+            -> name bin/medick.php
+    generator.php
+            -> right now our generator it`s outdated.
+            -> add more datatypes to scaffold (depends on updating old CLI* classes?).
 
+



